{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/apollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport auth0 from \"../../config/auth0\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloLink, concat } from \"apollo-link\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nvar apolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    var displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var AppTree, session, apolloClient, pageProps, _ref3, getDataFromTree, apolloState;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree;\n\n              if (!ctx.req) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(auth0.getSession(ctx.req));\n\n            case 4:\n              _context.t0 = _context.sent;\n              _context.next = 8;\n              break;\n\n            case 7:\n              _context.t0 = null;\n\n            case 8:\n              session = _context.t0;\n              // console.log(\"---------------------\");\n              // console.log(\"---------------------\");\n              // console.log(\"--------------------- auth0 session ?\", session);\n              // console.log(\"---------------------\");\n              // console.log(\"---------------------\");\n              // const md = ctx.req\n              //   ? new MobileDetect(ctx.req.headers[\"user-agent\"])\n              //   : null;\n              // console.log(\"md.mobile()\", md.mobile());\n              // const isMobile = md ? md.mobile() : false;\n              // const isMobile = \"Cool\";\n              // Initialize ApolloClient, add it to the ctx object so\n              // we can use it in `PageComponent.getInitialProp`.\n              apolloClient = ctx.apolloClient = initApolloClient({\n                session: session\n              }); // console.log(\"apolloClient\", apolloClient);\n              // Run wrapped getInitialProps methods\n\n              pageProps = {};\n\n              if (!PageComponent.getInitialProps) {\n                _context.next = 15;\n                break;\n              }\n\n              _context.next = 14;\n              return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n            case 14:\n              pageProps = _context.sent;\n\n            case 15:\n              if (!false) {\n                _context.next = 32;\n                break;\n              }\n\n              if (!(ctx.res && ctx.res.finished)) {\n                _context.next = 18;\n                break;\n              }\n\n              return _context.abrupt(\"return\", pageProps);\n\n            case 18:\n              if (!ssr) {\n                _context.next = 32;\n                break;\n              }\n\n              _context.prev = 19;\n              _context.next = 22;\n              return _regeneratorRuntime.awrap(import(\"@apollo/react-ssr\"));\n\n            case 22:\n              _ref3 = _context.sent;\n              getDataFromTree = _ref3.getDataFromTree;\n              _context.next = 26;\n              return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                }),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 83\n                },\n                __self: this\n              })));\n\n            case 26:\n              _context.next = 31;\n              break;\n\n            case 28:\n              _context.prev = 28;\n              _context.t1 = _context[\"catch\"](19);\n              // Prevent Apollo Client GraphQL errors from crashing SSR.\n              // Handle them in components via the data.error prop:\n              // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n              console.error(\"Error while running `getDataFromTree`\", _context.t1);\n\n            case 31:\n              // getDataFromTree does not call componentWillUnmount\n              // head side effect therefore need to be cleared manually\n              Head.rewind();\n\n            case 32:\n              // Extract query data from the Apollo store\n              apolloState = apolloClient.cache.extract();\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                // isMobile,\n                apolloState: apolloState\n              }));\n\n            case 34:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[19, 28]]);\n    };\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\nvar isBrowser = true;\nvar httpLink = new HttpLink({\n  // uri:\n  //   // isDocker && isBrowser\n  uri: process.env.BACKEND_URL,\n  // uri: isBrowser\n  //   ? \"http://localhost:4000/graphql\"\n  //   : process.env.BACKEND_URL,\n  // uri: \"http://localhost:4000/graphql\",\n  credentials: \"same-origin\",\n  // Additional fetch() options like `credentials` or `headers`\n  // Use fetch() polyfill on the server\n  fetch: !isBrowser && fetch // fetchOptions: {\n  //   mode: \"no-cors\"\n  // }\n\n}); // const setSessionLink = setContext((request, previousContext) => {\n//   console.log(\"cooollooooooooo\");\n//   console.log(\"cooollooooooooo\", request);\n//   console.log(\"cooollooooooooo\");\n//   return { headers: { authorization: \"1234\" } };\n// });\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var session = initialState.session;\n  var setAuthLink = setContext(function (_, _ref4) {\n    var headers = _ref4.headers;\n    console.log(\"---------------------------------------------\");\n    console.log(\"---------------------------------------------\");\n    console.log(\"-------------- session in setAuthLink --------\", session);\n    console.log(\"---------------------------------------------\");\n    console.log(\"---------------------------------------------\");\n    var token = session && session.idToken ? session.idToken : null;\n    var accessToken = session && session.accessToken ? session.accessToken : null; // console.log(\"----- accessToken ------\", accessToken);\n\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? \"Bearer \".concat(token) : \"\"\n      })\n    };\n  }); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  var isBrowser = true; // const isDocker = process.env.BACKEND_URL === \"http://backend:4000/graphql\";\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    // link: concat(authMiddleware, httpLink),\n    link: setAuthLink.concat(httpLink),\n    // link: httpLink,\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/apollo.js"],"names":["React","Head","auth0","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","ApolloLink","concat","setContext","fetch","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","req","getSession","session","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","isBrowser","httpLink","uri","process","env","BACKEND_URL","credentials","setAuthLink","_","headers","log","token","idToken","accessToken","authorization","connectToDevTools","ssrMode","link","restore"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport auth0 from \"../../config/auth0\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloLink, concat } from \"apollo-link\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\n\nlet apolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState);\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== \"production\") {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx) => {\n      const { AppTree } = ctx;\n      const session = ctx.req ? await auth0.getSession(ctx.req) : null;\n      // console.log(\"---------------------\");\n      // console.log(\"---------------------\");\n      // console.log(\"--------------------- auth0 session ?\", session);\n      // console.log(\"---------------------\");\n      // console.log(\"---------------------\");\n      // const md = ctx.req\n      //   ? new MobileDetect(ctx.req.headers[\"user-agent\"])\n      //   : null;\n      // console.log(\"md.mobile()\", md.mobile());\n      // const isMobile = md ? md.mobile() : false;\n      // const isMobile = \"Cool\";\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = (ctx.apolloClient = initApolloClient({ session }));\n      // console.log(\"apolloClient\", apolloClient);\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind();\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        // isMobile,\n        apolloState,\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === \"undefined\") {\n    return createApolloClient(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\nconst isBrowser = typeof window !== \"undefined\";\n\nconst httpLink = new HttpLink({\n  // uri:\n  //   // isDocker && isBrowser\n  uri: process.env.BACKEND_URL,\n  // uri: isBrowser\n  //   ? \"http://localhost:4000/graphql\"\n  //   : process.env.BACKEND_URL,\n  // uri: \"http://localhost:4000/graphql\",\n  credentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n  // Use fetch() polyfill on the server\n  fetch: !isBrowser && fetch,\n  // fetchOptions: {\n  //   mode: \"no-cors\"\n  // }\n});\n\n// const setSessionLink = setContext((request, previousContext) => {\n//   console.log(\"cooollooooooooo\");\n//   console.log(\"cooollooooooooo\", request);\n//   console.log(\"cooollooooooooo\");\n//   return { headers: { authorization: \"1234\" } };\n// });\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n  const { session } = initialState;\n\n  const setAuthLink = setContext((_, { headers }) => {\n    console.log(\"---------------------------------------------\");\n    console.log(\"---------------------------------------------\");\n    console.log(\"-------------- session in setAuthLink --------\", session);\n    console.log(\"---------------------------------------------\");\n    console.log(\"---------------------------------------------\");\n    const token = session && session.idToken ? session.idToken : null;\n    const accessToken =\n      session && session.accessToken ? session.accessToken : null;\n    // console.log(\"----- accessToken ------\", accessToken);\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    };\n  });\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  const isBrowser = typeof window !== \"undefined\";\n  // const isDocker = process.env.BACKEND_URL === \"http://backend:4000/graphql\";\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\n    // link: concat(authMiddleware, httpLink),\n    link: setAuthLink.concat(httpLink),\n    // link: httpLink,\n    cache: new InMemoryCache().restore(initialState),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}