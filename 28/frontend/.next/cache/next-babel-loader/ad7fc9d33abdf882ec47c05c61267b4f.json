{"ast":null,"code":"var _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nexport const WalletContext = React.createContext({});\nfcl.config().put(\"challenge.handshake\", \"http://localhost:8701/flow/authenticate\");\nexport const withWallet = Component => {\n  const WithWallet = () => {\n    const {\n      0: walletUser,\n      1: setWalletUser\n    } = useState(null);\n    const {\n      0: vaultIsSetup,\n      1: setVaultIsSetup\n    } = useState(false);\n    const {\n      0: collectionIsSetup,\n      1: setCollectionIsSetup\n    } = useState(false);\n    const {\n      0: walletBalance,\n      1: setWalletBalance\n    } = useState(null);\n    const {\n      0: walletCollection,\n      1: setWalletCollection\n    } = useState(null);\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected = walletUser === null || walletUser && !walletUser.loggedIn;\n\n    const setupFCLAuthHandler = () => {\n      fcl.currentUser().subscribe(async user => {\n        if (user.loggedIn) {\n          setWalletUser(user); // Check if the wallet is set up yet\n\n          const vaultStatus = await checkUserVaultStatus();\n          setVaultIsSetup(vaultStatus);\n\n          if (vaultStatus) {\n            startBalancePoll();\n          }\n\n          const collectionStatus = await checkUserCollectionStatus();\n          setCollectionIsSetup(collectionStatus);\n\n          if (collectionStatus) {\n            getUserCollection();\n          }\n        } else {\n          console.log(\"is not logged in\");\n        }\n      });\n    };\n\n    return __jsx(WalletContext.Provider, {\n      value: {\n        walletConnected,\n        walletNotConnected,\n        setupFCLAuthHandler\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, __jsx(Component, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return WithWallet;\n};","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js"],"names":["React","useState","fcl","WalletContext","createContext","config","put","withWallet","Component","WithWallet","walletUser","setWalletUser","vaultIsSetup","setVaultIsSetup","collectionIsSetup","setCollectionIsSetup","walletBalance","setWalletBalance","walletCollection","setWalletCollection","walletConnected","loggedIn","walletNotConnected","setupFCLAuthHandler","currentUser","subscribe","user","vaultStatus","checkUserVaultStatus","startBalancePoll","collectionStatus","checkUserCollectionStatus","getUserCollection","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AAEA,OAAO,MAAMC,aAAa,GAAGH,KAAK,CAACI,aAAN,CAAoB,EAApB,CAAtB;AAEPF,GAAG,CACAG,MADH,GAEGC,GAFH,CAEO,qBAFP,EAE8B,yCAF9B;AAIA,OAAO,MAAMC,UAAU,GAAIC,SAAD,IAAe;AACvC,QAAMC,UAAU,GAAG,MAAM;AACvB,UAAM;AAAA,SAACC,UAAD;AAAA,SAAaC;AAAb,QAA8BV,QAAQ,CAAC,IAAD,CAA5C;AACA,UAAM;AAAA,SAACW,YAAD;AAAA,SAAeC;AAAf,QAAkCZ,QAAQ,CAAC,KAAD,CAAhD;AACA,UAAM;AAAA,SAACa,iBAAD;AAAA,SAAoBC;AAApB,QAA4Cd,QAAQ,CAAC,KAAD,CAA1D;AACA,UAAM;AAAA,SAACe,aAAD;AAAA,SAAgBC;AAAhB,QAAoChB,QAAQ,CAAC,IAAD,CAAlD;AACA,UAAM;AAAA,SAACiB,gBAAD;AAAA,SAAmBC;AAAnB,QAA0ClB,QAAQ,CAAC,IAAD,CAAxD;AAEA,UAAMmB,eAAe,GAAGV,UAAU,IAAIA,UAAU,CAACW,QAAjD;AACA,UAAMC,kBAAkB,GACtBZ,UAAU,KAAK,IAAf,IAAwBA,UAAU,IAAI,CAACA,UAAU,CAACW,QADpD;;AAGA,UAAME,mBAAmB,GAAG,MAAM;AAChCrB,MAAAA,GAAG,CAACsB,WAAJ,GAAkBC,SAAlB,CAA4B,MAAOC,IAAP,IAAgB;AAC1C,YAAIA,IAAI,CAACL,QAAT,EAAmB;AACjBV,UAAAA,aAAa,CAACe,IAAD,CAAb,CADiB,CAEjB;;AACA,gBAAMC,WAAW,GAAG,MAAMC,oBAAoB,EAA9C;AACAf,UAAAA,eAAe,CAACc,WAAD,CAAf;;AACA,cAAIA,WAAJ,EAAiB;AACfE,YAAAA,gBAAgB;AACjB;;AACD,gBAAMC,gBAAgB,GAAG,MAAMC,yBAAyB,EAAxD;AACAhB,UAAAA,oBAAoB,CAACe,gBAAD,CAApB;;AACA,cAAIA,gBAAJ,EAAsB;AACpBE,YAAAA,iBAAiB;AAClB;AACF,SAbD,MAaO;AACLC,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;AACF,OAjBD;AAkBD,KAnBD;;AAqBA,WACE,MAAC,aAAD,CAAe,QAAf;AACE,MAAA,KAAK,EAAE;AAAEd,QAAAA,eAAF;AAAmBE,QAAAA,kBAAnB;AAAuCC,QAAAA;AAAvC,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAOD,GAvCD;;AAwCA,SAAOd,UAAP;AACD,CA1CM","sourcesContent":["import React, { useState } from \"react\";\n\nimport * as fcl from \"@onflow/fcl\";\n\nexport const WalletContext = React.createContext({});\n\nfcl\n  .config()\n  .put(\"challenge.handshake\", \"http://localhost:8701/flow/authenticate\");\n\nexport const withWallet = (Component) => {\n  const WithWallet = () => {\n    const [walletUser, setWalletUser] = useState(null);\n    const [vaultIsSetup, setVaultIsSetup] = useState(false);\n    const [collectionIsSetup, setCollectionIsSetup] = useState(false);\n    const [walletBalance, setWalletBalance] = useState(null);\n    const [walletCollection, setWalletCollection] = useState(null);\n\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected =\n      walletUser === null || (walletUser && !walletUser.loggedIn);\n\n    const setupFCLAuthHandler = () => {\n      fcl.currentUser().subscribe(async (user) => {\n        if (user.loggedIn) {\n          setWalletUser(user);\n          // Check if the wallet is set up yet\n          const vaultStatus = await checkUserVaultStatus();\n          setVaultIsSetup(vaultStatus);\n          if (vaultStatus) {\n            startBalancePoll();\n          }\n          const collectionStatus = await checkUserCollectionStatus();\n          setCollectionIsSetup(collectionStatus);\n          if (collectionStatus) {\n            getUserCollection();\n          }\n        } else {\n          console.log(\"is not logged in\");\n        }\n      });\n    };\n\n    return (\n      <WalletContext.Provider\n        value={{ walletConnected, walletNotConnected, setupFCLAuthHandler }}\n      >\n        <Component />\n      </WalletContext.Provider>\n    );\n  };\n  return WithWallet;\n};\n"]},"metadata":{},"sourceType":"module"}