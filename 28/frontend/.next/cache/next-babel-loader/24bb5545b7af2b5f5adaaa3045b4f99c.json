{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _styled from \"@emotion/styled-base\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/components/wallet-details/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useEffect, useContext, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport * as fcl from \"@onflow/fcl\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLink, faPlug, faWallet, faTrophyAlt } from \"@fortawesome/pro-regular-svg-icons\";\nimport { WHITE } from \"@style/colors\";\nimport { WalletContext } from \"@enhancers/wallet-provider\";\nimport CoralButton from \"@library/components/buttons/coral\";\nimport { BASE_TEXT, WEIGHT } from \"@style/typography\";\nimport { AuxiliaryPanelHeader } from \"@library/components/typography/headers/auxiliary-panel\";\nimport { Divider } from \"@library/components/layout\";\n\nvar Container = /*#__PURE__*/_styled(\"div\", {\n  target: \"e1tp03sa0\",\n  label: \"Container\"\n})({\n  display: \"flex\",\n  flexDirection: \"column\",\n  borderRadius: 3,\n  backgroundColor: WHITE,\n  boxShadow: \"0 1px 2px 0 rgba(0,0,0,.1)\",\n  padding: \"1rem\"\n}, false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWtlaGFtaWx0b24vZGV2ZWxvcG1lbnQvbHlyYS1sYWJzLWRldi9seXJhLWxhYnMvZnJvbnRlbmQvY29tcG9uZW50cy93YWxsZXQtZGV0YWlscy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5QmtCIiwiZmlsZSI6Ii9Vc2Vycy9sdWtlaGFtaWx0b24vZGV2ZWxvcG1lbnQvbHlyYS1sYWJzLWRldi9seXJhLWxhYnMvZnJvbnRlbmQvY29tcG9uZW50cy93YWxsZXQtZGV0YWlscy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZUNvbnRleHQsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5pbXBvcnQgKiBhcyBmY2wgZnJvbSBcIkBvbmZsb3cvZmNsXCI7XG5cbmltcG9ydCB7IEZvbnRBd2Vzb21lSWNvbiB9IGZyb20gXCJAZm9ydGF3ZXNvbWUvcmVhY3QtZm9udGF3ZXNvbWVcIjtcbmltcG9ydCB7XG4gIGZhTGluayxcbiAgZmFQbHVnLFxuICBmYVdhbGxldCxcbiAgZmFUcm9waHlBbHQsXG59IGZyb20gXCJAZm9ydGF3ZXNvbWUvcHJvLXJlZ3VsYXItc3ZnLWljb25zXCI7XG5cbmltcG9ydCB7IFdISVRFIH0gZnJvbSBcIkBzdHlsZS9jb2xvcnNcIjtcblxuaW1wb3J0IHsgV2FsbGV0Q29udGV4dCB9IGZyb20gXCJAZW5oYW5jZXJzL3dhbGxldC1wcm92aWRlclwiO1xuaW1wb3J0IENvcmFsQnV0dG9uIGZyb20gXCJAbGlicmFyeS9jb21wb25lbnRzL2J1dHRvbnMvY29yYWxcIjtcblxuaW1wb3J0IHsgQkFTRV9URVhULCBXRUlHSFQgfSBmcm9tIFwiQHN0eWxlL3R5cG9ncmFwaHlcIjtcblxuaW1wb3J0IHsgQXV4aWxpYXJ5UGFuZWxIZWFkZXIgfSBmcm9tIFwiQGxpYnJhcnkvY29tcG9uZW50cy90eXBvZ3JhcGh5L2hlYWRlcnMvYXV4aWxpYXJ5LXBhbmVsXCI7XG5cbmltcG9ydCB7IERpdmlkZXIgfSBmcm9tIFwiQGxpYnJhcnkvY29tcG9uZW50cy9sYXlvdXRcIjtcblxuY29uc3QgQ29udGFpbmVyID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgZGlzcGxheTogXCJmbGV4XCIsXG4gIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gIGJvcmRlclJhZGl1czogMyxcbiAgYmFja2dyb3VuZENvbG9yOiBXSElURSxcbiAgYm94U2hhZG93OiBcIjAgMXB4IDJweCAwIHJnYmEoMCwwLDAsLjEpXCIsXG4gIHBhZGRpbmc6IFwiMXJlbVwiLFxufSk7XG5cbmNvbnN0IExhYmVsID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgLi4uQkFTRV9URVhULFxuICBmb250U2l6ZTogMTIsXG4gIGZvbnRXZWlnaHQ6IFdFSUdIVC5CT0xELFxufSk7XG5cbmNvbnN0IFZhbHVlID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgLi4uQkFTRV9URVhULFxufSk7XG5cbmNvbnN0IFRleHRHcm91cCA9IHN0eWxlZChcImRpdlwiKSh7XG4gIGRpc3BsYXk6IFwiZmxleFwiLFxuICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxufSk7XG5cbmNvbnN0IFN0eWxlZERpdmlkZXIgPSBzdHlsZWQoRGl2aWRlcikoe1xuICBtYXJnaW5Ub3A6IDUsXG4gIG1hcmdpbkJvdHRvbTogNSxcbn0pO1xuXG5jb25zdCBjdGFCdXR0b25TdHlsZXMgPSB7XG4gIGhlaWdodDogMjQsXG4gIG1hcmdpblRvcDogNSxcbiAgbWFyZ2luQm90dG9tOiA1LFxufTtcblxuY29uc3QgU3R5bGVkQ29yYWxCdXR0b24gPSBzdHlsZWQoQ29yYWxCdXR0b24pKHtcbiAgLi4uY3RhQnV0dG9uU3R5bGVzLFxufSk7XG5cbmNvbnN0IEF3YXJkcyA9IHN0eWxlZChcImRpdlwiKSh7XG4gIGRpc3BsYXk6IFwiZmxleFwiLFxufSk7XG5cbmNvbnN0IEF3YXJkID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgbWFyZ2luUmlnaHQ6IDEwLFxuICBkaXNwbGF5OiBcImZsZXhcIixcbiAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbn0pO1xuXG5jb25zdCBBd2FyZEltZyA9IHN0eWxlZChcImRpdlwiKSh7XG4gIC4uLkJBU0VfVEVYVCxcbiAgZm9udFNpemU6IDIyLFxufSk7XG5cbmNvbnN0IEF3YXJkSWQgPSBzdHlsZWQoXCJkaXZcIikoe1xuICAuLi5CQVNFX1RFWFQsXG59KTtcblxuY29uc3QgV2FsbGV0RGV0YWlscyA9ICh7IGN1cnJlbnRVc2VyIH0pID0+IHtcbiAgY29uc3Qge1xuICAgIHdhbGxldENvbm5lY3RlZCxcbiAgICB3YWxsZXROb3RDb25uZWN0ZWQsXG4gICAgc2V0dXBXYWxsZXQsXG4gICAgc2V0dXBGQ0xBdXRoSGFuZGxlcixcbiAgICB3YWxsZXRVc2VyLFxuICAgIHZhdWx0SXNTZXR1cCxcbiAgICBjb2xsZWN0aW9uSXNTZXR1cCxcbiAgICB3YWxsZXRCYWxhbmNlLFxuICAgIHdhbGxldENvbGxlY3Rpb24sXG4gICAgY29ubmVjdEFjdGl2ZVdhbGxldFRvTHlyYUxhYnMsXG4gICAgYXV0aEhhbmRsZXJJc1NldHVwLFxuICAgIHNldEF1dGhIYW5kbGVySXNTZXR1cCxcbiAgfSA9IHVzZUNvbnRleHQoV2FsbGV0Q29udGV4dCk7XG5cbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gIGNvbnN0IHJvdXRlID0gcm91dGVyLnJvdXRlO1xuXG4gIC8vIHVzZUVmZmVjdCgoKSA9PiB7XG4gIC8vICAgaWYgKCFhdXRoSGFuZGxlcklzU2V0dXApIHtcbiAgLy8gICAgIHNldHVwRkNMQXV0aEhhbmRsZXIoKTtcbiAgLy8gICAgIHNldEF1dGhIYW5kbGVySXNTZXR1cCh0cnVlKTtcbiAgLy8gICB9XG4gIC8vIH0sIFtdKTtcblxuICAvLyBjb25zb2xlLmxvZyhcInJvdXRlXCIsIHJvdXRlKTtcblxuICBjb25zdCB3YWxsZXRJc0xpbmtlZCA9XG4gICAgY3VycmVudFVzZXIgJiYgY3VycmVudFVzZXIud2FsbGV0QWRkcmVzcyAmJiBjdXJyZW50VXNlci53YWxsZXRJc1NldHVwO1xuXG4gIGNvbnN0IHdhbGxldElzQWN0aXZlID0gd2FsbGV0Q29ubmVjdGVkICYmIHdhbGxldFVzZXI7XG5cbiAgLy8gY29uc3Qgd2FsbGV0SGFzQmFsYW5jZSA9IHdhbGxldENvbm5lY3RlZCAmJiB2YXVsdElzU2V0dXAgJiYgd2FsbGV0QmFsYW5jZTtcblxuICAvLyBjb25zdCB3YWxsZXRIYXNBd2FyZHMgPVxuICAvLyAgIHdhbGxldENvbm5lY3RlZCAmJiBjb2xsZWN0aW9uSXNTZXR1cCAmJiB3YWxsZXRDb2xsZWN0aW9uO1xuXG4gIGNvbnN0IHdhbGxldElzQ29uZmlndXJlZCA9IHZhdWx0SXNTZXR1cCAmJiBjb2xsZWN0aW9uSXNTZXR1cDtcblxuICBjb25zdCBbc3RhdHVzLCBzZXRTdGF0dXNdID0gdXNlU3RhdGUoXCJOb3Qgc3RhcnRlZFwiKTtcbiAgY29uc3QgW3RyYW5zYWN0aW9uLCBzZXRUcmFuc2FjdGlvbl0gPSB1c2VTdGF0ZShudWxsKTtcblxuICBjb25zdCBzaW1wbGVUcmFuc2FjdGlvbiA9IGBcXFxuICB0cmFuc2FjdGlvbiB7XG4gICAgZXhlY3V0ZSB7XG4gICAgICBsb2coXCJIZWxsbyBXb3JsZCEhXCIpXG4gICAgfVxuICB9XG4gIGA7XG5cbiAgY29uc3Qgc2VuZFRyYW5zYWN0aW9uID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIHNldFN0YXR1cyhcIlJlc29sdmluZy4uLlwiKTtcblxuICAgIGNvbnN0IGJsb2NrUmVzcG9uc2UgPSBhd2FpdCBmY2wuc2VuZChbZmNsLmdldExhdGVzdEJsb2NrKCldKTtcblxuICAgIGNvbnN0IGJsb2NrID0gYXdhaXQgZmNsLmRlY29kZShibG9ja1Jlc3BvbnNlKTtcblxuICAgIGNvbnNvbGUubG9nKFwiLS0tLS0gYmxvY2sgLS0tLS1cIiwgYmxvY2spO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHR4ID0gYXdhaXQgZmNsLnNlbmQoW1xuICAgICAgICBmY2wudHJhbnNhY3Rpb24oc2ltcGxlVHJhbnNhY3Rpb24pLFxuICAgICAgICBmY2wucHJvcG9zZXIoZmNsLmN1cnJlbnRVc2VyKCkuYXV0aG9yaXphdGlvbiksXG4gICAgICAgIGZjbC5wYXllcihmY2wuY3VycmVudFVzZXIoKS5hdXRob3JpemF0aW9uKSxcbiAgICAgICAgZmNsLnJlZihibG9jay5pZCksXG4gICAgICBdKTtcblxuICAgICAgY29uc3QgeyB0cmFuc2FjdGlvbklkIH0gPSB0eDtcblxuICAgICAgc2V0U3RhdHVzKFwiVHJhbnNhY3Rpb24gc2VudCwgd2FpdGluZyBmb3IgY29uZmlybWF0aW9uXCIpO1xuXG4gICAgICBjb25zdCB1bnN1YiA9IGZjbC50eCh7IHRyYW5zYWN0aW9uSWQgfSkuc3Vic2NyaWJlKCh0cmFuc2FjdGlvbikgPT4ge1xuICAgICAgICBzZXRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbik7XG5cbiAgICAgICAgaWYgKGZjbC50eC5pc1NlYWxlZCh0cmFuc2FjdGlvbikpIHtcbiAgICAgICAgICBzZXRTdGF0dXMoXCJUcmFuc2FjdGlvbiBpcyBTZWFsZWRcIik7XG4gICAgICAgICAgdW5zdWIoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgc2V0U3RhdHVzKFwiVHJhbnNhY3Rpb24gZmFpbGVkXCIpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Y29kZT57c2ltcGxlVHJhbnNhY3Rpb259PC9jb2RlPlxuXG4gICAgICA8YnV0dG9uIG9uQ2xpY2s9e3NlbmRUcmFuc2FjdGlvbn0+U2VuZDwvYnV0dG9uPlxuXG4gICAgICA8Y29kZT5TdGF0dXM6IHtzdGF0dXN9PC9jb2RlPlxuXG4gICAgICB7dHJhbnNhY3Rpb24gJiYgPGNvZGU+e0pTT04uc3RyaW5naWZ5KHRyYW5zYWN0aW9uLCBudWxsLCAyKX08L2NvZGU+fVxuXG4gICAgICB7LyogPEF1eGlsaWFyeVBhbmVsSGVhZGVyPkZsb3cgV2FsbGV0PC9BdXhpbGlhcnlQYW5lbEhlYWRlcj5cbiAgICAgIDxDb250YWluZXI+XG4gICAgICAgIDxUZXh0R3JvdXA+XG4gICAgICAgICAgPExhYmVsPlxuICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUxpbmt9IC8+IExpbmtlZCBXYWxsZXRcbiAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgIHt3YWxsZXRJc0xpbmtlZCA/IChcbiAgICAgICAgICAgIDxWYWx1ZT57YDB4JHtjdXJyZW50VXNlci53YWxsZXRBZGRyZXNzfWB9PC9WYWx1ZT5cbiAgICAgICAgICApIDogd2FsbGV0SXNBY3RpdmUgPyAoXG4gICAgICAgICAgICB3YWxsZXRJc0NvbmZpZ3VyZWQgPyAoXG4gICAgICAgICAgICAgIDxTdHlsZWRDb3JhbEJ1dHRvbiBvbkNsaWNrPXtjb25uZWN0QWN0aXZlV2FsbGV0VG9MeXJhTGFic30+XG4gICAgICAgICAgICAgICAgTGluayBXYWxsZXRcbiAgICAgICAgICAgICAgPC9TdHlsZWRDb3JhbEJ1dHRvbj5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxTdHlsZWRDb3JhbEJ1dHRvbiBvbkNsaWNrPXtzZXR1cFdhbGxldH0+XG4gICAgICAgICAgICAgICAgU2V0dXAgV2FsbGV0XG4gICAgICAgICAgICAgIDwvU3R5bGVkQ29yYWxCdXR0b24+XG4gICAgICAgICAgICApXG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxWYWx1ZT5Ob25lPC9WYWx1ZT5cbiAgICAgICAgICApfVxuICAgICAgICA8L1RleHRHcm91cD5cbiAgICAgICAgPFN0eWxlZERpdmlkZXIgLz5cbiAgICAgICAgPFRleHRHcm91cD5cbiAgICAgICAgICA8TGFiZWw+XG4gICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhUGx1Z30gLz4gQWN0aXZlIFdhbGxldFxuICAgICAgICAgIDwvTGFiZWw+XG4gICAgICAgICAge3dhbGxldElzQWN0aXZlID8gKFxuICAgICAgICAgICAgPFZhbHVlPntgMHgke3dhbGxldFVzZXIuYWRkcn1gfTwvVmFsdWU+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxTdHlsZWRDb3JhbEJ1dHRvbiBvbkNsaWNrPXtmY2wuYXV0aGVudGljYXRlfT5cbiAgICAgICAgICAgICAgQ29ubmVjdCBXYWxsZXRcbiAgICAgICAgICAgIDwvU3R5bGVkQ29yYWxCdXR0b24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9UZXh0R3JvdXA+XG4gICAgICAgIDxTdHlsZWREaXZpZGVyIC8+XG4gICAgICAgIDxUZXh0R3JvdXA+XG4gICAgICAgICAgPExhYmVsPlxuICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYVdhbGxldH0gLz4gQmFsYW5jZVxuICAgICAgICAgIDwvTGFiZWw+XG4gICAgICAgICAge3dhbGxldElzQWN0aXZlID8gKFxuICAgICAgICAgICAgd2FsbGV0SXNDb25maWd1cmVkID8gKFxuICAgICAgICAgICAgICA8VmFsdWU+e2Ake3dhbGxldEJhbGFuY2V9IExZUkFgfTwvVmFsdWU+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8VmFsdWU+Tm8gd2FsbGV0IHNldHVwPC9WYWx1ZT5cbiAgICAgICAgICAgIClcbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFZhbHVlPk5vIGFjdGl2ZSB3YWxsZXQ8L1ZhbHVlPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvVGV4dEdyb3VwPlxuICAgICAgICA8U3R5bGVkRGl2aWRlciAvPlxuICAgICAgICA8VGV4dEdyb3VwPlxuICAgICAgICAgIDxMYWJlbD5cbiAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUcm9waHlBbHR9IC8+IEF3YXJkc1xuICAgICAgICAgIDwvTGFiZWw+XG4gICAgICAgICAge3dhbGxldElzQWN0aXZlID8gKFxuICAgICAgICAgICAgd2FsbGV0SXNDb25maWd1cmVkID8gKFxuICAgICAgICAgICAgICA8VmFsdWU+XG4gICAgICAgICAgICAgICAge3dhbGxldENvbGxlY3Rpb24gJiYgd2FsbGV0Q29sbGVjdGlvbi5sZW5ndGggPiAwID8gKFxuICAgICAgICAgICAgICAgICAgPEF3YXJkcz5cbiAgICAgICAgICAgICAgICAgICAge3dhbGxldENvbGxlY3Rpb24ubWFwKChpdGVtKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgPEF3YXJkIGtleT17aXRlbX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QXdhcmRJbWc+8J+PhTwvQXdhcmRJbWc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QXdhcmRJZD57YCMke2l0ZW19YH08L0F3YXJkSWQ+XG4gICAgICAgICAgICAgICAgICAgICAgPC9Bd2FyZD5cbiAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgICA8L0F3YXJkcz5cbiAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgXCJub25lXCJcbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L1ZhbHVlPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPFZhbHVlPk5vIHdhbGxldCBzZXR1cDwvVmFsdWU+XG4gICAgICAgICAgICApXG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxWYWx1ZT5ObyBhY3RpdmUgd2FsbGV0PC9WYWx1ZT5cbiAgICAgICAgICApfVxuICAgICAgICA8L1RleHRHcm91cD5cbiAgICAgIDwvQ29udGFpbmVyPiAqL31cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFdhbGxldERldGFpbHM7XG4iXX0= */\");\n\nvar Label = /*#__PURE__*/_styled(\"div\", {\n  target: \"e1tp03sa1\",\n  label: \"Label\"\n})(_objectSpread(_objectSpread({}, BASE_TEXT), {}, {\n  fontSize: 12,\n  fontWeight: WEIGHT.BOLD\n}), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar Value = /*#__PURE__*/_styled(\"div\", {\n  target: \"e1tp03sa2\",\n  label: \"Value\"\n})(_objectSpread({}, BASE_TEXT), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar TextGroup = /*#__PURE__*/_styled(\"div\", {\n  target: \"e1tp03sa3\",\n  label: \"TextGroup\"\n})(false ? {\n  name: \"j7qwjs\",\n  styles: \"display:flex;flex-direction:column;\"\n} : {\n  name: \"j7qwjs\",\n  styles: \"display:flex;flex-direction:column;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar StyledDivider = /*#__PURE__*/_styled(Divider, {\n  target: \"e1tp03sa4\",\n  label: \"StyledDivider\"\n})(false ? {\n  name: \"s98few\",\n  styles: \"margin-top:5px;margin-bottom:5px;\"\n} : {\n  name: \"s98few\",\n  styles: \"margin-top:5px;margin-bottom:5px;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar ctaButtonStyles = {\n  height: 24,\n  marginTop: 5,\n  marginBottom: 5\n};\n\nvar StyledCoralButton = /*#__PURE__*/_styled(CoralButton, {\n  target: \"e1tp03sa5\",\n  label: \"StyledCoralButton\"\n})(_objectSpread({}, ctaButtonStyles), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar Awards = /*#__PURE__*/_styled(\"div\", {\n  target: \"e1tp03sa6\",\n  label: \"Awards\"\n})(false ? {\n  name: \"k008qs\",\n  styles: \"display:flex;\"\n} : {\n  name: \"k008qs\",\n  styles: \"display:flex;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar Award = /*#__PURE__*/_styled(\"div\", {\n  target: \"e1tp03sa7\",\n  label: \"Award\"\n})(false ? {\n  name: \"1t7rc33\",\n  styles: \"margin-right:10px;display:flex;flex-direction:column;align-items:center;\"\n} : {\n  name: \"1t7rc33\",\n  styles: \"margin-right:10px;display:flex;flex-direction:column;align-items:center;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar AwardImg = /*#__PURE__*/_styled(\"div\", {\n  target: \"e1tp03sa8\",\n  label: \"AwardImg\"\n})(_objectSpread(_objectSpread({}, BASE_TEXT), {}, {\n  fontSize: 22\n}), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar AwardId = /*#__PURE__*/_styled(\"div\", {\n  target: \"e1tp03sa9\",\n  label: \"AwardId\"\n})(_objectSpread({}, BASE_TEXT), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar WalletDetails = function WalletDetails(_ref) {\n  _s();\n\n  var currentUser = _ref.currentUser;\n\n  var _useContext = useContext(WalletContext),\n      walletConnected = _useContext.walletConnected,\n      walletNotConnected = _useContext.walletNotConnected,\n      setupWallet = _useContext.setupWallet,\n      setupFCLAuthHandler = _useContext.setupFCLAuthHandler,\n      walletUser = _useContext.walletUser,\n      vaultIsSetup = _useContext.vaultIsSetup,\n      collectionIsSetup = _useContext.collectionIsSetup,\n      walletBalance = _useContext.walletBalance,\n      walletCollection = _useContext.walletCollection,\n      connectActiveWalletToLyraLabs = _useContext.connectActiveWalletToLyraLabs,\n      authHandlerIsSetup = _useContext.authHandlerIsSetup,\n      setAuthHandlerIsSetup = _useContext.setAuthHandlerIsSetup;\n\n  var router = useRouter();\n  var route = router.route; // useEffect(() => {\n  //   if (!authHandlerIsSetup) {\n  //     setupFCLAuthHandler();\n  //     setAuthHandlerIsSetup(true);\n  //   }\n  // }, []);\n  // console.log(\"route\", route);\n\n  var walletIsLinked = currentUser && currentUser.walletAddress && currentUser.walletIsSetup;\n  var walletIsActive = walletConnected && walletUser; // const walletHasBalance = walletConnected && vaultIsSetup && walletBalance;\n  // const walletHasAwards =\n  //   walletConnected && collectionIsSetup && walletCollection;\n\n  var walletIsConfigured = vaultIsSetup && collectionIsSetup;\n\n  var _useState = useState(\"Not started\"),\n      status = _useState[0],\n      setStatus = _useState[1];\n\n  var _useState2 = useState(null),\n      transaction = _useState2[0],\n      setTransaction = _useState2[1];\n\n  var simpleTransaction = \"  transaction {\\n    execute {\\n      log(\\\"Hello World!!\\\")\\n    }\\n  }\\n  \";\n\n  var sendTransaction = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var blockResponse, block, tx, transactionId, unsub;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              setStatus(\"Resolving...\");\n              _context.next = 4;\n              return fcl.send([fcl.getLatestBlock()]);\n\n            case 4:\n              blockResponse = _context.sent;\n              _context.next = 7;\n              return fcl.decode(blockResponse);\n\n            case 7:\n              block = _context.sent;\n              console.log(\"----- block -----\", block);\n              _context.prev = 9;\n              _context.next = 12;\n              return fcl.send([fcl.transaction(simpleTransaction), fcl.proposer(fcl.currentUser().authorization), fcl.payer(fcl.currentUser().authorization), fcl.ref(block.id)]);\n\n            case 12:\n              tx = _context.sent;\n              transactionId = tx.transactionId;\n              setStatus(\"Transaction sent, waiting for confirmation\");\n              unsub = fcl.tx({\n                transactionId: transactionId\n              }).subscribe(function (transaction) {\n                setTransaction(transaction);\n\n                if (fcl.tx.isSealed(transaction)) {\n                  setStatus(\"Transaction is Sealed\");\n                  unsub();\n                }\n              });\n              _context.next = 22;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](9);\n              console.error(_context.t0);\n              setStatus(\"Transaction failed\");\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[9, 18]]);\n    }));\n\n    return function sendTransaction(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(\"code\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, simpleTransaction), __jsx(\"button\", {\n    onClick: sendTransaction,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, \"Send\"), __jsx(\"code\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, \"Status: \", status), transaction && __jsx(\"code\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 23\n    }\n  }, JSON.stringify(transaction, null, 2)));\n};\n\n_s(WalletDetails, \"pGg/0Vdoj32EA14uaTYuPgiT/vU=\", false, function () {\n  return [useRouter];\n});\n\n_c = WalletDetails;\nexport default WalletDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletDetails\");","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/components/wallet-details/index.js"],"names":["React","useEffect","useContext","useState","useRouter","fcl","FontAwesomeIcon","faLink","faPlug","faWallet","faTrophyAlt","WHITE","WalletContext","CoralButton","BASE_TEXT","WEIGHT","AuxiliaryPanelHeader","Divider","Container","display","flexDirection","borderRadius","backgroundColor","boxShadow","padding","Label","fontSize","fontWeight","BOLD","Value","TextGroup","StyledDivider","ctaButtonStyles","height","marginTop","marginBottom","StyledCoralButton","Awards","Award","AwardImg","AwardId","WalletDetails","currentUser","walletConnected","walletNotConnected","setupWallet","setupFCLAuthHandler","walletUser","vaultIsSetup","collectionIsSetup","walletBalance","walletCollection","connectActiveWalletToLyraLabs","authHandlerIsSetup","setAuthHandlerIsSetup","router","route","walletIsLinked","walletAddress","walletIsSetup","walletIsActive","walletIsConfigured","status","setStatus","transaction","setTransaction","simpleTransaction","sendTransaction","event","preventDefault","send","getLatestBlock","blockResponse","decode","block","console","log","proposer","authorization","payer","ref","id","tx","transactionId","unsub","subscribe","isSealed","error","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport styled from \"@emotion/styled\";\n\nimport * as fcl from \"@onflow/fcl\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faLink,\n  faPlug,\n  faWallet,\n  faTrophyAlt,\n} from \"@fortawesome/pro-regular-svg-icons\";\n\nimport { WHITE } from \"@style/colors\";\n\nimport { WalletContext } from \"@enhancers/wallet-provider\";\nimport CoralButton from \"@library/components/buttons/coral\";\n\nimport { BASE_TEXT, WEIGHT } from \"@style/typography\";\n\nimport { AuxiliaryPanelHeader } from \"@library/components/typography/headers/auxiliary-panel\";\n\nimport { Divider } from \"@library/components/layout\";\n\nconst Container = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\",\n  borderRadius: 3,\n  backgroundColor: WHITE,\n  boxShadow: \"0 1px 2px 0 rgba(0,0,0,.1)\",\n  padding: \"1rem\",\n});\n\nconst Label = styled(\"div\")({\n  ...BASE_TEXT,\n  fontSize: 12,\n  fontWeight: WEIGHT.BOLD,\n});\n\nconst Value = styled(\"div\")({\n  ...BASE_TEXT,\n});\n\nconst TextGroup = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\",\n});\n\nconst StyledDivider = styled(Divider)({\n  marginTop: 5,\n  marginBottom: 5,\n});\n\nconst ctaButtonStyles = {\n  height: 24,\n  marginTop: 5,\n  marginBottom: 5,\n};\n\nconst StyledCoralButton = styled(CoralButton)({\n  ...ctaButtonStyles,\n});\n\nconst Awards = styled(\"div\")({\n  display: \"flex\",\n});\n\nconst Award = styled(\"div\")({\n  marginRight: 10,\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n});\n\nconst AwardImg = styled(\"div\")({\n  ...BASE_TEXT,\n  fontSize: 22,\n});\n\nconst AwardId = styled(\"div\")({\n  ...BASE_TEXT,\n});\n\nconst WalletDetails = ({ currentUser }) => {\n  const {\n    walletConnected,\n    walletNotConnected,\n    setupWallet,\n    setupFCLAuthHandler,\n    walletUser,\n    vaultIsSetup,\n    collectionIsSetup,\n    walletBalance,\n    walletCollection,\n    connectActiveWalletToLyraLabs,\n    authHandlerIsSetup,\n    setAuthHandlerIsSetup,\n  } = useContext(WalletContext);\n\n  const router = useRouter();\n  const route = router.route;\n\n  // useEffect(() => {\n  //   if (!authHandlerIsSetup) {\n  //     setupFCLAuthHandler();\n  //     setAuthHandlerIsSetup(true);\n  //   }\n  // }, []);\n\n  // console.log(\"route\", route);\n\n  const walletIsLinked =\n    currentUser && currentUser.walletAddress && currentUser.walletIsSetup;\n\n  const walletIsActive = walletConnected && walletUser;\n\n  // const walletHasBalance = walletConnected && vaultIsSetup && walletBalance;\n\n  // const walletHasAwards =\n  //   walletConnected && collectionIsSetup && walletCollection;\n\n  const walletIsConfigured = vaultIsSetup && collectionIsSetup;\n\n  const [status, setStatus] = useState(\"Not started\");\n  const [transaction, setTransaction] = useState(null);\n\n  const simpleTransaction = `\\\n  transaction {\n    execute {\n      log(\"Hello World!!\")\n    }\n  }\n  `;\n\n  const sendTransaction = async (event) => {\n    event.preventDefault();\n\n    setStatus(\"Resolving...\");\n\n    const blockResponse = await fcl.send([fcl.getLatestBlock()]);\n\n    const block = await fcl.decode(blockResponse);\n\n    console.log(\"----- block -----\", block);\n\n    try {\n      const tx = await fcl.send([\n        fcl.transaction(simpleTransaction),\n        fcl.proposer(fcl.currentUser().authorization),\n        fcl.payer(fcl.currentUser().authorization),\n        fcl.ref(block.id),\n      ]);\n\n      const { transactionId } = tx;\n\n      setStatus(\"Transaction sent, waiting for confirmation\");\n\n      const unsub = fcl.tx({ transactionId }).subscribe((transaction) => {\n        setTransaction(transaction);\n\n        if (fcl.tx.isSealed(transaction)) {\n          setStatus(\"Transaction is Sealed\");\n          unsub();\n        }\n      });\n    } catch (error) {\n      console.error(error);\n      setStatus(\"Transaction failed\");\n    }\n  };\n\n  return (\n    <>\n      <code>{simpleTransaction}</code>\n\n      <button onClick={sendTransaction}>Send</button>\n\n      <code>Status: {status}</code>\n\n      {transaction && <code>{JSON.stringify(transaction, null, 2)}</code>}\n\n      {/* <AuxiliaryPanelHeader>Flow Wallet</AuxiliaryPanelHeader>\n      <Container>\n        <TextGroup>\n          <Label>\n            <FontAwesomeIcon icon={faLink} /> Linked Wallet\n          </Label>\n          {walletIsLinked ? (\n            <Value>{`0x${currentUser.walletAddress}`}</Value>\n          ) : walletIsActive ? (\n            walletIsConfigured ? (\n              <StyledCoralButton onClick={connectActiveWalletToLyraLabs}>\n                Link Wallet\n              </StyledCoralButton>\n            ) : (\n              <StyledCoralButton onClick={setupWallet}>\n                Setup Wallet\n              </StyledCoralButton>\n            )\n          ) : (\n            <Value>None</Value>\n          )}\n        </TextGroup>\n        <StyledDivider />\n        <TextGroup>\n          <Label>\n            <FontAwesomeIcon icon={faPlug} /> Active Wallet\n          </Label>\n          {walletIsActive ? (\n            <Value>{`0x${walletUser.addr}`}</Value>\n          ) : (\n            <StyledCoralButton onClick={fcl.authenticate}>\n              Connect Wallet\n            </StyledCoralButton>\n          )}\n        </TextGroup>\n        <StyledDivider />\n        <TextGroup>\n          <Label>\n            <FontAwesomeIcon icon={faWallet} /> Balance\n          </Label>\n          {walletIsActive ? (\n            walletIsConfigured ? (\n              <Value>{`${walletBalance} LYRA`}</Value>\n            ) : (\n              <Value>No wallet setup</Value>\n            )\n          ) : (\n            <Value>No active wallet</Value>\n          )}\n        </TextGroup>\n        <StyledDivider />\n        <TextGroup>\n          <Label>\n            <FontAwesomeIcon icon={faTrophyAlt} /> Awards\n          </Label>\n          {walletIsActive ? (\n            walletIsConfigured ? (\n              <Value>\n                {walletCollection && walletCollection.length > 0 ? (\n                  <Awards>\n                    {walletCollection.map((item) => (\n                      <Award key={item}>\n                        <AwardImg>🏅</AwardImg>\n                        <AwardId>{`#${item}`}</AwardId>\n                      </Award>\n                    ))}\n                  </Awards>\n                ) : (\n                  \"none\"\n                )}\n              </Value>\n            ) : (\n              <Value>No wallet setup</Value>\n            )\n          ) : (\n            <Value>No active wallet</Value>\n          )}\n        </TextGroup>\n      </Container> */}\n    </>\n  );\n};\n\nexport default WalletDetails;\n"]},"metadata":{},"sourceType":"module"}