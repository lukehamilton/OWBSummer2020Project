{"ast":null,"code":"var _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nexport const WalletContext = React.createContext({});\nfcl.config().put(\"challenge.handshake\", \"http://localhost:8701/flow/authenticate\");\n\nconst getAddress = (user, nullPrefix = true) => {\n  return nullPrefix ? `0x${user.addr}` : user.addr;\n};\n\nconst generateCode = async (rawCode, match) => {\n  if (!match) {\n    return rawCode;\n  }\n\n  const {\n    query\n  } = match;\n  return rawCode.replace(query, item => {\n    return match[item];\n  });\n};\n\nexport const withWallet = Component => {\n  const WithWallet = () => {\n    const {\n      0: walletUser,\n      1: setWalletUser\n    } = useState(null);\n    const {\n      0: vaultIsSetup,\n      1: setVaultIsSetup\n    } = useState(false);\n    const {\n      0: collectionIsSetup,\n      1: setCollectionIsSetup\n    } = useState(false);\n    const {\n      0: walletBalance,\n      1: setWalletBalance\n    } = useState(null);\n    const {\n      0: walletCollection,\n      1: setWalletCollection\n    } = useState(null);\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected = walletUser === null || walletUser && !walletUser.loggedIn;\n\n    const setupFCLAuthHandler = () => {\n      console.log(\"calling setupFCLAuthHandler\");\n      fcl.currentUser().subscribe(async user => {\n        if (user.loggedIn) {\n          setWalletUser(user); // Check if the wallet is set up yet\n\n          const vaultStatus = await checkUserVaultStatus();\n          setVaultIsSetup(vaultStatus);\n\n          if (vaultStatus) {\n            startBalancePoll();\n          }\n\n          const collectionStatus = await checkUserCollectionStatus();\n          setCollectionIsSetup(collectionStatus);\n\n          if (collectionStatus) {\n            getUserCollection();\n          }\n        } else {\n          console.log(\"is not logged in\");\n        }\n      });\n    };\n\n    let pollId = null;\n\n    const startBalancePoll = async () => {\n      const balance = await getUserBalance();\n      setWalletBalance(balance);\n      pollId = setTimeout(startBalancePoll, 2000);\n    };\n\n    return __jsx(WalletContext.Provider, {\n      value: {\n        walletConnected,\n        walletNotConnected,\n        setupFCLAuthHandler\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, __jsx(Component, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return WithWallet;\n};","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js"],"names":["React","useState","fcl","WalletContext","createContext","config","put","getAddress","user","nullPrefix","addr","generateCode","rawCode","match","query","replace","item","withWallet","Component","WithWallet","walletUser","setWalletUser","vaultIsSetup","setVaultIsSetup","collectionIsSetup","setCollectionIsSetup","walletBalance","setWalletBalance","walletCollection","setWalletCollection","walletConnected","loggedIn","walletNotConnected","setupFCLAuthHandler","console","log","currentUser","subscribe","vaultStatus","checkUserVaultStatus","startBalancePoll","collectionStatus","checkUserCollectionStatus","getUserCollection","pollId","balance","getUserBalance","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport * as fcl from \"@onflow/fcl\";\n\nexport const WalletContext = React.createContext({});\n\nfcl\n  .config()\n  .put(\"challenge.handshake\", \"http://localhost:8701/flow/authenticate\");\n\nconst getAddress = (user, nullPrefix = true) => {\n  return nullPrefix ? `0x${user.addr}` : user.addr;\n};\n\nconst generateCode = async (rawCode, match) => {\n  if (!match) {\n    return rawCode;\n  }\n  const { query } = match;\n  return rawCode.replace(query, (item) => {\n    return match[item];\n  });\n};\n\nexport const withWallet = (Component) => {\n  const WithWallet = () => {\n    const [walletUser, setWalletUser] = useState(null);\n    const [vaultIsSetup, setVaultIsSetup] = useState(false);\n    const [collectionIsSetup, setCollectionIsSetup] = useState(false);\n    const [walletBalance, setWalletBalance] = useState(null);\n    const [walletCollection, setWalletCollection] = useState(null);\n\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected =\n      walletUser === null || (walletUser && !walletUser.loggedIn);\n\n    const setupFCLAuthHandler = () => {\n      console.log(\"calling setupFCLAuthHandler\");\n      fcl.currentUser().subscribe(async (user) => {\n        if (user.loggedIn) {\n          setWalletUser(user);\n          // Check if the wallet is set up yet\n          const vaultStatus = await checkUserVaultStatus();\n          setVaultIsSetup(vaultStatus);\n          if (vaultStatus) {\n            startBalancePoll();\n          }\n          const collectionStatus = await checkUserCollectionStatus();\n          setCollectionIsSetup(collectionStatus);\n          if (collectionStatus) {\n            getUserCollection();\n          }\n        } else {\n          console.log(\"is not logged in\");\n        }\n      });\n    };\n\n    let pollId = null;\n    const startBalancePoll = async () => {\n      const balance = await getUserBalance();\n      setWalletBalance(balance);\n      pollId = setTimeout(startBalancePoll, 2000);\n    };\n\n    return (\n      <WalletContext.Provider\n        value={{ walletConnected, walletNotConnected, setupFCLAuthHandler }}\n      >\n        <Component />\n      </WalletContext.Provider>\n    );\n  };\n  return WithWallet;\n};\n"]},"metadata":{},"sourceType":"module"}