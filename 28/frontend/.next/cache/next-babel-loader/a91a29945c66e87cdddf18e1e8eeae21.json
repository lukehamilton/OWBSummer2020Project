{"ast":null,"code":"var _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as sdk from \"@onflow/sdk\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ASSOCIATE_WALLET } from \"@data/mutations\";\nimport { toast } from \"react-toastify\";\nimport { CURRENT_USER_QUERY } from \"../../data/queries\";\nimport flowConfig from \"@config/flow\";\nimport checkReference from \"../../flow/scripts/check-ref.cdc\";\nimport checkCollection from \"../../flow/scripts/check-collection.cdc\";\nimport vaultBalance from \"../../flow/scripts/vault-balance.cdc\";\nimport getCollectionItems from \"../../flow/scripts/get-collection-items.cdc\";\nimport giveNFTAward from \"../../flow/transactions/give-nft-award.cdc\";\nimport setupUserWallet from \"../../flow/transactions/setup-user-wallet.cdc\";\nexport const WalletContext = React.createContext({});\nconst {\n  TOKEN_CONTRACT_ADDRESS,\n  AWARD_CONTRACT_ADDRESS\n} = flowConfig;\n\nconst getAddress = (user, nullPrefix = true) => {\n  return nullPrefix ? `0x${user.addr}` : user.addr;\n};\n\nconst generateCode = async (rawCode, match) => {\n  if (!match) {\n    return rawCode;\n  }\n\n  const {\n    query\n  } = match;\n  return rawCode.replace(query, item => {\n    return match[item];\n  });\n};\n\nexport const withWallet = Component => {\n  const WithWallet = () => {\n    const {\n      0: walletUser,\n      1: setWalletUser\n    } = useState(null);\n    const {\n      0: vaultIsSetup,\n      1: setVaultIsSetup\n    } = useState(false);\n    const {\n      0: collectionIsSetup,\n      1: setCollectionIsSetup\n    } = useState(false);\n    const {\n      0: walletBalance,\n      1: setWalletBalance\n    } = useState(null);\n    const {\n      0: walletCollection,\n      1: setWalletCollection\n    } = useState(null);\n    const {\n      0: authHandlerIsSetup,\n      1: setAuthHandlerIsSetup\n    } = useState(false);\n    const {\n      0: getResourcesComplete,\n      1: setGetResourcesComplete\n    } = useState(false);\n    const {\n      0: status,\n      1: setStatus\n    } = useState(null);\n    const {\n      0: transaction,\n      1: setTransaction\n    } = useState(null);\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected = walletUser === null || walletUser && !walletUser.loggedIn;\n\n    const setupFCLAuthHandler = () => {\n      fcl.currentUser().subscribe(async user => {\n        console.log(\"FCVL CALLBACK\", user.loggedIn);\n\n        if (user.loggedIn) {\n          setWalletUser(user);\n          getWalletResources();\n        }\n      });\n    };\n\n    const getWalletResources = async () => {\n      const vaultStatus = await checkUserVaultStatus();\n      setVaultIsSetup(vaultStatus);\n\n      if (vaultStatus) {\n        startBalancePoll();\n      }\n\n      const collectionStatus = await checkUserCollectionStatus();\n      setCollectionIsSetup(collectionStatus);\n\n      if (collectionStatus) {\n        startCollectionPoll();\n      }\n\n      setGetResourcesComplete(true);\n    };\n\n    let balancePollId = null;\n\n    const startBalancePoll = async () => {\n      const balance = await getUserBalance();\n      setWalletBalance(balance);\n      balancePollId = setTimeout(startBalancePoll, 2000);\n    };\n\n    let collectionPollId = null;\n\n    const startCollectionPoll = async () => {\n      const items = await getUserCollection();\n      setWalletCollection(items);\n      collectionPollId = setTimeout(startCollectionPoll, 2000);\n    };\n\n    const getUserBalance = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(vaultBalance, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": `0x${TOKEN_CONTRACT_ADDRESS}`,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const balance = await fcl.decode(response);\n      return balance;\n    };\n\n    const getUserCollection = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(getCollectionItems, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": `0x${AWARD_CONTRACT_ADDRESS}`,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const items = await fcl.decode(response);\n      return items;\n    };\n\n    const checkUserVaultStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(checkReference, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": `0x${TOKEN_CONTRACT_ADDRESS}`,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const checkUserCollectionStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(checkCollection, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": `0x${AWARD_CONTRACT_ADDRESS}`,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const runSampleTx = async () => {\n      const simpleTransaction = `\\\n        transaction {\n          execute {\n            log(\"Hello World!!\")\n          }\n        }\n      `;\n      setStatus(\"Resolving...\");\n      const blockResponse = await fcl.send([fcl.getLatestBlock()]);\n      const block = await fcl.decode(blockResponse);\n\n      try {\n        const tx = await fcl.send([fcl.transaction(simpleTransaction), fcl.proposer(fcl.currentUser().authorization), fcl.payer(fcl.currentUser().authorization), fcl.ref(block.id)]);\n        const {\n          transactionId\n        } = tx;\n        setStatus(\"Transaction sent, waiting for confirmation\");\n        const unsub = fcl.tx({\n          transactionId\n        }).subscribe(transaction => {\n          setTransaction(transaction);\n\n          if (fcl.tx.isSealed(transaction)) {\n            setStatus(\"Transaction is Sealed\");\n            unsub();\n          }\n        });\n      } catch (e) {\n        console.error(e);\n        setStatus(\"Transaction failed\");\n      }\n    };\n\n    const setupWallet = async () => {\n      // Create a vault and a collection\n      const initCode = await generateCode(setupUserWallet, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": `0x${TOKEN_CONTRACT_ADDRESS}`,\n        \"0x02\": `0x${AWARD_CONTRACT_ADDRESS}`\n      });\n      setStatus(\"Resolving...\");\n      const blockResponse = await fcl.send([fcl.getLatestBlock()]);\n      const block = await fcl.decode(blockResponse);\n\n      try {\n        const tx = await fcl.send([sdk.transaction`${initCode}`, fcl.proposer(fcl.currentUser().authorization), fcl.payer(fcl.currentUser().authorization), fcl.ref(block.id), fcl.authorizations([fcl.currentUser().authorization]), fcl.limit(100)]);\n        const {\n          transactionId\n        } = tx;\n        setStatus(\"Transaction sent, waiting for confirmation\");\n        const unsub = fcl.tx({\n          transactionId\n        }).subscribe(transaction => {\n          setTransaction(transaction);\n\n          if (fcl.tx.isSealed(transaction)) {\n            setStatus(\"Transaction is Sealed\");\n            getWalletResources();\n            unsub();\n          }\n        });\n      } catch (e) {\n        console.error(error);\n        setStatus(\"Transaction failed\");\n      }\n    };\n\n    const giveAward = async ({\n      recipientAddress\n    }) => {\n      const initCode = await generateCode(giveNFTAward, {\n        query: /(0x01|0x02|0x03)/g,\n        \"0x01\": `0x${TOKEN_CONTRACT_ADDRESS}`,\n        \"0x02\": `0x${AWARD_CONTRACT_ADDRESS}`,\n        \"0x03\": `0x${recipientAddress}`\n      });\n      setStatus(\"Resolving...\");\n      const blockResponse = await fcl.send([fcl.getLatestBlock()]);\n      const block = await fcl.decode(blockResponse);\n\n      try {\n        const tx = await fcl.send([sdk.transaction`${initCode}`, fcl.proposer(fcl.currentUser().authorization), fcl.payer(fcl.currentUser().authorization), fcl.ref(block.id), fcl.authorizations([fcl.currentUser().authorization]), fcl.limit(100)]);\n        const {\n          transactionId\n        } = tx;\n        setStatus(\"Transaction sent, waiting for confirmation\");\n        const unsub = fcl.tx({\n          transactionId\n        }).subscribe(transaction => {\n          setTransaction(transaction);\n\n          if (fcl.tx.isSealed(transaction)) {\n            setStatus(\"Transaction is Sealed\");\n            unsub();\n          }\n        });\n      } catch (e) {\n        console.error(external);\n        setStatus(\"Transaction failed\");\n      }\n    };\n\n    const [associateWallet, {\n      data,\n      loading,\n      error\n    }] = useMutation(ASSOCIATE_WALLET, {\n      update: (cache, {\n        data\n      }) => {\n        const {\n          me: currentUserData\n        } = cache.readQuery({\n          query: CURRENT_USER_QUERY\n        });\n        cache.writeQuery({\n          query: CURRENT_USER_QUERY,\n          data: {\n            me: _objectSpread(_objectSpread({}, currentUserData), data.associateWallet)\n          }\n        });\n      },\n      onError: () => {\n        toast.error(\"😳 Ekkk! Failed to link wallet.\", {\n          position: \"bottom-left\"\n        });\n      }\n    });\n\n    const connectActiveWalletToLyraLabs = async () => {\n      associateWallet({\n        variables: {\n          address: walletUser.addr\n        }\n      });\n    };\n\n    return __jsx(WalletContext.Provider, {\n      value: {\n        status,\n        setStatus,\n        transaction,\n        setTransaction,\n        walletConnected,\n        walletNotConnected,\n        setupWallet,\n        setupFCLAuthHandler,\n        walletUser,\n        vaultIsSetup,\n        collectionIsSetup,\n        walletBalance,\n        walletCollection,\n        connectActiveWalletToLyraLabs,\n        giveAward,\n        authHandlerIsSetup,\n        setAuthHandlerIsSetup,\n        getResourcesComplete,\n        runSampleTx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 7\n      }\n    }, __jsx(Component, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return WithWallet;\n};","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js"],"names":["React","useState","fcl","sdk","useMutation","ASSOCIATE_WALLET","toast","CURRENT_USER_QUERY","flowConfig","checkReference","checkCollection","vaultBalance","getCollectionItems","giveNFTAward","setupUserWallet","WalletContext","createContext","TOKEN_CONTRACT_ADDRESS","AWARD_CONTRACT_ADDRESS","getAddress","user","nullPrefix","addr","generateCode","rawCode","match","query","replace","item","withWallet","Component","WithWallet","walletUser","setWalletUser","vaultIsSetup","setVaultIsSetup","collectionIsSetup","setCollectionIsSetup","walletBalance","setWalletBalance","walletCollection","setWalletCollection","authHandlerIsSetup","setAuthHandlerIsSetup","getResourcesComplete","setGetResourcesComplete","status","setStatus","transaction","setTransaction","walletConnected","loggedIn","walletNotConnected","setupFCLAuthHandler","currentUser","subscribe","console","log","getWalletResources","vaultStatus","checkUserVaultStatus","startBalancePoll","collectionStatus","checkUserCollectionStatus","startCollectionPoll","balancePollId","balance","getUserBalance","setTimeout","collectionPollId","items","getUserCollection","snapshot","address","scriptCode","script","response","send","decode","checkResult","runSampleTx","simpleTransaction","blockResponse","getLatestBlock","block","tx","proposer","authorization","payer","ref","id","transactionId","unsub","isSealed","e","error","setupWallet","initCode","authorizations","limit","giveAward","recipientAddress","external","associateWallet","data","loading","update","cache","me","currentUserData","readQuery","writeQuery","onError","position","connectActiveWalletToLyraLabs","variables"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport * as fcl from \"@onflow/fcl\";\nimport * as sdk from \"@onflow/sdk\";\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ASSOCIATE_WALLET } from \"@data/mutations\";\nimport { toast } from \"react-toastify\";\nimport { CURRENT_USER_QUERY } from \"../../data/queries\";\nimport flowConfig from \"@config/flow\";\n\nimport checkReference from \"../../flow/scripts/check-ref.cdc\";\nimport checkCollection from \"../../flow/scripts/check-collection.cdc\";\nimport vaultBalance from \"../../flow/scripts/vault-balance.cdc\";\nimport getCollectionItems from \"../../flow/scripts/get-collection-items.cdc\";\nimport giveNFTAward from \"../../flow/transactions/give-nft-award.cdc\";\n\nimport setupUserWallet from \"../../flow/transactions/setup-user-wallet.cdc\";\n\nexport const WalletContext = React.createContext({});\n\nconst { TOKEN_CONTRACT_ADDRESS, AWARD_CONTRACT_ADDRESS } = flowConfig;\n\nconst getAddress = (user, nullPrefix = true) => {\n  return nullPrefix ? `0x${user.addr}` : user.addr;\n};\n\nconst generateCode = async (rawCode, match) => {\n  if (!match) {\n    return rawCode;\n  }\n  const { query } = match;\n  return rawCode.replace(query, (item) => {\n    return match[item];\n  });\n};\n\nexport const withWallet = (Component) => {\n  const WithWallet = () => {\n    const [walletUser, setWalletUser] = useState(null);\n    const [vaultIsSetup, setVaultIsSetup] = useState(false);\n    const [collectionIsSetup, setCollectionIsSetup] = useState(false);\n    const [walletBalance, setWalletBalance] = useState(null);\n    const [walletCollection, setWalletCollection] = useState(null);\n    const [authHandlerIsSetup, setAuthHandlerIsSetup] = useState(false);\n    const [getResourcesComplete, setGetResourcesComplete] = useState(false);\n\n    const [status, setStatus] = useState(null);\n    const [transaction, setTransaction] = useState(null);\n\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected =\n      walletUser === null || (walletUser && !walletUser.loggedIn);\n\n    const setupFCLAuthHandler = () => {\n      fcl.currentUser().subscribe(async (user) => {\n        console.log(\"FCVL CALLBACK\", user.loggedIn);\n        if (user.loggedIn) {\n          setWalletUser(user);\n          getWalletResources();\n        }\n      });\n    };\n\n    const getWalletResources = async () => {\n      const vaultStatus = await checkUserVaultStatus();\n      setVaultIsSetup(vaultStatus);\n      if (vaultStatus) {\n        startBalancePoll();\n      }\n      const collectionStatus = await checkUserCollectionStatus();\n      setCollectionIsSetup(collectionStatus);\n      if (collectionStatus) {\n        startCollectionPoll();\n      }\n      setGetResourcesComplete(true);\n    };\n\n    let balancePollId = null;\n    const startBalancePoll = async () => {\n      const balance = await getUserBalance();\n      setWalletBalance(balance);\n      balancePollId = setTimeout(startBalancePoll, 2000);\n    };\n\n    let collectionPollId = null;\n    const startCollectionPoll = async () => {\n      const items = await getUserCollection();\n      setWalletCollection(items);\n      collectionPollId = setTimeout(startCollectionPoll, 2000);\n    };\n\n    const getUserBalance = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(vaultBalance, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": `0x${TOKEN_CONTRACT_ADDRESS}`,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const balance = await fcl.decode(response);\n      return balance;\n    };\n\n    const getUserCollection = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(getCollectionItems, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": `0x${AWARD_CONTRACT_ADDRESS}`,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const items = await fcl.decode(response);\n      return items;\n    };\n\n    const checkUserVaultStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(checkReference, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": `0x${TOKEN_CONTRACT_ADDRESS}`,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const checkUserCollectionStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(checkCollection, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": `0x${AWARD_CONTRACT_ADDRESS}`,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const runSampleTx = async () => {\n      const simpleTransaction = `\\\n        transaction {\n          execute {\n            log(\"Hello World!!\")\n          }\n        }\n      `;\n      setStatus(\"Resolving...\");\n      const blockResponse = await fcl.send([fcl.getLatestBlock()]);\n      const block = await fcl.decode(blockResponse);\n      try {\n        const tx = await fcl.send([\n          fcl.transaction(simpleTransaction),\n          fcl.proposer(fcl.currentUser().authorization),\n          fcl.payer(fcl.currentUser().authorization),\n          fcl.ref(block.id),\n        ]);\n\n        const { transactionId } = tx;\n\n        setStatus(\"Transaction sent, waiting for confirmation\");\n\n        const unsub = fcl.tx({ transactionId }).subscribe((transaction) => {\n          setTransaction(transaction);\n\n          if (fcl.tx.isSealed(transaction)) {\n            setStatus(\"Transaction is Sealed\");\n            unsub();\n          }\n        });\n      } catch (e) {\n        console.error(e);\n        setStatus(\"Transaction failed\");\n      }\n    };\n\n    const setupWallet = async () => {\n      // Create a vault and a collection\n      const initCode = await generateCode(setupUserWallet, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": `0x${TOKEN_CONTRACT_ADDRESS}`,\n        \"0x02\": `0x${AWARD_CONTRACT_ADDRESS}`,\n      });\n\n      setStatus(\"Resolving...\");\n\n      const blockResponse = await fcl.send([fcl.getLatestBlock()]);\n      const block = await fcl.decode(blockResponse);\n\n      try {\n        const tx = await fcl.send([\n          sdk.transaction`${initCode}`,\n          fcl.proposer(fcl.currentUser().authorization),\n          fcl.payer(fcl.currentUser().authorization),\n          fcl.ref(block.id),\n          fcl.authorizations([fcl.currentUser().authorization]),\n          fcl.limit(100),\n        ]);\n\n        const { transactionId } = tx;\n\n        setStatus(\"Transaction sent, waiting for confirmation\");\n\n        const unsub = fcl.tx({ transactionId }).subscribe((transaction) => {\n          setTransaction(transaction);\n\n          if (fcl.tx.isSealed(transaction)) {\n            setStatus(\"Transaction is Sealed\");\n            getWalletResources();\n            unsub();\n          }\n        });\n      } catch (e) {\n        console.error(error);\n        setStatus(\"Transaction failed\");\n      }\n    };\n\n    const giveAward = async ({ recipientAddress }) => {\n      const initCode = await generateCode(giveNFTAward, {\n        query: /(0x01|0x02|0x03)/g,\n        \"0x01\": `0x${TOKEN_CONTRACT_ADDRESS}`,\n        \"0x02\": `0x${AWARD_CONTRACT_ADDRESS}`,\n        \"0x03\": `0x${recipientAddress}`,\n      });\n\n      setStatus(\"Resolving...\");\n\n      const blockResponse = await fcl.send([fcl.getLatestBlock()]);\n      const block = await fcl.decode(blockResponse);\n\n      try {\n        const tx = await fcl.send([\n          sdk.transaction`${initCode}`,\n          fcl.proposer(fcl.currentUser().authorization),\n          fcl.payer(fcl.currentUser().authorization),\n          fcl.ref(block.id),\n          fcl.authorizations([fcl.currentUser().authorization]),\n          fcl.limit(100),\n        ]);\n        const { transactionId } = tx;\n\n        setStatus(\"Transaction sent, waiting for confirmation\");\n\n        const unsub = fcl.tx({ transactionId }).subscribe((transaction) => {\n          setTransaction(transaction);\n\n          if (fcl.tx.isSealed(transaction)) {\n            setStatus(\"Transaction is Sealed\");\n            unsub();\n          }\n        });\n      } catch (e) {\n        console.error(external);\n        setStatus(\"Transaction failed\");\n      }\n    };\n\n    const [associateWallet, { data, loading, error }] = useMutation(\n      ASSOCIATE_WALLET,\n      {\n        update: (cache, { data }) => {\n          const { me: currentUserData } = cache.readQuery({\n            query: CURRENT_USER_QUERY,\n          });\n          cache.writeQuery({\n            query: CURRENT_USER_QUERY,\n            data: { me: { ...currentUserData, ...data.associateWallet } },\n          });\n        },\n        onError: () => {\n          toast.error(\"😳 Ekkk! Failed to link wallet.\", {\n            position: \"bottom-left\",\n          });\n        },\n      }\n    );\n\n    const connectActiveWalletToLyraLabs = async () => {\n      associateWallet({\n        variables: {\n          address: walletUser.addr,\n        },\n      });\n    };\n\n    return (\n      <WalletContext.Provider\n        value={{\n          status,\n          setStatus,\n          transaction,\n          setTransaction,\n          walletConnected,\n          walletNotConnected,\n          setupWallet,\n          setupFCLAuthHandler,\n          walletUser,\n          vaultIsSetup,\n          collectionIsSetup,\n          walletBalance,\n          walletCollection,\n          connectActiveWalletToLyraLabs,\n          giveAward,\n          authHandlerIsSetup,\n          setAuthHandlerIsSetup,\n          getResourcesComplete,\n          runSampleTx,\n        }}\n      >\n        <Component />\n      </WalletContext.Provider>\n    );\n  };\n  return WithWallet;\n};\n"]},"metadata":{},"sourceType":"module"}