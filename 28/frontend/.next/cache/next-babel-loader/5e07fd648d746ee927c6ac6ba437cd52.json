{"ast":null,"code":"var _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as sdk from \"@onflow/sdk\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ASSOCIATE_WALLET } from \"@data/mutations\";\nimport { toast } from \"react-toastify\";\nimport { CURRENT_USER_QUERY } from \"../../data/queries\";\nimport checkReference from \"../../flow/scripts/check-ref.cdc\";\nimport checkCollection from \"../../flow/scripts/check-collection.cdc\";\nimport checkActiveWalletScript from \"../../flow/scripts/check-active-wallet.cdc\";\nimport vaultBalance from \"../../flow/scripts/vault-balance.cdc\";\nimport getCollectionItems from \"../../flow/scripts/get-collection-items.cdc\";\nimport giveNFTAward from \"../../flow/transactions/give-nft-award.cdc\";\nimport setupUserWallet from \"../../flow/transactions/setup-user-wallet.cdc\";\nexport const WalletContext = React.createContext({}); // fcl\n//   .config()\n//   .put(\"challenge.handshake\", \"http://localhost:8701/flow/authenticate\");\n// access-001.devnet12.nodes.onflow.org:9000\n\nconst LOCAL_TOKEN_CONTRACT_ADDRESS = \"0x0x01cf0e2f2f715450\";\nconst TESTNET_TOKEN_CONTRACT_ADDRESS = \"0x4f7d7bb81563b36a\";\nconst LOCAL_AWARD_CONTRACT_ADDRESS = \"0xfd43f9148d4b725d\";\nconst TESTNET_AWARD_CONTRACT_ADDRESS = \"0xab1ac2650499b3b5\";\nfcl.config().put(\"accessNode.api\", \"https://access-testnet.onflow.org\") // connect to Flow testnet\n.put(\"challenge.handshake\", \"https://flow-wallet-testnet.blocto.app/authn\"); // use Blocto testnet wallet\n\nconst getAddress = (user, nullPrefix = true) => {\n  return nullPrefix ? `0x${user.addr}` : user.addr;\n};\n\nconst generateCode = async (rawCode, match) => {\n  if (!match) {\n    return rawCode;\n  }\n\n  const {\n    query\n  } = match;\n  return rawCode.replace(query, item => {\n    return match[item];\n  });\n};\n\nexport const withWallet = Component => {\n  const WithWallet = () => {\n    const {\n      0: walletUser,\n      1: setWalletUser\n    } = useState(null);\n    const {\n      0: vaultIsSetup,\n      1: setVaultIsSetup\n    } = useState(false);\n    const {\n      0: collectionIsSetup,\n      1: setCollectionIsSetup\n    } = useState(false);\n    const {\n      0: walletBalance,\n      1: setWalletBalance\n    } = useState(null);\n    const {\n      0: walletCollection,\n      1: setWalletCollection\n    } = useState(null);\n    const {\n      0: authHandlerIsSetup,\n      1: setAuthHandlerIsSetup\n    } = useState(false);\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected = walletUser === null || walletUser && !walletUser.loggedIn;\n\n    const setupFCLAuthHandler = () => {\n      console.log(\"calling setupFCLAuthHandler\");\n      fcl.currentUser().subscribe(async user => {\n        if (user.loggedIn) {\n          setWalletUser(user); // Check if the wallet is set up yet\n\n          getWalletResources(); // const vaultStatus = await checkUserVaultStatus();\n          // setVaultIsSetup(vaultStatus);\n          // if (vaultStatus) {\n          //   startBalancePoll();\n          // }\n          // const collectionStatus = await checkUserCollectionStatus();\n          // setCollectionIsSetup(collectionStatus);\n          // if (collectionStatus) {\n          //   getUserCollection();\n          // }\n        } else {\n          console.log(\"is not logged in\");\n        }\n      });\n    };\n\n    const getWalletResources = async () => {\n      const vaultStatus = await checkUserVaultStatus();\n      setVaultIsSetup(vaultStatus);\n\n      if (vaultStatus) {\n        startBalancePoll();\n      }\n\n      const collectionStatus = await checkUserCollectionStatus();\n      setCollectionIsSetup(collectionStatus);\n\n      if (collectionStatus) {\n        startCollectionPoll();\n      }\n    };\n\n    let balancePollId = null;\n\n    const startBalancePoll = async () => {\n      const balance = await getUserBalance();\n      setWalletBalance(balance);\n      balancePollId = setTimeout(startBalancePoll, 2000);\n    };\n\n    let collectionPollId = null;\n\n    const startCollectionPoll = async () => {\n      const items = await getUserCollection();\n      setWalletCollection(items);\n      collectionPollId = setTimeout(startCollectionPoll, 2000);\n    };\n\n    const getUserBalance = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot); // const contractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n\n      const contractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(vaultBalance, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const balance = await fcl.decode(response);\n      return balance;\n    };\n\n    const getUserCollection = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot); // This is the local address - Regular NonFungibleToken contract\n      // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      // This is the local address - NonFungibleTokenAward contract\n      // const contractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n      // This is the testnet address - NonFungibleTokenAward contract\n\n      const contractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(getCollectionItems, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const items = await fcl.decode(response);\n      return items;\n    };\n\n    const checkUserVaultStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot); // const contractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n\n      const contractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(checkReference, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const checkUserCollectionStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot); // const contractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n\n      const contractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(checkCollection, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const checkActiveWallet = async () => {\n      // Checks if the active wallet is setup\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(checkActiveWalletScript, {\n        query: /(0x01|0x02|0x03)/g,\n        // \"0x01\": LOCAL_TOKEN_CONTRACT_ADDRESS,\n        \"0x01\": TESTNET_TOKEN_CONTRACT_ADDRESS,\n        // \"0x02\": LOCAL_AWARD_CONTRACT_ADDRESS,\n        \"0x02\": TESTNET_AWARD_CONTRACT_ADDRESS,\n        \"0x03\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const activeWalletStatus = await fcl.decode(response);\n      return activeWalletStatus;\n    };\n\n    const setupWallet = async () => {\n      // Create a vault and a collection\n      const user = fcl.currentUser();\n      const {\n        authorization\n      } = user;\n      const snapshot = await user.snapshot(); // const fungibleTokenContractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n\n      const fungibleTokenContractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS; // const nonFungibleTokenContractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n\n      const nonFungibleTokenContractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const initCode = await generateCode(setupUserWallet, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": fungibleTokenContractAddress,\n        \"0x02\": nonFungibleTokenContractAddress\n      });\n\n      try {\n        const initResponse = await fcl.send([sdk.transaction`${initCode}`, fcl.proposer(authorization), fcl.payer(authorization), fcl.authorizations([authorization]), fcl.limit(100)] // {\n        //   node: \"http://localhost:8080\",\n        // }\n        );\n        getWalletResources();\n      } catch (e) {\n        console.log(\"setupNFTCollection caught error\", e);\n      }\n    };\n\n    const giveAward = async ({\n      recipientAddress\n    }) => {\n      console.log(\"giving award to recipientAddress\", recipientAddress); // Create the user vault\n\n      const user = fcl.currentUser();\n      const {\n        authorization\n      } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot); // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      // const fungibleTokenContractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n\n      const fungibleTokenContractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS; // const awardContractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n\n      const awardContractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const initCode = await generateCode(giveNFTAward, {\n        query: /(0x01|0x02|0x03)/g,\n        \"0x01\": awardContractAddress,\n        \"0x02\": fungibleTokenContractAddress,\n        \"0x03\": `0x${recipientAddress}`\n      });\n\n      try {\n        const initResponse = await fcl.send([sdk.transaction`${initCode}`, fcl.proposer(authorization), fcl.payer(authorization), fcl.authorizations([authorization]), fcl.limit(100)] // {\n        //   node: \"http://localhost:8080\",\n        // }\n        );\n        console.log(\"give award initResponse\", initResponse);\n      } catch (e) {\n        console.log(\"give award caught error\", e);\n      }\n    };\n\n    const [associateWallet, {\n      data,\n      loading,\n      error\n    }] = useMutation(ASSOCIATE_WALLET, {\n      update: (cache, {\n        data\n      }) => {\n        const {\n          me: currentUserData\n        } = cache.readQuery({\n          query: CURRENT_USER_QUERY\n        });\n        cache.writeQuery({\n          query: CURRENT_USER_QUERY,\n          data: {\n            me: _objectSpread(_objectSpread({}, currentUserData), data.associateWallet)\n          }\n        });\n      },\n      onError: () => {\n        toast.error(\"😳 Ekkk! Failed to link wallet.\", {\n          position: \"bottom-left\"\n        });\n      }\n    });\n\n    const connectActiveWalletToLyraLabs = async () => {\n      associateWallet({\n        variables: {\n          address: walletUser.addr\n        }\n      });\n    };\n\n    return __jsx(WalletContext.Provider, {\n      value: {\n        walletConnected,\n        walletNotConnected,\n        setupWallet,\n        setupFCLAuthHandler,\n        walletUser,\n        vaultIsSetup,\n        collectionIsSetup,\n        walletBalance,\n        walletCollection,\n        connectActiveWalletToLyraLabs,\n        giveAward,\n        authHandlerIsSetup,\n        setAuthHandlerIsSetup\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 7\n      }\n    }, __jsx(Component, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return WithWallet;\n};","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js"],"names":["React","useState","fcl","sdk","useMutation","ASSOCIATE_WALLET","toast","CURRENT_USER_QUERY","checkReference","checkCollection","checkActiveWalletScript","vaultBalance","getCollectionItems","giveNFTAward","setupUserWallet","WalletContext","createContext","LOCAL_TOKEN_CONTRACT_ADDRESS","TESTNET_TOKEN_CONTRACT_ADDRESS","LOCAL_AWARD_CONTRACT_ADDRESS","TESTNET_AWARD_CONTRACT_ADDRESS","config","put","getAddress","user","nullPrefix","addr","generateCode","rawCode","match","query","replace","item","withWallet","Component","WithWallet","walletUser","setWalletUser","vaultIsSetup","setVaultIsSetup","collectionIsSetup","setCollectionIsSetup","walletBalance","setWalletBalance","walletCollection","setWalletCollection","authHandlerIsSetup","setAuthHandlerIsSetup","walletConnected","loggedIn","walletNotConnected","setupFCLAuthHandler","console","log","currentUser","subscribe","getWalletResources","vaultStatus","checkUserVaultStatus","startBalancePoll","collectionStatus","checkUserCollectionStatus","startCollectionPoll","balancePollId","balance","getUserBalance","setTimeout","collectionPollId","items","getUserCollection","snapshot","address","contractAddress","scriptCode","script","response","send","decode","checkResult","checkActiveWallet","activeWalletStatus","setupWallet","authorization","fungibleTokenContractAddress","nonFungibleTokenContractAddress","initCode","initResponse","transaction","proposer","payer","authorizations","limit","e","giveAward","recipientAddress","awardContractAddress","associateWallet","data","loading","error","update","cache","me","currentUserData","readQuery","writeQuery","onError","position","connectActiveWalletToLyraLabs","variables"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport * as fcl from \"@onflow/fcl\";\nimport * as sdk from \"@onflow/sdk\";\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ASSOCIATE_WALLET } from \"@data/mutations\";\nimport { toast } from \"react-toastify\";\nimport { CURRENT_USER_QUERY } from \"../../data/queries\";\n\nimport checkReference from \"../../flow/scripts/check-ref.cdc\";\nimport checkCollection from \"../../flow/scripts/check-collection.cdc\";\nimport checkActiveWalletScript from \"../../flow/scripts/check-active-wallet.cdc\";\nimport vaultBalance from \"../../flow/scripts/vault-balance.cdc\";\nimport getCollectionItems from \"../../flow/scripts/get-collection-items.cdc\";\nimport giveNFTAward from \"../../flow/transactions/give-nft-award.cdc\";\n\nimport setupUserWallet from \"../../flow/transactions/setup-user-wallet.cdc\";\n\nexport const WalletContext = React.createContext({});\n\n// fcl\n//   .config()\n//   .put(\"challenge.handshake\", \"http://localhost:8701/flow/authenticate\");\n\n// access-001.devnet12.nodes.onflow.org:9000\n\nconst LOCAL_TOKEN_CONTRACT_ADDRESS = \"0x0x01cf0e2f2f715450\";\nconst TESTNET_TOKEN_CONTRACT_ADDRESS = \"0x4f7d7bb81563b36a\";\n\nconst LOCAL_AWARD_CONTRACT_ADDRESS = \"0xfd43f9148d4b725d\";\nconst TESTNET_AWARD_CONTRACT_ADDRESS = \"0xab1ac2650499b3b5\";\n\nfcl\n  .config()\n  .put(\"accessNode.api\", \"https://access-testnet.onflow.org\") // connect to Flow testnet\n  .put(\"challenge.handshake\", \"https://flow-wallet-testnet.blocto.app/authn\"); // use Blocto testnet wallet\n\nconst getAddress = (user, nullPrefix = true) => {\n  return nullPrefix ? `0x${user.addr}` : user.addr;\n};\n\nconst generateCode = async (rawCode, match) => {\n  if (!match) {\n    return rawCode;\n  }\n  const { query } = match;\n  return rawCode.replace(query, (item) => {\n    return match[item];\n  });\n};\n\nexport const withWallet = (Component) => {\n  const WithWallet = () => {\n    const [walletUser, setWalletUser] = useState(null);\n    const [vaultIsSetup, setVaultIsSetup] = useState(false);\n    const [collectionIsSetup, setCollectionIsSetup] = useState(false);\n    const [walletBalance, setWalletBalance] = useState(null);\n    const [walletCollection, setWalletCollection] = useState(null);\n    const [authHandlerIsSetup, setAuthHandlerIsSetup] = useState(false);\n\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected =\n      walletUser === null || (walletUser && !walletUser.loggedIn);\n\n    const setupFCLAuthHandler = () => {\n      console.log(\"calling setupFCLAuthHandler\");\n      fcl.currentUser().subscribe(async (user) => {\n        if (user.loggedIn) {\n          setWalletUser(user);\n          // Check if the wallet is set up yet\n          getWalletResources();\n          // const vaultStatus = await checkUserVaultStatus();\n          // setVaultIsSetup(vaultStatus);\n          // if (vaultStatus) {\n          //   startBalancePoll();\n          // }\n          // const collectionStatus = await checkUserCollectionStatus();\n          // setCollectionIsSetup(collectionStatus);\n          // if (collectionStatus) {\n          //   getUserCollection();\n          // }\n        } else {\n          console.log(\"is not logged in\");\n        }\n      });\n    };\n\n    const getWalletResources = async () => {\n      const vaultStatus = await checkUserVaultStatus();\n      setVaultIsSetup(vaultStatus);\n      if (vaultStatus) {\n        startBalancePoll();\n      }\n      const collectionStatus = await checkUserCollectionStatus();\n      setCollectionIsSetup(collectionStatus);\n      if (collectionStatus) {\n        startCollectionPoll();\n      }\n    };\n\n    let balancePollId = null;\n    const startBalancePoll = async () => {\n      const balance = await getUserBalance();\n      setWalletBalance(balance);\n      balancePollId = setTimeout(startBalancePoll, 2000);\n    };\n\n    let collectionPollId = null;\n    const startCollectionPoll = async () => {\n      const items = await getUserCollection();\n      setWalletCollection(items);\n      collectionPollId = setTimeout(startCollectionPoll, 2000);\n    };\n\n    const getUserBalance = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // const contractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n      const contractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(vaultBalance, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const balance = await fcl.decode(response);\n      return balance;\n    };\n\n    const getUserCollection = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // This is the local address - Regular NonFungibleToken contract\n      // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      // This is the local address - NonFungibleTokenAward contract\n      // const contractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n      // This is the testnet address - NonFungibleTokenAward contract\n      const contractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(getCollectionItems, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const items = await fcl.decode(response);\n      return items;\n    };\n\n    const checkUserVaultStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // const contractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n      const contractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(checkReference, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const checkUserCollectionStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // const contractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n      const contractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n\n      const scriptCode = await generateCode(checkCollection, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const checkActiveWallet = async () => {\n      // Checks if the active wallet is setup\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(checkActiveWalletScript, {\n        query: /(0x01|0x02|0x03)/g,\n        // \"0x01\": LOCAL_TOKEN_CONTRACT_ADDRESS,\n        \"0x01\": TESTNET_TOKEN_CONTRACT_ADDRESS,\n        // \"0x02\": LOCAL_AWARD_CONTRACT_ADDRESS,\n        \"0x02\": TESTNET_AWARD_CONTRACT_ADDRESS,\n        \"0x03\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const activeWalletStatus = await fcl.decode(response);\n      return activeWalletStatus;\n    };\n\n    const setupWallet = async () => {\n      // Create a vault and a collection\n      const user = fcl.currentUser();\n      const { authorization } = user;\n      const snapshot = await user.snapshot();\n      // const fungibleTokenContractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n      const fungibleTokenContractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      // const nonFungibleTokenContractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n      const nonFungibleTokenContractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const initCode = await generateCode(setupUserWallet, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": fungibleTokenContractAddress,\n        \"0x02\": nonFungibleTokenContractAddress,\n      });\n      try {\n        const initResponse = await fcl.send(\n          [\n            sdk.transaction`${initCode}`,\n            fcl.proposer(authorization),\n            fcl.payer(authorization),\n            fcl.authorizations([authorization]),\n            fcl.limit(100),\n          ]\n          // {\n          //   node: \"http://localhost:8080\",\n          // }\n        );\n        getWalletResources();\n      } catch (e) {\n        console.log(\"setupNFTCollection caught error\", e);\n      }\n    };\n\n    const giveAward = async ({ recipientAddress }) => {\n      console.log(\"giving award to recipientAddress\", recipientAddress);\n      // Create the user vault\n      const user = fcl.currentUser();\n      const { authorization } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      // const fungibleTokenContractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n      const fungibleTokenContractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      // const awardContractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n      const awardContractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const initCode = await generateCode(giveNFTAward, {\n        query: /(0x01|0x02|0x03)/g,\n        \"0x01\": awardContractAddress,\n        \"0x02\": fungibleTokenContractAddress,\n        \"0x03\": `0x${recipientAddress}`,\n      });\n      try {\n        const initResponse = await fcl.send(\n          [\n            sdk.transaction`${initCode}`,\n            fcl.proposer(authorization),\n            fcl.payer(authorization),\n            fcl.authorizations([authorization]),\n            fcl.limit(100),\n          ]\n          // {\n          //   node: \"http://localhost:8080\",\n          // }\n        );\n        console.log(\"give award initResponse\", initResponse);\n      } catch (e) {\n        console.log(\"give award caught error\", e);\n      }\n    };\n\n    const [associateWallet, { data, loading, error }] = useMutation(\n      ASSOCIATE_WALLET,\n      {\n        update: (cache, { data }) => {\n          const { me: currentUserData } = cache.readQuery({\n            query: CURRENT_USER_QUERY,\n          });\n          cache.writeQuery({\n            query: CURRENT_USER_QUERY,\n            data: { me: { ...currentUserData, ...data.associateWallet } },\n          });\n        },\n        onError: () => {\n          toast.error(\"😳 Ekkk! Failed to link wallet.\", {\n            position: \"bottom-left\",\n          });\n        },\n      }\n    );\n\n    const connectActiveWalletToLyraLabs = async () => {\n      associateWallet({\n        variables: {\n          address: walletUser.addr,\n        },\n      });\n    };\n\n    return (\n      <WalletContext.Provider\n        value={{\n          walletConnected,\n          walletNotConnected,\n          setupWallet,\n          setupFCLAuthHandler,\n          walletUser,\n          vaultIsSetup,\n          collectionIsSetup,\n          walletBalance,\n          walletCollection,\n          connectActiveWalletToLyraLabs,\n          giveAward,\n          authHandlerIsSetup,\n          setAuthHandlerIsSetup,\n        }}\n      >\n        <Component />\n      </WalletContext.Provider>\n    );\n  };\n  return WithWallet;\n};\n"]},"metadata":{},"sourceType":"module"}