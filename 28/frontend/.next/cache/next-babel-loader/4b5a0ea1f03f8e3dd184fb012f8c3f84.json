{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as sdk from \"@onflow/sdk\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ASSOCIATE_WALLET } from \"@data/mutations\";\nimport { toast } from \"react-toastify\";\nimport { CURRENT_USER_QUERY } from \"../../data/queries\";\nimport checkReference from \"../../flow/scripts/check-ref.cdc\";\nimport checkCollection from \"../../flow/scripts/check-collection.cdc\";\nimport checkActiveWalletScript from \"../../flow/scripts/check-active-wallet.cdc\";\nimport vaultBalance from \"../../flow/scripts/vault-balance.cdc\";\nimport getCollectionItems from \"../../flow/scripts/get-collection-items.cdc\";\nimport giveNFTAward from \"../../flow/transactions/give-nft-award.cdc\";\nimport setupUserWallet from \"../../flow/transactions/setup-user-wallet.cdc\";\nexport var WalletContext = React.createContext({});\nvar NODE_ENV = \"development\";\nvar FLOW_CONFIG = process.env.FLOW_CONFIG;\nvar _FLOW_CONFIG$NODE_ENV = FLOW_CONFIG[NODE_ENV],\n    TOKEN_CONTRACT_ADDRESS = _FLOW_CONFIG$NODE_ENV.TOKEN_CONTRACT_ADDRESS,\n    AWARD_CONTRACT_ADDRESS = _FLOW_CONFIG$NODE_ENV.AWARD_CONTRACT_ADDRESS,\n    ACCESS_NODE_API = _FLOW_CONFIG$NODE_ENV.ACCESS_NODE_API,\n    CHALLENGE_HANDSHAKE = _FLOW_CONFIG$NODE_ENV.CHALLENGE_HANDSHAKE;\nconsole.log(\"---- TOKEN_CONTRACT_ADDRESS ----\", TOKEN_CONTRACT_ADDRESS);\nconsole.log(\"---- AWARD_CONTRACT_ADDRESS----\", AWARD_CONTRACT_ADDRESS);\nconsole.log(\"---- ACCESS_NODE_API----\", ACCESS_NODE_API);\nconsole.log(\"---- CHALLENGE_HANDSHAKE----\", CHALLENGE_HANDSHAKE); // const TOKEN_CONTRACT_ADDRESS = pro\n\nvar LOCAL_TOKEN_CONTRACT_ADDRESS = \"0x01cf0e2f2f715450\"; // const TESTNET_TOKEN_CONTRACT_ADDRESS = \"0x4f7d7bb81563b36a\";\n\nvar TESTNET_TOKEN_CONTRACT_ADDRESS = \"0xb3f18c83b7599567\";\nvar LOCAL_AWARD_CONTRACT_ADDRESS = \"0xfd43f9148d4b725d\"; // const TESTNET_AWARD_CONTRACT_ADDRESS = \"0xab1ac2650499b3b5\";\n\nvar TESTNET_AWARD_CONTRACT_ADDRESS = \"0x5796355ea6a395b8\";\n\nvar getAddress = function getAddress(user) {\n  var nullPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return nullPrefix ? \"0x\".concat(user.addr) : user.addr;\n};\n\nvar generateCode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(rawCode, match) {\n    var query;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (match) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", rawCode);\n\n          case 2:\n            query = match.query;\n            return _context.abrupt(\"return\", rawCode.replace(query, function (item) {\n              return match[item];\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function generateCode(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var withWallet = function withWallet(Component) {\n  var _s = $RefreshSig$();\n\n  var WithWallet = function WithWallet() {\n    _s();\n\n    var _useState = useState(null),\n        walletUser = _useState[0],\n        setWalletUser = _useState[1];\n\n    var _useState2 = useState(false),\n        vaultIsSetup = _useState2[0],\n        setVaultIsSetup = _useState2[1];\n\n    var _useState3 = useState(false),\n        collectionIsSetup = _useState3[0],\n        setCollectionIsSetup = _useState3[1];\n\n    var _useState4 = useState(null),\n        walletBalance = _useState4[0],\n        setWalletBalance = _useState4[1];\n\n    var _useState5 = useState(null),\n        walletCollection = _useState5[0],\n        setWalletCollection = _useState5[1];\n\n    var _useState6 = useState(false),\n        authHandlerIsSetup = _useState6[0],\n        setAuthHandlerIsSetup = _useState6[1];\n\n    var _useState7 = useState(\"Not started\"),\n        status = _useState7[0],\n        setStatus = _useState7[1];\n\n    var _useState8 = useState(null),\n        transaction = _useState8[0],\n        setTransaction = _useState8[1];\n\n    var walletConnected = walletUser && walletUser.loggedIn;\n    var walletNotConnected = walletUser === null || walletUser && !walletUser.loggedIn;\n\n    var setupFCLAuthHandler = function setupFCLAuthHandler() {\n      // console.log(\n      //   \"calling setupFCLAuthHandler process.env.TESTNET_TOKEN_CONTRACT_ADDRESS\",\n      //   process.env.TESTNET_TOKEN_CONTRACT_ADDRESS\n      // );\n      // console.log(\n      //   \"calling setupFCLAuthHandler process.env.TESTNET_AWARD_CONTRACT_ADDRESS\",\n      //   process.env.TESTNET_AWARD_CONTRACT_ADDRESS\n      // );\n      fcl.currentUser().subscribe( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(user) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (user.loggedIn) {\n                    setWalletUser(user);\n                    getWalletResources();\n                  }\n\n                case 1:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    };\n\n    var getWalletResources = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var vaultStatus, collectionStatus;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return checkUserVaultStatus();\n\n              case 2:\n                vaultStatus = _context3.sent;\n                setVaultIsSetup(vaultStatus);\n\n                if (vaultStatus) {\n                  startBalancePoll();\n                }\n\n                _context3.next = 7;\n                return checkUserCollectionStatus();\n\n              case 7:\n                collectionStatus = _context3.sent;\n                setCollectionIsSetup(collectionStatus);\n\n                if (collectionStatus) {\n                  startCollectionPoll();\n                }\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function getWalletResources() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    var balancePollId = null;\n\n    var startBalancePoll = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var balance;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return getUserBalance();\n\n              case 2:\n                balance = _context4.sent;\n                setWalletBalance(balance);\n                balancePollId = setTimeout(startBalancePoll, 2000);\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function startBalancePoll() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    var collectionPollId = null;\n\n    var startCollectionPoll = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var items;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return getUserCollection();\n\n              case 2:\n                items = _context5.sent;\n                setWalletCollection(items);\n                collectionPollId = setTimeout(startCollectionPoll, 2000);\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function startCollectionPoll() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    var getUserBalance = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var user, snapshot, address, contractAddress, scriptCode, script, response, balance;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                // console.log(\"calling getUSerBalance\");\n                user = fcl.currentUser();\n                _context6.next = 3;\n                return user.snapshot();\n\n              case 3:\n                snapshot = _context6.sent;\n                address = getAddress(snapshot); // const contractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n\n                contractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n                _context6.next = 8;\n                return generateCode(vaultBalance, {\n                  query: /(0x01|0x02)/g,\n                  \"0x01\": contractAddress,\n                  \"0x02\": address\n                });\n\n              case 8:\n                scriptCode = _context6.sent;\n                script = sdk.script(_templateObject(), scriptCode);\n                _context6.next = 12;\n                return fcl.send([script]);\n\n              case 12:\n                response = _context6.sent;\n                _context6.next = 15;\n                return fcl.decode(response);\n\n              case 15:\n                balance = _context6.sent;\n                return _context6.abrupt(\"return\", balance);\n\n              case 17:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function getUserBalance() {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    var getUserCollection = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var user, snapshot, address, contractAddress, scriptCode, script, response, items;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                user = fcl.currentUser();\n                _context7.next = 3;\n                return user.snapshot();\n\n              case 3:\n                snapshot = _context7.sent;\n                address = getAddress(snapshot); // This is the local address - Regular NonFungibleToken contract\n                // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n                // This is the local address - NonFungibleTokenAward contract\n                // const contractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n                // This is the testnet address - NonFungibleTokenAward contract\n\n                contractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n                _context7.next = 8;\n                return generateCode(getCollectionItems, {\n                  query: /(0x01|0x02)/g,\n                  \"0x01\": contractAddress,\n                  \"0x02\": address\n                });\n\n              case 8:\n                scriptCode = _context7.sent;\n                script = sdk.script(_templateObject2(), scriptCode);\n                _context7.next = 12;\n                return fcl.send([script]);\n\n              case 12:\n                response = _context7.sent;\n                _context7.next = 15;\n                return fcl.decode(response);\n\n              case 15:\n                items = _context7.sent;\n                return _context7.abrupt(\"return\", items);\n\n              case 17:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      return function getUserCollection() {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n\n    var checkUserVaultStatus = /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var user, snapshot, address, contractAddress, scriptCode, script, response, checkResult;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                user = fcl.currentUser();\n                _context8.next = 3;\n                return user.snapshot();\n\n              case 3:\n                snapshot = _context8.sent;\n                address = getAddress(snapshot); // const contractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n\n                contractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n                _context8.next = 8;\n                return generateCode(checkReference, {\n                  query: /(0x01|0x02)/g,\n                  \"0x01\": contractAddress,\n                  \"0x02\": address\n                });\n\n              case 8:\n                scriptCode = _context8.sent;\n                script = sdk.script(_templateObject3(), scriptCode);\n                _context8.next = 12;\n                return fcl.send([script]);\n\n              case 12:\n                response = _context8.sent;\n                _context8.next = 15;\n                return fcl.decode(response);\n\n              case 15:\n                checkResult = _context8.sent;\n                console.log(\"---- checkResult is ---- \", checkResult);\n                return _context8.abrupt(\"return\", checkResult);\n\n              case 18:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      return function checkUserVaultStatus() {\n        return _ref8.apply(this, arguments);\n      };\n    }();\n\n    var checkUserCollectionStatus = /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var user, snapshot, address, contractAddress, scriptCode, script, response, checkResult;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                user = fcl.currentUser();\n                _context9.next = 3;\n                return user.snapshot();\n\n              case 3:\n                snapshot = _context9.sent;\n                address = getAddress(snapshot); // const contractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n\n                contractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n                _context9.next = 8;\n                return generateCode(checkCollection, {\n                  query: /(0x01|0x02)/g,\n                  \"0x01\": contractAddress,\n                  \"0x02\": address\n                });\n\n              case 8:\n                scriptCode = _context9.sent;\n                script = sdk.script(_templateObject4(), scriptCode);\n                _context9.next = 12;\n                return fcl.send([script]);\n\n              case 12:\n                response = _context9.sent;\n                _context9.next = 15;\n                return fcl.decode(response);\n\n              case 15:\n                checkResult = _context9.sent;\n                return _context9.abrupt(\"return\", checkResult);\n\n              case 17:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      return function checkUserCollectionStatus() {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n\n    var checkActiveWallet = /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var user, snapshot, address, scriptCode, script, response, activeWalletStatus;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                // Checks if the active wallet is setup\n                user = fcl.currentUser();\n                _context10.next = 3;\n                return user.snapshot();\n\n              case 3:\n                snapshot = _context10.sent;\n                address = getAddress(snapshot);\n                _context10.next = 7;\n                return generateCode(checkActiveWalletScript, {\n                  query: /(0x01|0x02|0x03)/g,\n                  // \"0x01\": LOCAL_TOKEN_CONTRACT_ADDRESS,\n                  \"0x01\": TESTNET_TOKEN_CONTRACT_ADDRESS,\n                  // \"0x02\": LOCAL_AWARD_CONTRACT_ADDRESS,\n                  \"0x02\": TESTNET_AWARD_CONTRACT_ADDRESS,\n                  \"0x03\": address\n                });\n\n              case 7:\n                scriptCode = _context10.sent;\n                script = sdk.script(_templateObject5(), scriptCode);\n                _context10.next = 11;\n                return fcl.send([script]);\n\n              case 11:\n                response = _context10.sent;\n                _context10.next = 14;\n                return fcl.decode(response);\n\n              case 14:\n                activeWalletStatus = _context10.sent;\n                return _context10.abrupt(\"return\", activeWalletStatus);\n\n              case 16:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      return function checkActiveWallet() {\n        return _ref10.apply(this, arguments);\n      };\n    }();\n\n    var setupWallet = /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var simpleTransaction, user, authorization, snapshot, fungibleTokenContractAddress, nonFungibleTokenContractAddress, initCode, blockResponse, block, tx, transactionId, unsub;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                simpleTransaction = \"        transaction {\\n          execute {\\n            log(\\\"Hello World!!\\\")\\n          }\\n        }\\n      \"; // Create a vault and a collection\n\n                user = fcl.currentUser();\n                authorization = user.authorization;\n                _context11.next = 5;\n                return user.snapshot();\n\n              case 5:\n                snapshot = _context11.sent;\n                console.log(\"----- snapshot ----\", JSON.stringify(snapshot)); // const fungibleTokenContractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n\n                fungibleTokenContractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS; // const nonFungibleTokenContractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n\n                nonFungibleTokenContractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n                _context11.next = 11;\n                return generateCode(setupUserWallet, {\n                  query: /(0x01|0x02)/g,\n                  \"0x01\": fungibleTokenContractAddress,\n                  \"0x02\": nonFungibleTokenContractAddress\n                });\n\n              case 11:\n                initCode = _context11.sent;\n                setStatus(\"Resolving...\");\n                _context11.next = 15;\n                return fcl.send([fcl.getLatestBlock()]);\n\n              case 15:\n                blockResponse = _context11.sent;\n                _context11.next = 18;\n                return fcl.decode(blockResponse);\n\n              case 18:\n                block = _context11.sent;\n                _context11.prev = 19;\n                _context11.next = 22;\n                return fcl.send([sdk.transaction(_templateObject6(), initCode), fcl.proposer(fcl.currentUser().authorization), fcl.payer(fcl.currentUser().authorization), fcl.ref(block.id), fcl.authorizations([fcl.currentUser().authorization]), fcl.limit(100)] // {\n                //   node: \"http://localhost:8080\",\n                // }\n                );\n\n              case 22:\n                tx = _context11.sent;\n                // console.log(\"fcl.currentUser()\", fcl.currentUser().snapshot());\n                // const tx = await fcl.send(\n                //   [\n                //     fcl.transaction(simpleTransaction),\n                //     fcl.proposer(fcl.currentUser().authorization),\n                //     fcl.payer(fcl.currentUser().authorization),\n                //     fcl.ref(block.id),\n                //   ]\n                //   // { node: \"http://access-001.devnet12.nodes.onflow.org:9000\" }\n                // );\n                // const tx = await fcl.send([\n                //   fcl.transaction(initCode),\n                //   fcl.proposer(fcl.currentUser().authorization),\n                //   fcl.payer(fcl.currentUser().authorization),\n                //   fcl.ref(block.id),\n                // ]);\n                transactionId = tx.transactionId;\n                setStatus(\"Transaction sent, waiting for confirmation\"); // getWalletResources();\n                // fcl.tx(tx).subscribe(console.log); // fires everytime tx status updates\n\n                unsub = fcl.tx({\n                  transactionId: transactionId\n                }).subscribe(function (transaction) {\n                  setTransaction(transaction);\n\n                  if (fcl.tx.isSealed(transaction)) {\n                    setStatus(\"Transaction is Sealed\");\n                    unsub();\n                  }\n                });\n                _context11.next = 32;\n                break;\n\n              case 28:\n                _context11.prev = 28;\n                _context11.t0 = _context11[\"catch\"](19);\n                console.error(error);\n                setStatus(\"Transaction failed\");\n\n              case 32:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, null, [[19, 28]]);\n      }));\n\n      return function setupWallet() {\n        return _ref11.apply(this, arguments);\n      };\n    }();\n\n    var giveAward = /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(_ref12) {\n        var recipientAddress, user, authorization, snapshot, address, fungibleTokenContractAddress, awardContractAddress, initCode, initResponse;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                recipientAddress = _ref12.recipientAddress;\n                console.log(\"giving award to recipientAddress\", recipientAddress); // Create the user vault\n\n                user = fcl.currentUser();\n                authorization = user.authorization;\n                _context12.next = 6;\n                return user.snapshot();\n\n              case 6:\n                snapshot = _context12.sent;\n                address = getAddress(snapshot); // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n                // const fungibleTokenContractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n\n                fungibleTokenContractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS; // const awardContractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n\n                awardContractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n                _context12.next = 12;\n                return generateCode(giveNFTAward, {\n                  query: /(0x01|0x02|0x03)/g,\n                  \"0x01\": awardContractAddress,\n                  \"0x02\": fungibleTokenContractAddress,\n                  \"0x03\": \"0x\".concat(recipientAddress)\n                });\n\n              case 12:\n                initCode = _context12.sent;\n                _context12.prev = 13;\n                _context12.next = 16;\n                return fcl.send([sdk.transaction(_templateObject7(), initCode), fcl.proposer(authorization), fcl.payer(authorization), fcl.authorizations([authorization]), fcl.limit(100)] // {\n                //   node: \"http://localhost:8080\",\n                // }\n                );\n\n              case 16:\n                initResponse = _context12.sent;\n                console.log(\"give award initResponse\", initResponse);\n                _context12.next = 23;\n                break;\n\n              case 20:\n                _context12.prev = 20;\n                _context12.t0 = _context12[\"catch\"](13);\n                console.log(\"give award caught error\", _context12.t0);\n\n              case 23:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, null, [[13, 20]]);\n      }));\n\n      return function giveAward(_x4) {\n        return _ref13.apply(this, arguments);\n      };\n    }();\n\n    var _useMutation = useMutation(ASSOCIATE_WALLET, {\n      update: function update(cache, _ref14) {\n        var data = _ref14.data;\n\n        var _cache$readQuery = cache.readQuery({\n          query: CURRENT_USER_QUERY\n        }),\n            currentUserData = _cache$readQuery.me;\n\n        cache.writeQuery({\n          query: CURRENT_USER_QUERY,\n          data: {\n            me: _objectSpread(_objectSpread({}, currentUserData), data.associateWallet)\n          }\n        });\n      },\n      onError: function onError() {\n        toast.error(\"😳 Ekkk! Failed to link wallet.\", {\n          position: \"bottom-left\"\n        });\n      }\n    }),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        associateWallet = _useMutation2[0],\n        _useMutation2$ = _useMutation2[1],\n        data = _useMutation2$.data,\n        loading = _useMutation2$.loading,\n        error = _useMutation2$.error;\n\n    var connectActiveWalletToLyraLabs = /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                associateWallet({\n                  variables: {\n                    address: walletUser.addr\n                  }\n                });\n\n              case 1:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13);\n      }));\n\n      return function connectActiveWalletToLyraLabs() {\n        return _ref15.apply(this, arguments);\n      };\n    }();\n\n    return __jsx(WalletContext.Provider, {\n      value: {\n        status: status,\n        setStatus: setStatus,\n        transaction: transaction,\n        setTransaction: setTransaction,\n        walletConnected: walletConnected,\n        walletNotConnected: walletNotConnected,\n        setupWallet: setupWallet,\n        setupFCLAuthHandler: setupFCLAuthHandler,\n        walletUser: walletUser,\n        vaultIsSetup: vaultIsSetup,\n        collectionIsSetup: collectionIsSetup,\n        walletBalance: walletBalance,\n        walletCollection: walletCollection,\n        connectActiveWalletToLyraLabs: connectActiveWalletToLyraLabs,\n        giveAward: giveAward,\n        authHandlerIsSetup: authHandlerIsSetup,\n        setAuthHandlerIsSetup: setAuthHandlerIsSetup\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 7\n      }\n    }, __jsx(Component, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  _s(WithWallet, \"DaCJYEnlniV02Rwjw4tvx7HxtoA=\", false, function () {\n    return [useMutation];\n  });\n\n  return WithWallet;\n};","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js"],"names":["React","useState","fcl","sdk","useMutation","ASSOCIATE_WALLET","toast","CURRENT_USER_QUERY","checkReference","checkCollection","checkActiveWalletScript","vaultBalance","getCollectionItems","giveNFTAward","setupUserWallet","WalletContext","createContext","NODE_ENV","FLOW_CONFIG","process","env","TOKEN_CONTRACT_ADDRESS","AWARD_CONTRACT_ADDRESS","ACCESS_NODE_API","CHALLENGE_HANDSHAKE","console","log","LOCAL_TOKEN_CONTRACT_ADDRESS","TESTNET_TOKEN_CONTRACT_ADDRESS","LOCAL_AWARD_CONTRACT_ADDRESS","TESTNET_AWARD_CONTRACT_ADDRESS","getAddress","user","nullPrefix","addr","generateCode","rawCode","match","query","replace","item","withWallet","Component","WithWallet","walletUser","setWalletUser","vaultIsSetup","setVaultIsSetup","collectionIsSetup","setCollectionIsSetup","walletBalance","setWalletBalance","walletCollection","setWalletCollection","authHandlerIsSetup","setAuthHandlerIsSetup","status","setStatus","transaction","setTransaction","walletConnected","loggedIn","walletNotConnected","setupFCLAuthHandler","currentUser","subscribe","getWalletResources","checkUserVaultStatus","vaultStatus","startBalancePoll","checkUserCollectionStatus","collectionStatus","startCollectionPoll","balancePollId","getUserBalance","balance","setTimeout","collectionPollId","getUserCollection","items","snapshot","address","contractAddress","scriptCode","script","send","response","decode","checkResult","checkActiveWallet","activeWalletStatus","setupWallet","simpleTransaction","authorization","JSON","stringify","fungibleTokenContractAddress","nonFungibleTokenContractAddress","initCode","getLatestBlock","blockResponse","block","proposer","payer","ref","id","authorizations","limit","tx","transactionId","unsub","isSealed","error","giveAward","recipientAddress","awardContractAddress","initResponse","update","cache","data","readQuery","currentUserData","me","writeQuery","associateWallet","onError","position","loading","connectActiveWalletToLyraLabs","variables"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport * as fcl from \"@onflow/fcl\";\nimport * as sdk from \"@onflow/sdk\";\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ASSOCIATE_WALLET } from \"@data/mutations\";\nimport { toast } from \"react-toastify\";\nimport { CURRENT_USER_QUERY } from \"../../data/queries\";\n\nimport checkReference from \"../../flow/scripts/check-ref.cdc\";\nimport checkCollection from \"../../flow/scripts/check-collection.cdc\";\nimport checkActiveWalletScript from \"../../flow/scripts/check-active-wallet.cdc\";\nimport vaultBalance from \"../../flow/scripts/vault-balance.cdc\";\nimport getCollectionItems from \"../../flow/scripts/get-collection-items.cdc\";\nimport giveNFTAward from \"../../flow/transactions/give-nft-award.cdc\";\n\nimport setupUserWallet from \"../../flow/transactions/setup-user-wallet.cdc\";\n\nexport const WalletContext = React.createContext({});\n\nconst NODE_ENV = process.env.NODE_ENV;\nconst FLOW_CONFIG = process.env.FLOW_CONFIG;\nconst {\n  TOKEN_CONTRACT_ADDRESS,\n  AWARD_CONTRACT_ADDRESS,\n  ACCESS_NODE_API,\n  CHALLENGE_HANDSHAKE,\n} = FLOW_CONFIG[NODE_ENV];\nconsole.log(\"---- TOKEN_CONTRACT_ADDRESS ----\", TOKEN_CONTRACT_ADDRESS);\nconsole.log(\"---- AWARD_CONTRACT_ADDRESS----\", AWARD_CONTRACT_ADDRESS);\nconsole.log(\"---- ACCESS_NODE_API----\", ACCESS_NODE_API);\nconsole.log(\"---- CHALLENGE_HANDSHAKE----\", CHALLENGE_HANDSHAKE);\n\n// const TOKEN_CONTRACT_ADDRESS = pro\n\nconst LOCAL_TOKEN_CONTRACT_ADDRESS = \"0x01cf0e2f2f715450\";\n// const TESTNET_TOKEN_CONTRACT_ADDRESS = \"0x4f7d7bb81563b36a\";\nconst TESTNET_TOKEN_CONTRACT_ADDRESS = \"0xb3f18c83b7599567\";\n\nconst LOCAL_AWARD_CONTRACT_ADDRESS = \"0xfd43f9148d4b725d\";\n// const TESTNET_AWARD_CONTRACT_ADDRESS = \"0xab1ac2650499b3b5\";\nconst TESTNET_AWARD_CONTRACT_ADDRESS = \"0x5796355ea6a395b8\";\n\nconst getAddress = (user, nullPrefix = true) => {\n  return nullPrefix ? `0x${user.addr}` : user.addr;\n};\n\nconst generateCode = async (rawCode, match) => {\n  if (!match) {\n    return rawCode;\n  }\n  const { query } = match;\n  return rawCode.replace(query, (item) => {\n    return match[item];\n  });\n};\n\nexport const withWallet = (Component) => {\n  const WithWallet = () => {\n    const [walletUser, setWalletUser] = useState(null);\n    const [vaultIsSetup, setVaultIsSetup] = useState(false);\n    const [collectionIsSetup, setCollectionIsSetup] = useState(false);\n    const [walletBalance, setWalletBalance] = useState(null);\n    const [walletCollection, setWalletCollection] = useState(null);\n    const [authHandlerIsSetup, setAuthHandlerIsSetup] = useState(false);\n\n    const [status, setStatus] = useState(\"Not started\");\n    const [transaction, setTransaction] = useState(null);\n\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected =\n      walletUser === null || (walletUser && !walletUser.loggedIn);\n\n    const setupFCLAuthHandler = () => {\n      // console.log(\n      //   \"calling setupFCLAuthHandler process.env.TESTNET_TOKEN_CONTRACT_ADDRESS\",\n      //   process.env.TESTNET_TOKEN_CONTRACT_ADDRESS\n      // );\n      // console.log(\n      //   \"calling setupFCLAuthHandler process.env.TESTNET_AWARD_CONTRACT_ADDRESS\",\n      //   process.env.TESTNET_AWARD_CONTRACT_ADDRESS\n      // );\n      fcl.currentUser().subscribe(async (user) => {\n        if (user.loggedIn) {\n          setWalletUser(user);\n          getWalletResources();\n        }\n      });\n    };\n\n    const getWalletResources = async () => {\n      const vaultStatus = await checkUserVaultStatus();\n      setVaultIsSetup(vaultStatus);\n      if (vaultStatus) {\n        startBalancePoll();\n      }\n      const collectionStatus = await checkUserCollectionStatus();\n      setCollectionIsSetup(collectionStatus);\n      if (collectionStatus) {\n        startCollectionPoll();\n      }\n    };\n\n    let balancePollId = null;\n    const startBalancePoll = async () => {\n      const balance = await getUserBalance();\n      setWalletBalance(balance);\n      balancePollId = setTimeout(startBalancePoll, 2000);\n    };\n\n    let collectionPollId = null;\n    const startCollectionPoll = async () => {\n      const items = await getUserCollection();\n      setWalletCollection(items);\n      collectionPollId = setTimeout(startCollectionPoll, 2000);\n    };\n\n    const getUserBalance = async () => {\n      // console.log(\"calling getUSerBalance\");\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // const contractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n      const contractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(vaultBalance, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      // console.log(\"response on getUserBalance\", response);\n      const balance = await fcl.decode(response);\n      return balance;\n    };\n\n    const getUserCollection = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // This is the local address - Regular NonFungibleToken contract\n      // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      // This is the local address - NonFungibleTokenAward contract\n      // const contractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n      // This is the testnet address - NonFungibleTokenAward contract\n      const contractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(getCollectionItems, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const items = await fcl.decode(response);\n      return items;\n    };\n\n    const checkUserVaultStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // const contractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n      const contractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(checkReference, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      console.log(\"---- checkResult is ---- \", checkResult);\n      return checkResult;\n    };\n\n    const checkUserCollectionStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // const contractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n      const contractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n\n      const scriptCode = await generateCode(checkCollection, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const checkActiveWallet = async () => {\n      // Checks if the active wallet is setup\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(checkActiveWalletScript, {\n        query: /(0x01|0x02|0x03)/g,\n        // \"0x01\": LOCAL_TOKEN_CONTRACT_ADDRESS,\n        \"0x01\": TESTNET_TOKEN_CONTRACT_ADDRESS,\n        // \"0x02\": LOCAL_AWARD_CONTRACT_ADDRESS,\n        \"0x02\": TESTNET_AWARD_CONTRACT_ADDRESS,\n        \"0x03\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const activeWalletStatus = await fcl.decode(response);\n      return activeWalletStatus;\n    };\n\n    const setupWallet = async () => {\n      const simpleTransaction = `\\\n        transaction {\n          execute {\n            log(\"Hello World!!\")\n          }\n        }\n      `;\n      // Create a vault and a collection\n      const user = fcl.currentUser();\n      const { authorization } = user;\n      const snapshot = await user.snapshot();\n      console.log(\"----- snapshot ----\", JSON.stringify(snapshot));\n      // const fungibleTokenContractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n      const fungibleTokenContractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      // const nonFungibleTokenContractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n      const nonFungibleTokenContractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const initCode = await generateCode(setupUserWallet, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": fungibleTokenContractAddress,\n        \"0x02\": nonFungibleTokenContractAddress,\n      });\n\n      setStatus(\"Resolving...\");\n\n      const blockResponse = await fcl.send([fcl.getLatestBlock()]);\n      const block = await fcl.decode(blockResponse);\n\n      try {\n        const tx = await fcl.send(\n          [\n            sdk.transaction`${initCode}`,\n            fcl.proposer(fcl.currentUser().authorization),\n            fcl.payer(fcl.currentUser().authorization),\n            fcl.ref(block.id),\n            fcl.authorizations([fcl.currentUser().authorization]),\n            fcl.limit(100),\n          ]\n          // {\n          //   node: \"http://localhost:8080\",\n          // }\n        );\n\n        // console.log(\"fcl.currentUser()\", fcl.currentUser().snapshot());\n\n        // const tx = await fcl.send(\n        //   [\n        //     fcl.transaction(simpleTransaction),\n        //     fcl.proposer(fcl.currentUser().authorization),\n        //     fcl.payer(fcl.currentUser().authorization),\n        //     fcl.ref(block.id),\n        //   ]\n        //   // { node: \"http://access-001.devnet12.nodes.onflow.org:9000\" }\n        // );\n\n        // const tx = await fcl.send([\n        //   fcl.transaction(initCode),\n        //   fcl.proposer(fcl.currentUser().authorization),\n        //   fcl.payer(fcl.currentUser().authorization),\n        //   fcl.ref(block.id),\n        // ]);\n\n        const { transactionId } = tx;\n\n        setStatus(\"Transaction sent, waiting for confirmation\");\n\n        // getWalletResources();\n\n        // fcl.tx(tx).subscribe(console.log); // fires everytime tx status updates\n\n        const unsub = fcl.tx({ transactionId }).subscribe((transaction) => {\n          setTransaction(transaction);\n\n          if (fcl.tx.isSealed(transaction)) {\n            setStatus(\"Transaction is Sealed\");\n            unsub();\n          }\n        });\n      } catch (e) {\n        console.error(error);\n        setStatus(\"Transaction failed\");\n      }\n    };\n\n    const giveAward = async ({ recipientAddress }) => {\n      console.log(\"giving award to recipientAddress\", recipientAddress);\n      // Create the user vault\n      const user = fcl.currentUser();\n      const { authorization } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      // const fungibleTokenContractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n      const fungibleTokenContractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      // const awardContractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n      const awardContractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const initCode = await generateCode(giveNFTAward, {\n        query: /(0x01|0x02|0x03)/g,\n        \"0x01\": awardContractAddress,\n        \"0x02\": fungibleTokenContractAddress,\n        \"0x03\": `0x${recipientAddress}`,\n      });\n      try {\n        const initResponse = await fcl.send(\n          [\n            sdk.transaction`${initCode}`,\n            fcl.proposer(authorization),\n            fcl.payer(authorization),\n            fcl.authorizations([authorization]),\n            fcl.limit(100),\n          ]\n          // {\n          //   node: \"http://localhost:8080\",\n          // }\n        );\n        console.log(\"give award initResponse\", initResponse);\n      } catch (e) {\n        console.log(\"give award caught error\", e);\n      }\n    };\n\n    const [associateWallet, { data, loading, error }] = useMutation(\n      ASSOCIATE_WALLET,\n      {\n        update: (cache, { data }) => {\n          const { me: currentUserData } = cache.readQuery({\n            query: CURRENT_USER_QUERY,\n          });\n          cache.writeQuery({\n            query: CURRENT_USER_QUERY,\n            data: { me: { ...currentUserData, ...data.associateWallet } },\n          });\n        },\n        onError: () => {\n          toast.error(\"😳 Ekkk! Failed to link wallet.\", {\n            position: \"bottom-left\",\n          });\n        },\n      }\n    );\n\n    const connectActiveWalletToLyraLabs = async () => {\n      associateWallet({\n        variables: {\n          address: walletUser.addr,\n        },\n      });\n    };\n\n    return (\n      <WalletContext.Provider\n        value={{\n          status,\n          setStatus,\n          transaction,\n          setTransaction,\n          walletConnected,\n          walletNotConnected,\n          setupWallet,\n          setupFCLAuthHandler,\n          walletUser,\n          vaultIsSetup,\n          collectionIsSetup,\n          walletBalance,\n          walletCollection,\n          connectActiveWalletToLyraLabs,\n          giveAward,\n          authHandlerIsSetup,\n          setAuthHandlerIsSetup,\n        }}\n      >\n        <Component />\n      </WalletContext.Provider>\n    );\n  };\n  return WithWallet;\n};\n"]},"metadata":{},"sourceType":"module"}