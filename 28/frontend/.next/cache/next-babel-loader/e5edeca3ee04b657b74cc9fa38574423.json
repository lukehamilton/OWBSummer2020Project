{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/private-route.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nvar login = \"/login?redirected=true\";\n\nvar checkUserAuthentication = function checkUserAuthentication() {\n  //   return { auth: null }; // change null to { isAdmin: true } for test it.\n  return true; // change null to { isAdmin: true } for test it.\n};\n\nexport var withPrivateRoute = function withPrivateRoute(Component) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var WithPrivateRoute = function WithPrivateRoute(props) {\n    return __jsx(Component, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }));\n  };\n\n  WithPrivateRoute.getInitialProps = function _callee(_ref) {\n    var res, isAuthorized;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            res = _ref.res;\n            console.log(\"XXXXX CRYSTAL CLEAR XXX\", res);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(checkUserAuthentication());\n\n          case 4:\n            isAuthorized = _context.sent;\n\n            // console.log(\"XXX userAuth XXX\", userAuth);\n            if (!isAuthorized) {\n              // Handle server-side and client-side rendering.\n              if (res) {\n                res === null || res === void 0 ? void 0 : res.writeHead(302, {\n                  Location: login\n                });\n                res === null || res === void 0 ? void 0 : res.end();\n              } else {\n                Router.replace(login);\n              }\n            } // else if (Component.getInitialProps) {\n            //   const wrappedProps = await Component.getInitialProps();\n            //   return { ...wrappedProps };\n            // }\n            // res?.writeHead(302, {\n            //   Location: login,\n            // });\n            // res?.end();\n            // const req = ctx.ctx.req;\n            // const md = req ? new MobileDetect(req.headers[\"user-agent\"]) : null;\n            // const isMobile = md ? (md.phone() ? true : false) : false;\n            // let pageProps = {};\n            // pageProps = await Component.getInitialProps(ctx);\n            // return { ...pageProps, isMobile };\n\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  return WithPrivateRoute;\n};","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/private-route.js"],"names":["React","login","checkUserAuthentication","withPrivateRoute","Component","options","WithPrivateRoute","props","getInitialProps","res","console","log","isAuthorized","writeHead","Location","end","Router","replace"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,KAAK,GAAG,wBAAd;;AAEA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpC;AACA,SAAO,IAAP,CAFoC,CAEvB;AACd,CAHD;;AAKA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,SAAD,EAA6B;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AAC3D,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAW;AAClC,WAAO,MAAC,SAAD,eAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAFD;;AAGAD,EAAAA,gBAAgB,CAACE,eAAjB,GAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,GAAT,QAASA,GAAT;AACjCC,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,GAAvC;AADiC;AAAA,6CAENP,uBAAuB,EAFjB;;AAAA;AAE3BU,YAAAA,YAF2B;;AAGjC;AACA,gBAAI,CAACA,YAAL,EAAmB;AACjB;AACA,kBAAIH,GAAJ,EAAS;AACPA,gBAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEI,SAAL,CAAe,GAAf,EAAoB;AAClBC,kBAAAA,QAAQ,EAAEb;AADQ,iBAApB;AAGAQ,gBAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEM,GAAL;AACD,eALD,MAKO;AACLC,gBAAAA,MAAM,CAACC,OAAP,CAAehB,KAAf;AACD;AACF,aAdgC,CAgBjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA7BiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AA+BA,SAAOK,gBAAP;AACD,CApCM","sourcesContent":["import React from \"react\";\n\nconst login = \"/login?redirected=true\";\n\nconst checkUserAuthentication = () => {\n  //   return { auth: null }; // change null to { isAdmin: true } for test it.\n  return true; // change null to { isAdmin: true } for test it.\n};\n\nexport const withPrivateRoute = (Component, options = {}) => {\n  const WithPrivateRoute = (props) => {\n    return <Component {...props} />;\n  };\n  WithPrivateRoute.getInitialProps = async ({ res }) => {\n    console.log(\"XXXXX CRYSTAL CLEAR XXX\", res);\n    const isAuthorized = await checkUserAuthentication();\n    // console.log(\"XXX userAuth XXX\", userAuth);\n    if (!isAuthorized) {\n      // Handle server-side and client-side rendering.\n      if (res) {\n        res?.writeHead(302, {\n          Location: login,\n        });\n        res?.end();\n      } else {\n        Router.replace(login);\n      }\n    }\n\n    // else if (Component.getInitialProps) {\n    //   const wrappedProps = await Component.getInitialProps();\n    //   return { ...wrappedProps };\n    // }\n    // res?.writeHead(302, {\n    //   Location: login,\n    // });\n    // res?.end();\n    // const req = ctx.ctx.req;\n    // const md = req ? new MobileDetect(req.headers[\"user-agent\"]) : null;\n    // const isMobile = md ? (md.phone() ? true : false) : false;\n    // let pageProps = {};\n    // pageProps = await Component.getInitialProps(ctx);\n    // return { ...pageProps, isMobile };\n  };\n  return WithPrivateRoute;\n};\n"]},"metadata":{},"sourceType":"module"}