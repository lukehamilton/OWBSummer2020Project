{"ast":null,"code":"var _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/apollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport auth0 from \"../../config/auth0\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloLink, concat } from \"apollo-link\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nlet apolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx;\n      const session = ctx.req ? await auth0.getSession(ctx.req) : null; // console.log(\"---------------------\");\n      // console.log(\"---------------------\");\n      // console.log(\"--------------------- auth0 session ?\", session);\n      // console.log(\"---------------------\");\n      // console.log(\"---------------------\");\n      // const md = ctx.req\n      //   ? new MobileDetect(ctx.req.headers[\"user-agent\"])\n      //   : null;\n      // console.log(\"md.mobile()\", md.mobile());\n      // const isMobile = md ? md.mobile() : false;\n      // const isMobile = \"Cool\";\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n\n      const apolloClient = ctx.apolloClient = initApolloClient({\n        session\n      }); // console.log(\"apolloClient\", apolloClient);\n      // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if ssr is enabled\n\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread({}, pageProps, {\n                apolloClient\n              }),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 83\n              },\n              __self: this\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        // isMobile,\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\nconst isBrowser = false;\nconst httpLink = new HttpLink({\n  // uri:\n  //   // isDocker && isBrowser\n  uri: process.env.BACKEND_URL,\n  // uri: isBrowser\n  //   ? \"http://localhost:4000/graphql\"\n  //   : process.env.BACKEND_URL,\n  // uri: \"http://localhost:4000/graphql\",\n  credentials: \"same-origin\",\n  // Additional fetch() options like `credentials` or `headers`\n  // Use fetch() polyfill on the server\n  fetch: !isBrowser && fetch // fetchOptions: {\n  //   mode: \"no-cors\"\n  // }\n\n}); // const setSessionLink = setContext((request, previousContext) => {\n//   console.log(\"cooollooooooooo\");\n//   console.log(\"cooollooooooooo\", request);\n//   console.log(\"cooollooooooooo\");\n//   return { headers: { authorization: \"1234\" } };\n// });\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\nfunction createApolloClient(initialState = {}) {\n  const {\n    session\n  } = initialState;\n  const setAuthLink = setContext((_, {\n    headers\n  }) => {\n    console.log(\"---------------------------------------------\");\n    console.log(\"---------------------------------------------\");\n    console.log(\"-------------- session in setAuthLink --------\", session);\n    console.log(\"---------------------------------------------\");\n    console.log(\"---------------------------------------------\");\n    const token = session && session.idToken ? session.idToken : null;\n    const accessToken = session && session.accessToken ? session.accessToken : null; // console.log(\"----- accessToken ------\", accessToken);\n\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: accessToken ? `Bearer ${accessToken}` : \"\"\n      })\n    };\n  }); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  const isBrowser = false; // const isDocker = process.env.BACKEND_URL === \"http://backend:4000/graphql\";\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    // link: concat(authMiddleware, httpLink),\n    link: setAuthLink.concat(httpLink),\n    // link: httpLink,\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/apollo.js"],"names":["React","Head","auth0","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","ApolloLink","concat","setContext","fetch","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","session","req","getSession","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","isBrowser","httpLink","uri","process","env","BACKEND_URL","credentials","setAuthLink","_","headers","log","token","idToken","accessToken","authorization","connectToDevTools","ssrMode","link","restore"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport auth0 from \"../../config/auth0\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloLink, concat } from \"apollo-link\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\n\nlet apolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState);\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== \"production\") {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx) => {\n      const { AppTree } = ctx;\n      const session = ctx.req ? await auth0.getSession(ctx.req) : null;\n      // console.log(\"---------------------\");\n      // console.log(\"---------------------\");\n      // console.log(\"--------------------- auth0 session ?\", session);\n      // console.log(\"---------------------\");\n      // console.log(\"---------------------\");\n      // const md = ctx.req\n      //   ? new MobileDetect(ctx.req.headers[\"user-agent\"])\n      //   : null;\n      // console.log(\"md.mobile()\", md.mobile());\n      // const isMobile = md ? md.mobile() : false;\n      // const isMobile = \"Cool\";\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = (ctx.apolloClient = initApolloClient({ session }));\n      // console.log(\"apolloClient\", apolloClient);\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind();\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        // isMobile,\n        apolloState,\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === \"undefined\") {\n    return createApolloClient(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\nconst isBrowser = typeof window !== \"undefined\";\n\nconst httpLink = new HttpLink({\n  // uri:\n  //   // isDocker && isBrowser\n  uri: process.env.BACKEND_URL,\n  // uri: isBrowser\n  //   ? \"http://localhost:4000/graphql\"\n  //   : process.env.BACKEND_URL,\n  // uri: \"http://localhost:4000/graphql\",\n  credentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\n  // Use fetch() polyfill on the server\n  fetch: !isBrowser && fetch,\n  // fetchOptions: {\n  //   mode: \"no-cors\"\n  // }\n});\n\n// const setSessionLink = setContext((request, previousContext) => {\n//   console.log(\"cooollooooooooo\");\n//   console.log(\"cooollooooooooo\", request);\n//   console.log(\"cooollooooooooo\");\n//   return { headers: { authorization: \"1234\" } };\n// });\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n  const { session } = initialState;\n\n  const setAuthLink = setContext((_, { headers }) => {\n    console.log(\"---------------------------------------------\");\n    console.log(\"---------------------------------------------\");\n    console.log(\"-------------- session in setAuthLink --------\", session);\n    console.log(\"---------------------------------------------\");\n    console.log(\"---------------------------------------------\");\n    const token = session && session.idToken ? session.idToken : null;\n    const accessToken =\n      session && session.accessToken ? session.accessToken : null;\n    // console.log(\"----- accessToken ------\", accessToken);\n    return {\n      headers: {\n        ...headers,\n        authorization: accessToken ? `Bearer ${accessToken}` : \"\",\n      },\n    };\n  });\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  const isBrowser = typeof window !== \"undefined\";\n  // const isDocker = process.env.BACKEND_URL === \"http://backend:4000/graphql\";\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\n    // link: concat(authMiddleware, httpLink),\n    link: setAuthLink.concat(httpLink),\n    // link: httpLink,\n    cache: new InMemoryCache().restore(initialState),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}