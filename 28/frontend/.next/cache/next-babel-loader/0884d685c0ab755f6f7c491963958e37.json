{"ast":null,"code":"var _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/pages/settings/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from \"react\";\nimport Page from \"@components/page\";\nimport PostList from \"@components/post-list\";\nimport { USER_POSTS_INBOX } from \"@data/queries\";\nimport { CurrentUserContext } from \"@enhancers/current-user\";\nimport { withCurrentUser } from \"@enhancers/current-user\";\nimport { withLoginModal } from \"@enhancers/login-modal\";\nimport { withPrivateRoute } from \"@enhancers/private-route\";\nimport { flowRight as compose } from \"lodash\";\nimport * as fcl from \"@onflow/fcl\";\nfcl.config().put(\"challenge.handshake\", \"http://localhost:8701/flow/authenticate\");\n\nconst executeSimpleScript = async (a, b) => {\n  const response = await fcl.send([sdk.script`\n        pub fun main(a: Int, b: Int):Int {\n          return a + b\n        }\n      `, sdk.args([sdk.arg(a, types.Int), sdk.arg(b, types.Int)])]);\n  return fcl.decode(response);\n};\n\nconst simpleTransaction = async () => {\n  const {\n    authorization\n  } = fcl.currentUser();\n  const tx = await fcl.send([fcl.transaction`\n      transaction {\n        prepare(acct: AuthAccount) {\n          log(\"Transaction Submitted\")\n        }\n      }\n    `, sdk.payer(authorization), sdk.proposer(authorization), sdk.authorizations([authorization]), sdk.limit(100)]);\n  console.log({\n    tx\n  });\n  fcl.tx(tx).subscribe(txStatus => {\n    if (fcl.tx.isExecuted(txStatus)) {\n      console.log(\"Transaction was executed\");\n    }\n  });\n};\n\nconst deployHelloCadence = async () => {\n  const code = `\n    access(all) contract HelloWorld {\n      access(all) let greeting: String\n\n      init() {\n          self.greeting = \"Hello, Cadence!\"\n      }\n  \n      access(all) fun hello(): String {\n          return self.greeting\n      }\n    }\n  `;\n  const {\n    authorization\n  } = fcl.currentUser();\n  const tx = await fcl.send([sdk.transaction`\n          transaction(code: String) {\n            prepare(acct: AuthAccount) {\n              acct.setCode(code.decodeHex())\n            }\n          }\n        `, fcl.args([fcl.arg(Buffer.from(code, \"utf8\").toString(\"hex\"), types.String)]), fcl.proposer(authorization), fcl.payer(authorization), fcl.authorizations([authorization]), fcl.limit(100)]);\n  console.log({\n    tx\n  });\n  fcl.tx(tx).subscribe(txStatus => {\n    if (fcl.tx.isExecuted(txStatus)) {\n      console.log(\"Contract was deployed\");\n    }\n  });\n};\n\nconst pingAccount = async () => {\n  const {\n    authorization\n  } = fcl.currentUser();\n  const tx = await fcl.send([fcl.transaction`\n    import HelloWorld from 0x01cf0e2f2f715450\n\n    transaction {\n    \n      prepare(acct: AuthAccount) {}\n    \n      execute {\n        log(HelloWorld.hello())\n      }\n    }\n  `, fcl.proposer(authorization), fcl.payer(authorization), fcl.authorizations([authorization])]);\n  fcl.tx(tx).subscribe(txStatus => {\n    if (fcl.tx.isExecuted(txStatus)) {\n      console.log(\"Transaction was executed\");\n    }\n  });\n};\n\nconst callScript = async () => {\n  const result = await executeSimpleScript(10, 20);\n  setScriptResult(result);\n};\n\nconst SettingsPage = ({\n  user\n}) => {\n  fcl.currentUser().subscribe(user => {\n    console.log(\"---------- user change -----------\");\n    console.log(user);\n    console.log(\"--------------------------\");\n  }); // const currentUser = useContext(CurrentUserContext);\n\n  const {\n    0: scriptResult,\n    1: setScriptResult\n  } = useState(null);\n\n  const callScript = async () => {\n    const result = await executeSimpleScript(10, 20);\n    setScriptResult(result);\n  };\n\n  return __jsx(Page, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, __jsx(\"button\", {\n    onClick: callScript,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, \"Execute Script\"), scriptResult && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    className: \"script-result\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, \"Computation Result: \", scriptResult)), __jsx(\"button\", {\n    onClick: () => fcl.authenticate(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, \"Connect Wallet\"), __jsx(\"button\", {\n    onClick: simpleTransaction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, \"Submit Tx\"), __jsx(\"button\", {\n    onClick: deployHelloCadence,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, \"Deploy Hello Contract\"), __jsx(\"button\", {\n    onClick: pingAccount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, \"Ping for Hello\"));\n};\n\nconst enhance = compose(withPrivateRoute, withCurrentUser, withLoginModal, withPrivateRoute);\nexport default enhance(SettingsPage);","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/pages/settings/index.js"],"names":["React","useState","useContext","Page","PostList","USER_POSTS_INBOX","CurrentUserContext","withCurrentUser","withLoginModal","withPrivateRoute","flowRight","compose","fcl","config","put","executeSimpleScript","a","b","response","send","sdk","script","args","arg","types","Int","decode","simpleTransaction","authorization","currentUser","tx","transaction","payer","proposer","authorizations","limit","console","log","subscribe","txStatus","isExecuted","deployHelloCadence","code","Buffer","from","toString","String","pingAccount","callScript","result","setScriptResult","SettingsPage","user","scriptResult","authenticate","enhance"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport Page from \"@components/page\";\nimport PostList from \"@components/post-list\";\nimport { USER_POSTS_INBOX } from \"@data/queries\";\nimport { CurrentUserContext } from \"@enhancers/current-user\";\nimport { withCurrentUser } from \"@enhancers/current-user\";\nimport { withLoginModal } from \"@enhancers/login-modal\";\nimport { withPrivateRoute } from \"@enhancers/private-route\";\nimport { flowRight as compose } from \"lodash\";\nimport * as fcl from \"@onflow/fcl\";\n\nfcl\n  .config()\n  .put(\"challenge.handshake\", \"http://localhost:8701/flow/authenticate\");\n\nconst executeSimpleScript = async (a, b) => {\n  const response = await fcl.send([\n    sdk.script`\n        pub fun main(a: Int, b: Int):Int {\n          return a + b\n        }\n      `,\n    sdk.args([sdk.arg(a, types.Int), sdk.arg(b, types.Int)]),\n  ]);\n\n  return fcl.decode(response);\n};\n\nconst simpleTransaction = async () => {\n  const { authorization } = fcl.currentUser();\n  const tx = await fcl.send([\n    fcl.transaction`\n      transaction {\n        prepare(acct: AuthAccount) {\n          log(\"Transaction Submitted\")\n        }\n      }\n    `,\n    sdk.payer(authorization),\n    sdk.proposer(authorization),\n    sdk.authorizations([authorization]),\n    sdk.limit(100),\n  ]);\n\n  console.log({ tx });\n\n  fcl.tx(tx).subscribe((txStatus) => {\n    if (fcl.tx.isExecuted(txStatus)) {\n      console.log(\"Transaction was executed\");\n    }\n  });\n};\n\nconst deployHelloCadence = async () => {\n  const code = `\n    access(all) contract HelloWorld {\n      access(all) let greeting: String\n\n      init() {\n          self.greeting = \"Hello, Cadence!\"\n      }\n  \n      access(all) fun hello(): String {\n          return self.greeting\n      }\n    }\n  `;\n  const { authorization } = fcl.currentUser();\n  const tx = await fcl.send([\n    sdk.transaction`\n          transaction(code: String) {\n            prepare(acct: AuthAccount) {\n              acct.setCode(code.decodeHex())\n            }\n          }\n        `,\n    fcl.args([\n      fcl.arg(Buffer.from(code, \"utf8\").toString(\"hex\"), types.String),\n    ]),\n    fcl.proposer(authorization),\n    fcl.payer(authorization),\n    fcl.authorizations([authorization]),\n    fcl.limit(100),\n  ]);\n\n  console.log({ tx });\n\n  fcl.tx(tx).subscribe((txStatus) => {\n    if (fcl.tx.isExecuted(txStatus)) {\n      console.log(\"Contract was deployed\");\n    }\n  });\n};\n\nconst pingAccount = async () => {\n  const { authorization } = fcl.currentUser();\n\n  const tx = await fcl.send([\n    fcl.transaction`\n    import HelloWorld from 0x01cf0e2f2f715450\n\n    transaction {\n    \n      prepare(acct: AuthAccount) {}\n    \n      execute {\n        log(HelloWorld.hello())\n      }\n    }\n  `,\n    fcl.proposer(authorization),\n    fcl.payer(authorization),\n    fcl.authorizations([authorization]),\n  ]);\n\n  fcl.tx(tx).subscribe((txStatus) => {\n    if (fcl.tx.isExecuted(txStatus)) {\n      console.log(\"Transaction was executed\");\n    }\n  });\n};\n\nconst callScript = async () => {\n  const result = await executeSimpleScript(10, 20);\n  setScriptResult(result);\n};\n\nconst SettingsPage = ({ user }) => {\n  fcl.currentUser().subscribe((user) => {\n    console.log(\"---------- user change -----------\");\n    console.log(user);\n    console.log(\"--------------------------\");\n  });\n  // const currentUser = useContext(CurrentUserContext);\n\n  const [scriptResult, setScriptResult] = useState(null);\n\n  const callScript = async () => {\n    const result = await executeSimpleScript(10, 20);\n    setScriptResult(result);\n  };\n\n  return (\n    <Page>\n      <button onClick={callScript}>Execute Script</button>\n      {scriptResult && (\n        <div>\n          <p className=\"script-result\">Computation Result: {scriptResult}</p>\n        </div>\n      )}\n      <button onClick={() => fcl.authenticate()}>Connect Wallet</button>\n      <button onClick={simpleTransaction}>Submit Tx</button>\n      <button onClick={deployHelloCadence}>Deploy Hello Contract</button>\n      <button onClick={pingAccount}>Ping for Hello</button>\n      {/* <button>Deploy Con</button> */}\n    </Page>\n  );\n};\n\nconst enhance = compose(\n  withPrivateRoute,\n  withCurrentUser,\n  withLoginModal,\n  withPrivateRoute\n);\nexport default enhance(SettingsPage);\n"]},"metadata":{},"sourceType":"module"}