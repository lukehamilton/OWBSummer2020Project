{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _styled from \"@emotion/styled-base\";\n\nvar _styled2,\n    _this = this,\n    _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/components/post-card/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState, useContext } from \"react\";\nimport { BASE_TEXT, WEIGHT } from \"@style/typography\";\nimport { BLACK, GUNSMOKE, WHITE, BLUSH, FOCUS_BLUSH, SCOPRION, ALABASTER, FOCUS_LAVENDER } from \"@style/colors\";\nimport { toast } from \"react-toastify\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ARCHIVE_POST } from \"@data/mutations\";\nimport { UNARCHIVE_POST } from \"@data/mutations\";\nimport { USER_POSTS } from \"@data/queries\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArchive, faThumbtack } from \"@fortawesome/pro-light-svg-icons\";\nexport var THUMBNAIL_DIMENSION = 60;\n\nvar Actions = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth20\",\n  label: \"Actions\"\n})(false ? {\n  name: \"1x3h1ro\",\n  styles: \"display:flex;transition:opacity .1s; > div:first-of-type{margin-left:0;}\"\n} : {\n  name: \"1x3h1ro\",\n  styles: \"display:flex;transition:opacity .1s; > div:first-of-type{margin-left:0;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nexport var Container = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth21\",\n  label: \"Container\"\n})((_styled2 = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  borderRadius: 3,\n  marginBottom: 12,\n  backgroundColor: WHITE,\n  boxShadow: \"0 1px 2px 0 rgba(0,0,0,.1)\",\n  padding: \"1rem\"\n}, _defineProperty(_styled2, Actions, {\n  opacity: 0\n}), _defineProperty(_styled2, \"&:hover\", _defineProperty({}, Actions, {\n  opacity: 1\n})), _styled2), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\nexport var Body = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth22\",\n  label: \"Body\"\n})(false ? {\n  name: \"gg4vpm\",\n  styles: \"display:flex;justify-content:space-between;\"\n} : {\n  name: \"gg4vpm\",\n  styles: \"display:flex;justify-content:space-between;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar Footer = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth23\",\n  label: \"Footer\"\n})(false ? {\n  name: \"1vctmtz\",\n  styles: \"margin-top:.5rem;display:flex;flex-direction:row;\"\n} : {\n  name: \"1vctmtz\",\n  styles: \"margin-top:.5rem;display:flex;flex-direction:row;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar Thumbnail = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth24\",\n  label: \"Thumbnail\"\n})({\n  flexShrink: 0,\n  borderRadius: 2,\n  height: THUMBNAIL_DIMENSION,\n  width: THUMBNAIL_DIMENSION,\n  marginLeft: \"1rem\"\n}, function (_ref) {\n  var src = _ref.src;\n  return {\n    backgroundImage: \"url(\".concat(src, \")\"),\n    backgroundSize: \"cover,auto\",\n    backgroundPosition: \"50% 50%,50% 50%\"\n  };\n}, false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nexport var Content = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth25\",\n  label: \"Content\"\n})(false ? {\n  name: \"0\",\n  styles: \"\"\n} : {\n  name: \"0\",\n  styles: \"\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar Title = /*#__PURE__*/_styled(\"a\", {\n  target: \"e2uwth26\",\n  label: \"Title\"\n})(_objectSpread(_objectSpread({}, BASE_TEXT), {}, {\n  fontSize: \"1rem\",\n  fontWeight: WEIGHT.BOLD,\n  wordBreak: \"break-word\",\n  textDecoration: \"none\",\n  color: BLACK\n}), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar MetaLine = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth27\",\n  label: \"MetaLine\"\n})(false ? {\n  name: \"70qvj9\",\n  styles: \"display:flex;align-items:center;\"\n} : {\n  name: \"70qvj9\",\n  styles: \"display:flex;align-items:center;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar PublisherLine = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth28\",\n  label: \"PublisherLine\"\n})(false ? {\n  name: \"kea77a\",\n  styles: \"display:flex;align-items:center;margin-top:.25rem;\"\n} : {\n  name: \"kea77a\",\n  styles: \"display:flex;align-items:center;margin-top:.25rem;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar MetaText = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth29\",\n  label: \"MetaText\"\n})(false ? {\n  name: \"70qvj9\",\n  styles: \"display:flex;align-items:center;\"\n} : {\n  name: \"70qvj9\",\n  styles: \"display:flex;align-items:center;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar Author = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth210\",\n  label: \"Author\"\n})(_objectSpread(_objectSpread({}, BASE_TEXT), {}, {\n  color: SCOPRION,\n  fontWeight: WEIGHT.BOLD\n}), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar SourceLogo = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth211\",\n  label: \"SourceLogo\"\n})(\"width:1rem;height:1rem;\", function (_ref2) {\n  var src = _ref2.src;\n  return {\n    backgroundImage: \"url(\".concat(src, \")\"),\n    backgroundSize: \"cover,auto\",\n    backgroundPosition: \"50% 50%,50% 50%\",\n    border: \"1px solid \".concat(GUNSMOKE)\n  };\n}, false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWtlaGFtaWx0b24vZGV2ZWxvcG1lbnQvbHlyYS1sYWJzLWRldi9seXJhLWxhYnMvZnJvbnRlbmQvY29tcG9uZW50cy9wb3N0LWNhcmQvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEdtQiIsImZpbGUiOiIvVXNlcnMvbHVrZWhhbWlsdG9uL2RldmVsb3BtZW50L2x5cmEtbGFicy1kZXYvbHlyYS1sYWJzL2Zyb250ZW5kL2NvbXBvbmVudHMvcG9zdC1jYXJkL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCB7IEJBU0VfVEVYVCwgV0VJR0hUIH0gZnJvbSBcIkBzdHlsZS90eXBvZ3JhcGh5XCI7XG5pbXBvcnQge1xuICBCTEFDSyxcbiAgR1VOU01PS0UsXG4gIFdISVRFLFxuICBCTFVTSCxcbiAgRk9DVVNfQkxVU0gsXG4gIFNDT1BSSU9OLFxuICBBTEFCQVNURVIsXG4gIEZPQ1VTX0xBVkVOREVSLFxufSBmcm9tIFwiQHN0eWxlL2NvbG9yc1wiO1xuaW1wb3J0IHsgdG9hc3QgfSBmcm9tIFwicmVhY3QtdG9hc3RpZnlcIjtcbmltcG9ydCB7IHVzZU11dGF0aW9uIH0gZnJvbSBcIkBhcG9sbG8vcmVhY3QtaG9va3NcIjtcbmltcG9ydCB7IEFSQ0hJVkVfUE9TVCB9IGZyb20gXCJAZGF0YS9tdXRhdGlvbnNcIjtcbmltcG9ydCB7IFVOQVJDSElWRV9QT1NUIH0gZnJvbSBcIkBkYXRhL211dGF0aW9uc1wiO1xuaW1wb3J0IHsgVVNFUl9QT1NUUyB9IGZyb20gXCJAZGF0YS9xdWVyaWVzXCI7XG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tIFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCI7XG5pbXBvcnQgeyBmYUFyY2hpdmUsIGZhVGh1bWJ0YWNrIH0gZnJvbSBcIkBmb3J0YXdlc29tZS9wcm8tbGlnaHQtc3ZnLWljb25zXCI7XG5cbmV4cG9ydCBjb25zdCBUSFVNQk5BSUxfRElNRU5TSU9OID0gNjA7XG5cbmNvbnN0IEFjdGlvbnMgPSBzdHlsZWQoXCJkaXZcIikoe1xuICBkaXNwbGF5OiBcImZsZXhcIixcbiAgdHJhbnNpdGlvbjogXCJvcGFjaXR5IC4xc1wiLFxuICBcIiA+IGRpdjpmaXJzdC1vZi10eXBlXCI6IHtcbiAgICBtYXJnaW5MZWZ0OiAwLFxuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSBzdHlsZWQoXCJkaXZcIikoe1xuICBkaXNwbGF5OiBcImZsZXhcIixcbiAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgYm9yZGVyUmFkaXVzOiAzLFxuICBtYXJnaW5Cb3R0b206IDEyLFxuICBiYWNrZ3JvdW5kQ29sb3I6IFdISVRFLFxuICBib3hTaGFkb3c6IFwiMCAxcHggMnB4IDAgcmdiYSgwLDAsMCwuMSlcIixcbiAgcGFkZGluZzogXCIxcmVtXCIsXG4gIFtBY3Rpb25zXToge1xuICAgIG9wYWNpdHk6IDAsXG4gIH0sXG4gIFwiJjpob3ZlclwiOiB7XG4gICAgW0FjdGlvbnNdOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgIH0sXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IEJvZHkgPSBzdHlsZWQoXCJkaXZcIikoe1xuICBkaXNwbGF5OiBcImZsZXhcIixcbiAganVzdGlmeUNvbnRlbnQ6IFwic3BhY2UtYmV0d2VlblwiLFxufSk7XG5cbmNvbnN0IEZvb3RlciA9IHN0eWxlZChcImRpdlwiKSh7XG4gIG1hcmdpblRvcDogXCIuNXJlbVwiLFxuICBkaXNwbGF5OiBcImZsZXhcIixcbiAgZmxleERpcmVjdGlvbjogXCJyb3dcIixcbn0pO1xuXG5jb25zdCBUaHVtYm5haWwgPSBzdHlsZWQoXCJkaXZcIikoXG4gIHtcbiAgICBmbGV4U2hyaW5rOiAwLFxuICAgIGJvcmRlclJhZGl1czogMixcbiAgICBoZWlnaHQ6IFRIVU1CTkFJTF9ESU1FTlNJT04sXG4gICAgd2lkdGg6IFRIVU1CTkFJTF9ESU1FTlNJT04sXG4gICAgbWFyZ2luTGVmdDogXCIxcmVtXCIsXG4gIH0sXG4gICh7IHNyYyB9KSA9PiAoe1xuICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke3NyY30pYCxcbiAgICBiYWNrZ3JvdW5kU2l6ZTogXCJjb3ZlcixhdXRvXCIsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcIjUwJSA1MCUsNTAlIDUwJVwiLFxuICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbnRlbnQgPSBzdHlsZWQoXCJkaXZcIikoe1xuICAvLyBtYXJnaW5MZWZ0OiBcIjFyZW1cIixcbn0pO1xuXG5jb25zdCBUaXRsZSA9IHN0eWxlZChcImFcIikoe1xuICAuLi5CQVNFX1RFWFQsXG4gIGZvbnRTaXplOiBcIjFyZW1cIixcbiAgZm9udFdlaWdodDogV0VJR0hULkJPTEQsXG4gIHdvcmRCcmVhazogXCJicmVhay13b3JkXCIsXG4gIHRleHREZWNvcmF0aW9uOiBcIm5vbmVcIixcbiAgY29sb3I6IEJMQUNLLFxufSk7XG5cbmNvbnN0IE1ldGFMaW5lID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgZGlzcGxheTogXCJmbGV4XCIsXG4gIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG59KTtcblxuY29uc3QgUHVibGlzaGVyTGluZSA9IHN0eWxlZChcImRpdlwiKSh7XG4gIGRpc3BsYXk6IFwiZmxleFwiLFxuICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICBtYXJnaW5Ub3A6IFwiLjI1cmVtXCIsXG59KTtcblxuY29uc3QgTWV0YVRleHQgPSBzdHlsZWQoXCJkaXZcIikoe1xuICBkaXNwbGF5OiBcImZsZXhcIixcbiAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbn0pO1xuXG5jb25zdCBBdXRob3IgPSBzdHlsZWQoXCJkaXZcIikoe1xuICAuLi5CQVNFX1RFWFQsXG4gIGNvbG9yOiBTQ09QUklPTixcbiAgZm9udFdlaWdodDogV0VJR0hULkJPTEQsXG59KTtcblxuY29uc3QgU291cmNlTG9nbyA9IHN0eWxlZChcImRpdlwiKShcbiAge1xuICAgIHdpZHRoOiBcIjFyZW1cIixcbiAgICBoZWlnaHQ6IFwiMXJlbVwiLFxuICB9LFxuICAoeyBzcmMgfSkgPT4gKHtcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtzcmN9KWAsXG4gICAgYmFja2dyb3VuZFNpemU6IFwiY292ZXIsYXV0b1wiLFxuICAgIGJhY2tncm91bmRQb3NpdGlvbjogXCI1MCUgNTAlLDUwJSA1MCVcIixcbiAgICBib3JkZXI6IGAxcHggc29saWQgJHtHVU5TTU9LRX1gLFxuICB9KVxuKTtcblxuY29uc3QgUHVibGlzaGVyID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgLi4uQkFTRV9URVhULFxuICBjb2xvcjogU0NPUFJJT04sXG4gIC8vICAgZm9udFdlaWdodDogV0VJR0hULkJPTEQsXG4gIG1hcmdpbkxlZnQ6IFwiLjVyZW1cIixcbn0pO1xuXG5jb25zdCBEaXZpZGVyID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgaGVpZ2h0OiAxOCxcbiAgZGlzcGxheTogXCJmbGV4XCIsXG4gIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gIFwiJjo6YWZ0ZXJcIjoge1xuICAgIGNvbnRlbnQ6IGAn44O7J2AsXG4gICAgY29sb3I6IFNDT1BSSU9OLFxuICB9LFxufSk7XG5cbmNvbnN0IERhdGVDb250YWluZXIgPSBzdHlsZWQoXCJkaXZcIikoe30pO1xuXG5jb25zdCBOYW1lID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgLi4uQkFTRV9URVhULFxufSk7XG5cbmNvbnN0IEFjdGlvbiA9IHN0eWxlZChcImRpdlwiKShcbiAge1xuICAgIG1hcmdpbkxlZnQ6IFwiLjVyZW1cIixcbiAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuXG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICB3aWR0aDogMjYsXG4gICAgaGVpZ2h0OiAyNixcbiAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCIsXG5cbiAgICB0cmFuc2l0aW9uOiBcImJveC1zaGFkb3cgLjE4c1wiLFxuICB9LFxuICAoe1xuICAgIGFjdGl2ZSA9IGZhbHNlLFxuICAgIGJveFNoYWRvd0NvbG9yLFxuICAgIGdyYWRpZW50U3RhcnRDb2xvcixcbiAgICBncmFkaWVudEVuZENvbG9yLFxuICB9KSA9PiAoe1xuICAgIGJhY2tncm91bmQ6IGFjdGl2ZVxuICAgICAgPyBgbGluZWFyLWdyYWRpZW50KDExMWRlZywgJHtncmFkaWVudFN0YXJ0Q29sb3J9LCAke2dyYWRpZW50RW5kQ29sb3J9KWBcbiAgICAgIDogQUxBQkFTVEVSLFxuICAgIGJveFNoYWRvdzogYDBweCAwcHggMHB4IDJweCAke2FjdGl2ZSA/IGJveFNoYWRvd0NvbG9yIDogV0hJVEV9YCxcbiAgICBcIiY6aG92ZXJcIjoge1xuICAgICAgYm94U2hhZG93OiBgMHB4IDBweCAwcHggMnB4ICR7YWN0aXZlID8gYm94U2hhZG93Q29sb3IgOiBGT0NVU19MQVZFTkRFUn1gLFxuICAgIH0sXG4gIH0pXG4pO1xuXG5jb25zdCBOZXdBY3Rpb24gPSBzdHlsZWQoXCJkaXZcIikoe30pO1xuXG5jb25zdCBBQ1RJT05fVElNRU9VVCA9IDEwMDA7XG5cbmNvbnN0IEljb24gPSBzdHlsZWQoXCJkaXZcIikoe1xuICBmb250U2l6ZTogXCIuODc1cmVtXCIsXG4gIG1hcmdpblRvcDogLTIsXG4gIGxldHRlclNwYWNpbmc6IC01LFxufSk7XG5cbmNvbnN0IFBvc3RDYXJkID0gKHtcbiAgcG9zdDoge1xuICAgIGlkLFxuICAgIGltYWdlLFxuICAgIHRpdGxlLFxuICAgIGFyY2hpdmVkLFxuICAgIHBpbm5lZCxcbiAgICBhdXRob3IsXG4gICAgdXJsLFxuICAgIGxvZ28sXG4gICAgcHVibGlzaGVyLFxuICAgIGRhdGUsXG4gIH0sXG4gIHBvc3QsXG59KSA9PiB7XG4gIGNvbnN0IFthcmNoaXZlUG9zdF0gPSB1c2VNdXRhdGlvbihBUkNISVZFX1BPU1QsIHtcbiAgICB1cGRhdGU6IChjYWNoZSwgeyBkYXRhOiB7IGFyY2hpdmVQb3N0OiBwb3N0IH0gfSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJET05FXCIsIGNhY2hlKTtcbiAgICAgIC8vIFJlbW92ZSBwb3N0IGZyb20gcmVhZGluZyBsaXN0IHF1ZXJ5XG4gICAgICBjb25zdCB7IHVzZXJQb3N0czogcG9zdHMgfSA9IGNhY2hlLnJlYWRRdWVyeSh7XG4gICAgICAgIHF1ZXJ5OiBVU0VSX1BPU1RTLFxuICAgICAgICB2YXJpYWJsZXM6IHsgYXJjaGl2ZWQ6IGZhbHNlIH0sXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGluZGV4ID0gcG9zdHMuZmluZEluZGV4KChwb3N0KSA9PiBwb3N0LmlkID09PSBpZCk7XG4gICAgICBjYWNoZS53cml0ZVF1ZXJ5KHtcbiAgICAgICAgcXVlcnk6IFVTRVJfUE9TVFMsXG4gICAgICAgIHZhcmlhYmxlczogeyBhcmNoaXZlZDogZmFsc2UgfSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHVzZXJQb3N0czogW1xuICAgICAgICAgICAgLi4ucG9zdHMuc2xpY2UoMCwgaW5kZXgpLFxuICAgICAgICAgICAgLi4ucG9zdHMuc2xpY2UoaW5kZXggKyAxLCBwb3N0cy5sZW5ndGgpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIC8vIEFkZCBwb3N0IHRvIGFyY2hpdmVcbiAgICAgIGNvbnN0IHF1ZXJ5SW5DYWNoZSA9XG4gICAgICAgIGNhY2hlLmRhdGEuZGF0YS5ST09UX1FVRVJZWyd1c2VyUG9zdHMoe1wiYXJjaGl2ZWRcIjp0cnVlfSknXTtcbiAgICAgIGlmIChxdWVyeUluQ2FjaGUpIHtcbiAgICAgICAgY29uc3QgeyB1c2VyUG9zdHM6IGFyY2hpdmVkUG9zdHMgfSA9IGNhY2hlLnJlYWRRdWVyeSh7XG4gICAgICAgICAgcXVlcnk6IFVTRVJfUE9TVFMsXG4gICAgICAgICAgdmFyaWFibGVzOiB7IGFyY2hpdmVkOiB0cnVlIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjYWNoZS53cml0ZVF1ZXJ5KHtcbiAgICAgICAgICBxdWVyeTogVVNFUl9QT1NUUyxcbiAgICAgICAgICB2YXJpYWJsZXM6IHsgYXJjaGl2ZWQ6IHRydWUgfSxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB1c2VyUG9zdHM6IFtwb3N0LCAuLi5hcmNoaXZlZFBvc3RzXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgb25FcnJvcjogKCkgPT4ge1xuICAgICAgdG9hc3QuZXJyb3IoXCLwn5izVW5hYmxlIHRvIGFyY2hpdmUgcG9zdCBhdCB0aGlzIHRpbWUuXCIsIHtcbiAgICAgICAgcG9zaXRpb246IFwiYm90dG9tLWxlZnRcIixcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IFt1bmFyY2hpdmVQb3N0XSA9IHVzZU11dGF0aW9uKFVOQVJDSElWRV9QT1NULCB7XG4gICAgdXBkYXRlOiAoY2FjaGUsIHsgZGF0YTogeyB1bmFyY2hpdmVQb3N0OiBwb3N0IH0gfSkgPT4ge1xuICAgICAgLy8gUmVtb3ZlIHBvc3QgZnJvbSBhcmNoaXZlIHF1ZXJ5XG4gICAgICBjb25zdCB7IHVzZXJQb3N0czogYXJjaGl2ZWRQb3N0cyB9ID0gY2FjaGUucmVhZFF1ZXJ5KHtcbiAgICAgICAgcXVlcnk6IFVTRVJfUE9TVFMsXG4gICAgICAgIHZhcmlhYmxlczogeyBhcmNoaXZlZDogdHJ1ZSB9LFxuICAgICAgfSk7XG4gICAgICBjb25zdCBpbmRleCA9IGFyY2hpdmVkUG9zdHMuZmluZEluZGV4KFxuICAgICAgICAoYXJjaGl2ZWRQb3N0KSA9PiBhcmNoaXZlZFBvc3QuaWQgPT09IGlkXG4gICAgICApO1xuICAgICAgY2FjaGUud3JpdGVRdWVyeSh7XG4gICAgICAgIHF1ZXJ5OiBVU0VSX1BPU1RTLFxuICAgICAgICB2YXJpYWJsZXM6IHsgYXJjaGl2ZWQ6IHRydWUgfSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHVzZXJQb3N0czogW1xuICAgICAgICAgICAgLi4uYXJjaGl2ZWRQb3N0cy5zbGljZSgwLCBpbmRleCksXG4gICAgICAgICAgICAuLi5hcmNoaXZlZFBvc3RzLnNsaWNlKGluZGV4ICsgMSwgYXJjaGl2ZWRQb3N0cy5sZW5ndGgpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIC8vIEFkZCBwb3N0IHRvIGFyY2hpdmVcbiAgICAgIGNvbnN0IHF1ZXJ5SW5DYWNoZSA9XG4gICAgICAgIGNhY2hlLmRhdGEuZGF0YS5ST09UX1FVRVJZWyd1c2VyUG9zdHMoe1wiYXJjaGl2ZWRcIjpmYWxzZX0pJ107XG4gICAgICBpZiAocXVlcnlJbkNhY2hlKSB7XG4gICAgICAgIGNvbnN0IHsgdXNlclBvc3RzOiBwb3N0cyB9ID0gY2FjaGUucmVhZFF1ZXJ5KHtcbiAgICAgICAgICBxdWVyeTogVVNFUl9QT1NUUyxcbiAgICAgICAgICB2YXJpYWJsZXM6IHsgYXJjaGl2ZWQ6IGZhbHNlIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjYWNoZS53cml0ZVF1ZXJ5KHtcbiAgICAgICAgICBxdWVyeTogVVNFUl9QT1NUUyxcbiAgICAgICAgICB2YXJpYWJsZXM6IHsgYXJjaGl2ZWQ6IGZhbHNlIH0sXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdXNlclBvc3RzOiBbcG9zdCwgLi4ucG9zdHNdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkVycm9yOiAoKSA9PiB7XG4gICAgICB0b2FzdC5lcnJvcihcIvCfmLNVbmFibGUgdG8gdW5hcmNoaXZlIHBvc3QgYXQgdGhpcyB0aW1lLlwiLCB7XG4gICAgICAgIHBvc2l0aW9uOiBcImJvdHRvbS1sZWZ0XCIsXG4gICAgICB9KTtcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBBQ1RJT05TID0gW1xuICAgIHtcbiAgICAgIGljb246IFwi8J+TjFwiLFxuICAgICAgYm94U2hhZG93Q29sb3I6IFwiI2QwZTNmZlwiLFxuICAgICAgZ3JhZGllbnRTdGFydENvbG9yOiBcIiNjNWQ5ZjhcIixcbiAgICAgIGdyYWRpZW50RW5kQ29sb3I6IFwiIzkwYmJmZlwiLFxuICAgICAgYWN0aXZlS2V5OiBcInBpbm5lZFwiLFxuICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNsaWNrZWQgcGluXCIpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGljb246IFwi8J+SvlwiLFxuICAgICAgYm94U2hhZG93Q29sb3I6IFwiI2NmYzlmM1wiLFxuICAgICAgZ3JhZGllbnRTdGFydENvbG9yOiBcIiNjYWMzZjNcIixcbiAgICAgIGdyYWRpZW50RW5kQ29sb3I6IFwiIzk1OGFlZVwiLFxuICAgICAgYWN0aXZlS2V5OiBcImFyY2hpdmVkXCIsXG4gICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGZ1bmMgPSBhcmNoaXZlZCA/IHVuYXJjaGl2ZVBvc3QgOiBhcmNoaXZlUG9zdDtcbiAgICAgICAgZnVuYyh7XG4gICAgICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgICAgICBwb3N0SWQ6IGlkLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9LFxuICBdO1xuXG4gIGNvbnN0IHNob3dHaXZlQXdhcmQgPSB0cnVlO1xuXG4gIHJldHVybiAoXG4gICAgPENvbnRhaW5lcj5cbiAgICAgIDxCb2R5PlxuICAgICAgICA8Q29udGVudD5cbiAgICAgICAgICA8VGl0bGUgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj17dXJsfT5cbiAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICA8L1RpdGxlPlxuICAgICAgICAgIDxQdWJsaXNoZXJMaW5lPlxuICAgICAgICAgICAgPFNvdXJjZUxvZ28gc3JjPXtsb2dvfSAvPlxuICAgICAgICAgICAgPFB1Ymxpc2hlcj57cHVibGlzaGVyfTwvUHVibGlzaGVyPlxuICAgICAgICAgIDwvUHVibGlzaGVyTGluZT5cbiAgICAgICAgPC9Db250ZW50PlxuICAgICAgICB7aW1hZ2UgJiYgPFRodW1ibmFpbCBzcmM9e2ltYWdlfSAvPn1cbiAgICAgIDwvQm9keT5cbiAgICAgIDxGb290ZXI+XG4gICAgICAgIHtzaG93R2l2ZUF3YXJkICYmIDxOZXdBY3Rpb24+R2l2ZSBBd2FyZDwvTmV3QWN0aW9uPn1cblxuICAgICAgICB7LyogPEFjdGlvbnM+XG4gICAgICAgICAge0FDVElPTlMubWFwKFxuICAgICAgICAgICAgKFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWNvbixcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2ssXG4gICAgICAgICAgICAgICAgYm94U2hhZG93Q29sb3IsXG4gICAgICAgICAgICAgICAgZ3JhZGllbnRTdGFydENvbG9yLFxuICAgICAgICAgICAgICAgIGdyYWRpZW50RW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgYWN0aXZlS2V5LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBpXG4gICAgICAgICAgICApID0+IChcbiAgICAgICAgICAgICAgPEFjdGlvblxuICAgICAgICAgICAgICAgIGFjdGl2ZT17cG9zdFthY3RpdmVLZXldfVxuICAgICAgICAgICAgICAgIGJveFNoYWRvd0NvbG9yPXtib3hTaGFkb3dDb2xvcn1cbiAgICAgICAgICAgICAgICBncmFkaWVudFN0YXJ0Q29sb3I9e2dyYWRpZW50U3RhcnRDb2xvcn1cbiAgICAgICAgICAgICAgICBncmFkaWVudEVuZENvbG9yPXtncmFkaWVudEVuZENvbG9yfVxuICAgICAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNsaWNrKGlkKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxJY29uPntpY29ufTwvSWNvbj5cbiAgICAgICAgICAgICAgPC9BY3Rpb24+XG4gICAgICAgICAgICApXG4gICAgICAgICAgKX1cbiAgICAgICAgPC9BY3Rpb25zPiAqL31cbiAgICAgIDwvRm9vdGVyPlxuICAgIDwvQ29udGFpbmVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9zdENhcmQ7XG4iXX0= */\");\n\nvar Publisher = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth212\",\n  label: \"Publisher\"\n})(_objectSpread(_objectSpread({}, BASE_TEXT), {}, {\n  color: SCOPRION,\n  //   fontWeight: WEIGHT.BOLD,\n  marginLeft: \".5rem\"\n}), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar Divider = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth213\",\n  label: \"Divider\"\n})({\n  height: 18,\n  display: \"flex\",\n  alignItems: \"center\",\n  \"&::after\": {\n    content: \"'\\u30FB'\",\n    color: SCOPRION\n  }\n}, false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar DateContainer = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth214\",\n  label: \"DateContainer\"\n})(false ? {\n  name: \"0\",\n  styles: \"\"\n} : {\n  name: \"0\",\n  styles: \"\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar Name = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth215\",\n  label: \"Name\"\n})(_objectSpread({}, BASE_TEXT), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWtlaGFtaWx0b24vZGV2ZWxvcG1lbnQvbHlyYS1sYWJzLWRldi9seXJhLWxhYnMvZnJvbnRlbmQvY29tcG9uZW50cy9wb3N0LWNhcmQvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOElhIiwiZmlsZSI6Ii9Vc2Vycy9sdWtlaGFtaWx0b24vZGV2ZWxvcG1lbnQvbHlyYS1sYWJzLWRldi9seXJhLWxhYnMvZnJvbnRlbmQvY29tcG9uZW50cy9wb3N0LWNhcmQvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IHsgQkFTRV9URVhULCBXRUlHSFQgfSBmcm9tIFwiQHN0eWxlL3R5cG9ncmFwaHlcIjtcbmltcG9ydCB7XG4gIEJMQUNLLFxuICBHVU5TTU9LRSxcbiAgV0hJVEUsXG4gIEJMVVNILFxuICBGT0NVU19CTFVTSCxcbiAgU0NPUFJJT04sXG4gIEFMQUJBU1RFUixcbiAgRk9DVVNfTEFWRU5ERVIsXG59IGZyb20gXCJAc3R5bGUvY29sb3JzXCI7XG5pbXBvcnQgeyB0b2FzdCB9IGZyb20gXCJyZWFjdC10b2FzdGlmeVwiO1xuaW1wb3J0IHsgdXNlTXV0YXRpb24gfSBmcm9tIFwiQGFwb2xsby9yZWFjdC1ob29rc1wiO1xuaW1wb3J0IHsgQVJDSElWRV9QT1NUIH0gZnJvbSBcIkBkYXRhL211dGF0aW9uc1wiO1xuaW1wb3J0IHsgVU5BUkNISVZFX1BPU1QgfSBmcm9tIFwiQGRhdGEvbXV0YXRpb25zXCI7XG5pbXBvcnQgeyBVU0VSX1BPU1RTIH0gZnJvbSBcIkBkYXRhL3F1ZXJpZXNcIjtcbmltcG9ydCB7IEZvbnRBd2Vzb21lSWNvbiB9IGZyb20gXCJAZm9ydGF3ZXNvbWUvcmVhY3QtZm9udGF3ZXNvbWVcIjtcbmltcG9ydCB7IGZhQXJjaGl2ZSwgZmFUaHVtYnRhY2sgfSBmcm9tIFwiQGZvcnRhd2Vzb21lL3Byby1saWdodC1zdmctaWNvbnNcIjtcblxuZXhwb3J0IGNvbnN0IFRIVU1CTkFJTF9ESU1FTlNJT04gPSA2MDtcblxuY29uc3QgQWN0aW9ucyA9IHN0eWxlZChcImRpdlwiKSh7XG4gIGRpc3BsYXk6IFwiZmxleFwiLFxuICB0cmFuc2l0aW9uOiBcIm9wYWNpdHkgLjFzXCIsXG4gIFwiID4gZGl2OmZpcnN0LW9mLXR5cGVcIjoge1xuICAgIG1hcmdpbkxlZnQ6IDAsXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IENvbnRhaW5lciA9IHN0eWxlZChcImRpdlwiKSh7XG4gIGRpc3BsYXk6IFwiZmxleFwiLFxuICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICBib3JkZXJSYWRpdXM6IDMsXG4gIG1hcmdpbkJvdHRvbTogMTIsXG4gIGJhY2tncm91bmRDb2xvcjogV0hJVEUsXG4gIGJveFNoYWRvdzogXCIwIDFweCAycHggMCByZ2JhKDAsMCwwLC4xKVwiLFxuICBwYWRkaW5nOiBcIjFyZW1cIixcbiAgW0FjdGlvbnNdOiB7XG4gICAgb3BhY2l0eTogMCxcbiAgfSxcbiAgXCImOmhvdmVyXCI6IHtcbiAgICBbQWN0aW9uc106IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgfSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgQm9keSA9IHN0eWxlZChcImRpdlwiKSh7XG4gIGRpc3BsYXk6IFwiZmxleFwiLFxuICBqdXN0aWZ5Q29udGVudDogXCJzcGFjZS1iZXR3ZWVuXCIsXG59KTtcblxuY29uc3QgRm9vdGVyID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgbWFyZ2luVG9wOiBcIi41cmVtXCIsXG4gIGRpc3BsYXk6IFwiZmxleFwiLFxuICBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLFxufSk7XG5cbmNvbnN0IFRodW1ibmFpbCA9IHN0eWxlZChcImRpdlwiKShcbiAge1xuICAgIGZsZXhTaHJpbms6IDAsXG4gICAgYm9yZGVyUmFkaXVzOiAyLFxuICAgIGhlaWdodDogVEhVTUJOQUlMX0RJTUVOU0lPTixcbiAgICB3aWR0aDogVEhVTUJOQUlMX0RJTUVOU0lPTixcbiAgICBtYXJnaW5MZWZ0OiBcIjFyZW1cIixcbiAgfSxcbiAgKHsgc3JjIH0pID0+ICh7XG4gICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7c3JjfSlgLFxuICAgIGJhY2tncm91bmRTaXplOiBcImNvdmVyLGF1dG9cIixcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFwiNTAlIDUwJSw1MCUgNTAlXCIsXG4gIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgQ29udGVudCA9IHN0eWxlZChcImRpdlwiKSh7XG4gIC8vIG1hcmdpbkxlZnQ6IFwiMXJlbVwiLFxufSk7XG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkKFwiYVwiKSh7XG4gIC4uLkJBU0VfVEVYVCxcbiAgZm9udFNpemU6IFwiMXJlbVwiLFxuICBmb250V2VpZ2h0OiBXRUlHSFQuQk9MRCxcbiAgd29yZEJyZWFrOiBcImJyZWFrLXdvcmRcIixcbiAgdGV4dERlY29yYXRpb246IFwibm9uZVwiLFxuICBjb2xvcjogQkxBQ0ssXG59KTtcblxuY29uc3QgTWV0YUxpbmUgPSBzdHlsZWQoXCJkaXZcIikoe1xuICBkaXNwbGF5OiBcImZsZXhcIixcbiAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbn0pO1xuXG5jb25zdCBQdWJsaXNoZXJMaW5lID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgZGlzcGxheTogXCJmbGV4XCIsXG4gIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gIG1hcmdpblRvcDogXCIuMjVyZW1cIixcbn0pO1xuXG5jb25zdCBNZXRhVGV4dCA9IHN0eWxlZChcImRpdlwiKSh7XG4gIGRpc3BsYXk6IFwiZmxleFwiLFxuICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxufSk7XG5cbmNvbnN0IEF1dGhvciA9IHN0eWxlZChcImRpdlwiKSh7XG4gIC4uLkJBU0VfVEVYVCxcbiAgY29sb3I6IFNDT1BSSU9OLFxuICBmb250V2VpZ2h0OiBXRUlHSFQuQk9MRCxcbn0pO1xuXG5jb25zdCBTb3VyY2VMb2dvID0gc3R5bGVkKFwiZGl2XCIpKFxuICB7XG4gICAgd2lkdGg6IFwiMXJlbVwiLFxuICAgIGhlaWdodDogXCIxcmVtXCIsXG4gIH0sXG4gICh7IHNyYyB9KSA9PiAoe1xuICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke3NyY30pYCxcbiAgICBiYWNrZ3JvdW5kU2l6ZTogXCJjb3ZlcixhdXRvXCIsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcIjUwJSA1MCUsNTAlIDUwJVwiLFxuICAgIGJvcmRlcjogYDFweCBzb2xpZCAke0dVTlNNT0tFfWAsXG4gIH0pXG4pO1xuXG5jb25zdCBQdWJsaXNoZXIgPSBzdHlsZWQoXCJkaXZcIikoe1xuICAuLi5CQVNFX1RFWFQsXG4gIGNvbG9yOiBTQ09QUklPTixcbiAgLy8gICBmb250V2VpZ2h0OiBXRUlHSFQuQk9MRCxcbiAgbWFyZ2luTGVmdDogXCIuNXJlbVwiLFxufSk7XG5cbmNvbnN0IERpdmlkZXIgPSBzdHlsZWQoXCJkaXZcIikoe1xuICBoZWlnaHQ6IDE4LFxuICBkaXNwbGF5OiBcImZsZXhcIixcbiAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgXCImOjphZnRlclwiOiB7XG4gICAgY29udGVudDogYCfjg7snYCxcbiAgICBjb2xvcjogU0NPUFJJT04sXG4gIH0sXG59KTtcblxuY29uc3QgRGF0ZUNvbnRhaW5lciA9IHN0eWxlZChcImRpdlwiKSh7fSk7XG5cbmNvbnN0IE5hbWUgPSBzdHlsZWQoXCJkaXZcIikoe1xuICAuLi5CQVNFX1RFWFQsXG59KTtcblxuY29uc3QgQWN0aW9uID0gc3R5bGVkKFwiZGl2XCIpKFxuICB7XG4gICAgbWFyZ2luTGVmdDogXCIuNXJlbVwiLFxuICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXG5cbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgIHdpZHRoOiAyNixcbiAgICBoZWlnaHQ6IDI2LFxuICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcblxuICAgIHRyYW5zaXRpb246IFwiYm94LXNoYWRvdyAuMThzXCIsXG4gIH0sXG4gICh7XG4gICAgYWN0aXZlID0gZmFsc2UsXG4gICAgYm94U2hhZG93Q29sb3IsXG4gICAgZ3JhZGllbnRTdGFydENvbG9yLFxuICAgIGdyYWRpZW50RW5kQ29sb3IsXG4gIH0pID0+ICh7XG4gICAgYmFja2dyb3VuZDogYWN0aXZlXG4gICAgICA/IGBsaW5lYXItZ3JhZGllbnQoMTExZGVnLCAke2dyYWRpZW50U3RhcnRDb2xvcn0sICR7Z3JhZGllbnRFbmRDb2xvcn0pYFxuICAgICAgOiBBTEFCQVNURVIsXG4gICAgYm94U2hhZG93OiBgMHB4IDBweCAwcHggMnB4ICR7YWN0aXZlID8gYm94U2hhZG93Q29sb3IgOiBXSElURX1gLFxuICAgIFwiJjpob3ZlclwiOiB7XG4gICAgICBib3hTaGFkb3c6IGAwcHggMHB4IDBweCAycHggJHthY3RpdmUgPyBib3hTaGFkb3dDb2xvciA6IEZPQ1VTX0xBVkVOREVSfWAsXG4gICAgfSxcbiAgfSlcbik7XG5cbmNvbnN0IE5ld0FjdGlvbiA9IHN0eWxlZChcImRpdlwiKSh7fSk7XG5cbmNvbnN0IEFDVElPTl9USU1FT1VUID0gMTAwMDtcblxuY29uc3QgSWNvbiA9IHN0eWxlZChcImRpdlwiKSh7XG4gIGZvbnRTaXplOiBcIi44NzVyZW1cIixcbiAgbWFyZ2luVG9wOiAtMixcbiAgbGV0dGVyU3BhY2luZzogLTUsXG59KTtcblxuY29uc3QgUG9zdENhcmQgPSAoe1xuICBwb3N0OiB7XG4gICAgaWQsXG4gICAgaW1hZ2UsXG4gICAgdGl0bGUsXG4gICAgYXJjaGl2ZWQsXG4gICAgcGlubmVkLFxuICAgIGF1dGhvcixcbiAgICB1cmwsXG4gICAgbG9nbyxcbiAgICBwdWJsaXNoZXIsXG4gICAgZGF0ZSxcbiAgfSxcbiAgcG9zdCxcbn0pID0+IHtcbiAgY29uc3QgW2FyY2hpdmVQb3N0XSA9IHVzZU11dGF0aW9uKEFSQ0hJVkVfUE9TVCwge1xuICAgIHVwZGF0ZTogKGNhY2hlLCB7IGRhdGE6IHsgYXJjaGl2ZVBvc3Q6IHBvc3QgfSB9KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcIkRPTkVcIiwgY2FjaGUpO1xuICAgICAgLy8gUmVtb3ZlIHBvc3QgZnJvbSByZWFkaW5nIGxpc3QgcXVlcnlcbiAgICAgIGNvbnN0IHsgdXNlclBvc3RzOiBwb3N0cyB9ID0gY2FjaGUucmVhZFF1ZXJ5KHtcbiAgICAgICAgcXVlcnk6IFVTRVJfUE9TVFMsXG4gICAgICAgIHZhcmlhYmxlczogeyBhcmNoaXZlZDogZmFsc2UgfSxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgaW5kZXggPSBwb3N0cy5maW5kSW5kZXgoKHBvc3QpID0+IHBvc3QuaWQgPT09IGlkKTtcbiAgICAgIGNhY2hlLndyaXRlUXVlcnkoe1xuICAgICAgICBxdWVyeTogVVNFUl9QT1NUUyxcbiAgICAgICAgdmFyaWFibGVzOiB7IGFyY2hpdmVkOiBmYWxzZSB9LFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgdXNlclBvc3RzOiBbXG4gICAgICAgICAgICAuLi5wb3N0cy5zbGljZSgwLCBpbmRleCksXG4gICAgICAgICAgICAuLi5wb3N0cy5zbGljZShpbmRleCArIDEsIHBvc3RzLmxlbmd0aCksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgLy8gQWRkIHBvc3QgdG8gYXJjaGl2ZVxuICAgICAgY29uc3QgcXVlcnlJbkNhY2hlID1cbiAgICAgICAgY2FjaGUuZGF0YS5kYXRhLlJPT1RfUVVFUllbJ3VzZXJQb3N0cyh7XCJhcmNoaXZlZFwiOnRydWV9KSddO1xuICAgICAgaWYgKHF1ZXJ5SW5DYWNoZSkge1xuICAgICAgICBjb25zdCB7IHVzZXJQb3N0czogYXJjaGl2ZWRQb3N0cyB9ID0gY2FjaGUucmVhZFF1ZXJ5KHtcbiAgICAgICAgICBxdWVyeTogVVNFUl9QT1NUUyxcbiAgICAgICAgICB2YXJpYWJsZXM6IHsgYXJjaGl2ZWQ6IHRydWUgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNhY2hlLndyaXRlUXVlcnkoe1xuICAgICAgICAgIHF1ZXJ5OiBVU0VSX1BPU1RTLFxuICAgICAgICAgIHZhcmlhYmxlczogeyBhcmNoaXZlZDogdHJ1ZSB9LFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHVzZXJQb3N0czogW3Bvc3QsIC4uLmFyY2hpdmVkUG9zdHNdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkVycm9yOiAoKSA9PiB7XG4gICAgICB0b2FzdC5lcnJvcihcIvCfmLNVbmFibGUgdG8gYXJjaGl2ZSBwb3N0IGF0IHRoaXMgdGltZS5cIiwge1xuICAgICAgICBwb3NpdGlvbjogXCJib3R0b20tbGVmdFwiLFxuICAgICAgfSk7XG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3QgW3VuYXJjaGl2ZVBvc3RdID0gdXNlTXV0YXRpb24oVU5BUkNISVZFX1BPU1QsIHtcbiAgICB1cGRhdGU6IChjYWNoZSwgeyBkYXRhOiB7IHVuYXJjaGl2ZVBvc3Q6IHBvc3QgfSB9KSA9PiB7XG4gICAgICAvLyBSZW1vdmUgcG9zdCBmcm9tIGFyY2hpdmUgcXVlcnlcbiAgICAgIGNvbnN0IHsgdXNlclBvc3RzOiBhcmNoaXZlZFBvc3RzIH0gPSBjYWNoZS5yZWFkUXVlcnkoe1xuICAgICAgICBxdWVyeTogVVNFUl9QT1NUUyxcbiAgICAgICAgdmFyaWFibGVzOiB7IGFyY2hpdmVkOiB0cnVlIH0sXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGluZGV4ID0gYXJjaGl2ZWRQb3N0cy5maW5kSW5kZXgoXG4gICAgICAgIChhcmNoaXZlZFBvc3QpID0+IGFyY2hpdmVkUG9zdC5pZCA9PT0gaWRcbiAgICAgICk7XG4gICAgICBjYWNoZS53cml0ZVF1ZXJ5KHtcbiAgICAgICAgcXVlcnk6IFVTRVJfUE9TVFMsXG4gICAgICAgIHZhcmlhYmxlczogeyBhcmNoaXZlZDogdHJ1ZSB9LFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgdXNlclBvc3RzOiBbXG4gICAgICAgICAgICAuLi5hcmNoaXZlZFBvc3RzLnNsaWNlKDAsIGluZGV4KSxcbiAgICAgICAgICAgIC4uLmFyY2hpdmVkUG9zdHMuc2xpY2UoaW5kZXggKyAxLCBhcmNoaXZlZFBvc3RzLmxlbmd0aCksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgLy8gQWRkIHBvc3QgdG8gYXJjaGl2ZVxuICAgICAgY29uc3QgcXVlcnlJbkNhY2hlID1cbiAgICAgICAgY2FjaGUuZGF0YS5kYXRhLlJPT1RfUVVFUllbJ3VzZXJQb3N0cyh7XCJhcmNoaXZlZFwiOmZhbHNlfSknXTtcbiAgICAgIGlmIChxdWVyeUluQ2FjaGUpIHtcbiAgICAgICAgY29uc3QgeyB1c2VyUG9zdHM6IHBvc3RzIH0gPSBjYWNoZS5yZWFkUXVlcnkoe1xuICAgICAgICAgIHF1ZXJ5OiBVU0VSX1BPU1RTLFxuICAgICAgICAgIHZhcmlhYmxlczogeyBhcmNoaXZlZDogZmFsc2UgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNhY2hlLndyaXRlUXVlcnkoe1xuICAgICAgICAgIHF1ZXJ5OiBVU0VSX1BPU1RTLFxuICAgICAgICAgIHZhcmlhYmxlczogeyBhcmNoaXZlZDogZmFsc2UgfSxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB1c2VyUG9zdHM6IFtwb3N0LCAuLi5wb3N0c10sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIG9uRXJyb3I6ICgpID0+IHtcbiAgICAgIHRvYXN0LmVycm9yKFwi8J+Ys1VuYWJsZSB0byB1bmFyY2hpdmUgcG9zdCBhdCB0aGlzIHRpbWUuXCIsIHtcbiAgICAgICAgcG9zaXRpb246IFwiYm90dG9tLWxlZnRcIixcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IEFDVElPTlMgPSBbXG4gICAge1xuICAgICAgaWNvbjogXCLwn5OMXCIsXG4gICAgICBib3hTaGFkb3dDb2xvcjogXCIjZDBlM2ZmXCIsXG4gICAgICBncmFkaWVudFN0YXJ0Q29sb3I6IFwiI2M1ZDlmOFwiLFxuICAgICAgZ3JhZGllbnRFbmRDb2xvcjogXCIjOTBiYmZmXCIsXG4gICAgICBhY3RpdmVLZXk6IFwicGlubmVkXCIsXG4gICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY2xpY2tlZCBwaW5cIik7XG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgaWNvbjogXCLwn5K+XCIsXG4gICAgICBib3hTaGFkb3dDb2xvcjogXCIjY2ZjOWYzXCIsXG4gICAgICBncmFkaWVudFN0YXJ0Q29sb3I6IFwiI2NhYzNmM1wiLFxuICAgICAgZ3JhZGllbnRFbmRDb2xvcjogXCIjOTU4YWVlXCIsXG4gICAgICBhY3RpdmVLZXk6IFwiYXJjaGl2ZWRcIixcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgY29uc3QgZnVuYyA9IGFyY2hpdmVkID8gdW5hcmNoaXZlUG9zdCA6IGFyY2hpdmVQb3N0O1xuICAgICAgICBmdW5jKHtcbiAgICAgICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgICAgIHBvc3RJZDogaWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgIH0sXG4gIF07XG5cbiAgY29uc3Qgc2hvd0dpdmVBd2FyZCA9IHRydWU7XG5cbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyPlxuICAgICAgPEJvZHk+XG4gICAgICAgIDxDb250ZW50PlxuICAgICAgICAgIDxUaXRsZSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPXt1cmx9PlxuICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgIDwvVGl0bGU+XG4gICAgICAgICAgPFB1Ymxpc2hlckxpbmU+XG4gICAgICAgICAgICA8U291cmNlTG9nbyBzcmM9e2xvZ299IC8+XG4gICAgICAgICAgICA8UHVibGlzaGVyPntwdWJsaXNoZXJ9PC9QdWJsaXNoZXI+XG4gICAgICAgICAgPC9QdWJsaXNoZXJMaW5lPlxuICAgICAgICA8L0NvbnRlbnQ+XG4gICAgICAgIHtpbWFnZSAmJiA8VGh1bWJuYWlsIHNyYz17aW1hZ2V9IC8+fVxuICAgICAgPC9Cb2R5PlxuICAgICAgPEZvb3Rlcj5cbiAgICAgICAge3Nob3dHaXZlQXdhcmQgJiYgPE5ld0FjdGlvbj5HaXZlIEF3YXJkPC9OZXdBY3Rpb24+fVxuXG4gICAgICAgIHsvKiA8QWN0aW9ucz5cbiAgICAgICAgICB7QUNUSU9OUy5tYXAoXG4gICAgICAgICAgICAoXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpY29uLFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgb25DbGljayxcbiAgICAgICAgICAgICAgICBib3hTaGFkb3dDb2xvcixcbiAgICAgICAgICAgICAgICBncmFkaWVudFN0YXJ0Q29sb3IsXG4gICAgICAgICAgICAgICAgZ3JhZGllbnRFbmRDb2xvcixcbiAgICAgICAgICAgICAgICBhY3RpdmVLZXksXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICkgPT4gKFxuICAgICAgICAgICAgICA8QWN0aW9uXG4gICAgICAgICAgICAgICAgYWN0aXZlPXtwb3N0W2FjdGl2ZUtleV19XG4gICAgICAgICAgICAgICAgYm94U2hhZG93Q29sb3I9e2JveFNoYWRvd0NvbG9yfVxuICAgICAgICAgICAgICAgIGdyYWRpZW50U3RhcnRDb2xvcj17Z3JhZGllbnRTdGFydENvbG9yfVxuICAgICAgICAgICAgICAgIGdyYWRpZW50RW5kQ29sb3I9e2dyYWRpZW50RW5kQ29sb3J9XG4gICAgICAgICAgICAgICAga2V5PXtpfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2xpY2soaWQpfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEljb24+e2ljb259PC9JY29uPlxuICAgICAgICAgICAgICA8L0FjdGlvbj5cbiAgICAgICAgICAgIClcbiAgICAgICAgICApfVxuICAgICAgICA8L0FjdGlvbnM+ICovfVxuICAgICAgPC9Gb290ZXI+XG4gICAgPC9Db250YWluZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQb3N0Q2FyZDtcbiJdfQ== */\");\n\nvar Action = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth216\",\n  label: \"Action\"\n})(\"margin-left:.5rem;cursor:pointer;display:flex;align-items:center;justify-content:center;width:26px;height:26px;border-radius:50%;transition:box-shadow .18s;\", function (_ref3) {\n  var _ref3$active = _ref3.active,\n      active = _ref3$active === void 0 ? false : _ref3$active,\n      boxShadowColor = _ref3.boxShadowColor,\n      gradientStartColor = _ref3.gradientStartColor,\n      gradientEndColor = _ref3.gradientEndColor;\n  return {\n    background: active ? \"linear-gradient(111deg, \".concat(gradientStartColor, \", \").concat(gradientEndColor, \")\") : ALABASTER,\n    boxShadow: \"0px 0px 0px 2px \".concat(active ? boxShadowColor : WHITE),\n    \"&:hover\": {\n      boxShadow: \"0px 0px 0px 2px \".concat(active ? boxShadowColor : FOCUS_LAVENDER)\n    }\n  };\n}, false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar NewAction = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth217\",\n  label: \"NewAction\"\n})(false ? {\n  name: \"0\",\n  styles: \"\"\n} : {\n  name: \"0\",\n  styles: \"\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar ACTION_TIMEOUT = 1000;\n\nvar Icon = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth218\",\n  label: \"Icon\"\n})({\n  fontSize: \".875rem\",\n  marginTop: -2,\n  letterSpacing: -5\n}, false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar PostCard = function PostCard(_ref4) {\n  _s();\n\n  var _ref4$post = _ref4.post,\n      id = _ref4$post.id,\n      image = _ref4$post.image,\n      title = _ref4$post.title,\n      archived = _ref4$post.archived,\n      pinned = _ref4$post.pinned,\n      author = _ref4$post.author,\n      url = _ref4$post.url,\n      logo = _ref4$post.logo,\n      publisher = _ref4$post.publisher,\n      date = _ref4$post.date,\n      post = _ref4.post;\n\n  var _useMutation = useMutation(ARCHIVE_POST, {\n    update: function update(cache, _ref5) {\n      var post = _ref5.data.archivePost;\n      console.log(\"DONE\", cache); // Remove post from reading list query\n\n      var _cache$readQuery = cache.readQuery({\n        query: USER_POSTS,\n        variables: {\n          archived: false\n        }\n      }),\n          posts = _cache$readQuery.userPosts;\n\n      var index = posts.findIndex(function (post) {\n        return post.id === id;\n      });\n      cache.writeQuery({\n        query: USER_POSTS,\n        variables: {\n          archived: false\n        },\n        data: {\n          userPosts: [].concat(_toConsumableArray(posts.slice(0, index)), _toConsumableArray(posts.slice(index + 1, posts.length)))\n        }\n      }); // Add post to archive\n\n      var queryInCache = cache.data.data.ROOT_QUERY['userPosts({\"archived\":true})'];\n\n      if (queryInCache) {\n        var _cache$readQuery2 = cache.readQuery({\n          query: USER_POSTS,\n          variables: {\n            archived: true\n          }\n        }),\n            archivedPosts = _cache$readQuery2.userPosts;\n\n        cache.writeQuery({\n          query: USER_POSTS,\n          variables: {\n            archived: true\n          },\n          data: {\n            userPosts: [post].concat(_toConsumableArray(archivedPosts))\n          }\n        });\n      }\n    },\n    onError: function onError() {\n      toast.error(\"😳Unable to archive post at this time.\", {\n        position: \"bottom-left\"\n      });\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      archivePost = _useMutation2[0];\n\n  var _useMutation3 = useMutation(UNARCHIVE_POST, {\n    update: function update(cache, _ref6) {\n      var post = _ref6.data.unarchivePost;\n\n      // Remove post from archive query\n      var _cache$readQuery3 = cache.readQuery({\n        query: USER_POSTS,\n        variables: {\n          archived: true\n        }\n      }),\n          archivedPosts = _cache$readQuery3.userPosts;\n\n      var index = archivedPosts.findIndex(function (archivedPost) {\n        return archivedPost.id === id;\n      });\n      cache.writeQuery({\n        query: USER_POSTS,\n        variables: {\n          archived: true\n        },\n        data: {\n          userPosts: [].concat(_toConsumableArray(archivedPosts.slice(0, index)), _toConsumableArray(archivedPosts.slice(index + 1, archivedPosts.length)))\n        }\n      }); // Add post to archive\n\n      var queryInCache = cache.data.data.ROOT_QUERY['userPosts({\"archived\":false})'];\n\n      if (queryInCache) {\n        var _cache$readQuery4 = cache.readQuery({\n          query: USER_POSTS,\n          variables: {\n            archived: false\n          }\n        }),\n            posts = _cache$readQuery4.userPosts;\n\n        cache.writeQuery({\n          query: USER_POSTS,\n          variables: {\n            archived: false\n          },\n          data: {\n            userPosts: [post].concat(_toConsumableArray(posts))\n          }\n        });\n      }\n    },\n    onError: function onError() {\n      toast.error(\"😳Unable to unarchive post at this time.\", {\n        position: \"bottom-left\"\n      });\n    }\n  }),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      unarchivePost = _useMutation4[0];\n\n  var ACTIONS = [{\n    icon: \"📌\",\n    boxShadowColor: \"#d0e3ff\",\n    gradientStartColor: \"#c5d9f8\",\n    gradientEndColor: \"#90bbff\",\n    activeKey: \"pinned\",\n    onClick: function onClick() {\n      console.log(\"clicked pin\");\n    }\n  }, {\n    icon: \"💾\",\n    boxShadowColor: \"#cfc9f3\",\n    gradientStartColor: \"#cac3f3\",\n    gradientEndColor: \"#958aee\",\n    activeKey: \"archived\",\n    onClick: function onClick() {\n      var func = archived ? unarchivePost : archivePost;\n      func({\n        variables: {\n          postId: id\n        }\n      });\n    }\n  }];\n  var showGiveAward = true;\n  return __jsx(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 5\n    }\n  }, __jsx(Body, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }\n  }, __jsx(Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 9\n    }\n  }, __jsx(Title, {\n    target: \"_blank\",\n    href: url,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 11\n    }\n  }, title), __jsx(PublisherLine, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 11\n    }\n  }, __jsx(SourceLogo, {\n    src: logo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }\n  }), __jsx(Publisher, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 13\n    }\n  }, publisher))), image && __jsx(Thumbnail, {\n    src: image,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 19\n    }\n  })), __jsx(Footer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }\n  }, showGiveAward && __jsx(NewAction, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 27\n    }\n  }, \"Give Award\")));\n};\n\n_s(PostCard, \"IJOwPZR3TceC4RCmHz+Hzbg9TQA=\", false, function () {\n  return [useMutation, useMutation];\n});\n\n_c = PostCard;\nexport default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/components/post-card/index.js"],"names":["React","useState","useContext","BASE_TEXT","WEIGHT","BLACK","GUNSMOKE","WHITE","BLUSH","FOCUS_BLUSH","SCOPRION","ALABASTER","FOCUS_LAVENDER","toast","useMutation","ARCHIVE_POST","UNARCHIVE_POST","USER_POSTS","FontAwesomeIcon","faArchive","faThumbtack","THUMBNAIL_DIMENSION","Actions","Container","display","flexDirection","borderRadius","marginBottom","backgroundColor","boxShadow","padding","opacity","Body","Footer","Thumbnail","flexShrink","height","width","marginLeft","src","backgroundImage","backgroundSize","backgroundPosition","Content","Title","fontSize","fontWeight","BOLD","wordBreak","textDecoration","color","MetaLine","PublisherLine","MetaText","Author","SourceLogo","border","Publisher","Divider","alignItems","content","DateContainer","Name","Action","active","boxShadowColor","gradientStartColor","gradientEndColor","background","NewAction","ACTION_TIMEOUT","Icon","marginTop","letterSpacing","PostCard","post","id","image","title","archived","pinned","author","url","logo","publisher","date","update","cache","data","archivePost","console","log","readQuery","query","variables","posts","userPosts","index","findIndex","writeQuery","slice","length","queryInCache","ROOT_QUERY","archivedPosts","onError","error","position","unarchivePost","archivedPost","ACTIONS","icon","activeKey","onClick","func","postId","showGiveAward"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { BASE_TEXT, WEIGHT } from \"@style/typography\";\nimport {\n  BLACK,\n  GUNSMOKE,\n  WHITE,\n  BLUSH,\n  FOCUS_BLUSH,\n  SCOPRION,\n  ALABASTER,\n  FOCUS_LAVENDER,\n} from \"@style/colors\";\nimport { toast } from \"react-toastify\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ARCHIVE_POST } from \"@data/mutations\";\nimport { UNARCHIVE_POST } from \"@data/mutations\";\nimport { USER_POSTS } from \"@data/queries\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArchive, faThumbtack } from \"@fortawesome/pro-light-svg-icons\";\n\nexport const THUMBNAIL_DIMENSION = 60;\n\nconst Actions = styled(\"div\")({\n  display: \"flex\",\n  transition: \"opacity .1s\",\n  \" > div:first-of-type\": {\n    marginLeft: 0,\n  },\n});\n\nexport const Container = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\",\n  borderRadius: 3,\n  marginBottom: 12,\n  backgroundColor: WHITE,\n  boxShadow: \"0 1px 2px 0 rgba(0,0,0,.1)\",\n  padding: \"1rem\",\n  [Actions]: {\n    opacity: 0,\n  },\n  \"&:hover\": {\n    [Actions]: {\n      opacity: 1,\n    },\n  },\n});\n\nexport const Body = styled(\"div\")({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n});\n\nconst Footer = styled(\"div\")({\n  marginTop: \".5rem\",\n  display: \"flex\",\n  flexDirection: \"row\",\n});\n\nconst Thumbnail = styled(\"div\")(\n  {\n    flexShrink: 0,\n    borderRadius: 2,\n    height: THUMBNAIL_DIMENSION,\n    width: THUMBNAIL_DIMENSION,\n    marginLeft: \"1rem\",\n  },\n  ({ src }) => ({\n    backgroundImage: `url(${src})`,\n    backgroundSize: \"cover,auto\",\n    backgroundPosition: \"50% 50%,50% 50%\",\n  })\n);\n\nexport const Content = styled(\"div\")({\n  // marginLeft: \"1rem\",\n});\n\nconst Title = styled(\"a\")({\n  ...BASE_TEXT,\n  fontSize: \"1rem\",\n  fontWeight: WEIGHT.BOLD,\n  wordBreak: \"break-word\",\n  textDecoration: \"none\",\n  color: BLACK,\n});\n\nconst MetaLine = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n});\n\nconst PublisherLine = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n  marginTop: \".25rem\",\n});\n\nconst MetaText = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n});\n\nconst Author = styled(\"div\")({\n  ...BASE_TEXT,\n  color: SCOPRION,\n  fontWeight: WEIGHT.BOLD,\n});\n\nconst SourceLogo = styled(\"div\")(\n  {\n    width: \"1rem\",\n    height: \"1rem\",\n  },\n  ({ src }) => ({\n    backgroundImage: `url(${src})`,\n    backgroundSize: \"cover,auto\",\n    backgroundPosition: \"50% 50%,50% 50%\",\n    border: `1px solid ${GUNSMOKE}`,\n  })\n);\n\nconst Publisher = styled(\"div\")({\n  ...BASE_TEXT,\n  color: SCOPRION,\n  //   fontWeight: WEIGHT.BOLD,\n  marginLeft: \".5rem\",\n});\n\nconst Divider = styled(\"div\")({\n  height: 18,\n  display: \"flex\",\n  alignItems: \"center\",\n  \"&::after\": {\n    content: `'・'`,\n    color: SCOPRION,\n  },\n});\n\nconst DateContainer = styled(\"div\")({});\n\nconst Name = styled(\"div\")({\n  ...BASE_TEXT,\n});\n\nconst Action = styled(\"div\")(\n  {\n    marginLeft: \".5rem\",\n    cursor: \"pointer\",\n\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: 26,\n    height: 26,\n    borderRadius: \"50%\",\n\n    transition: \"box-shadow .18s\",\n  },\n  ({\n    active = false,\n    boxShadowColor,\n    gradientStartColor,\n    gradientEndColor,\n  }) => ({\n    background: active\n      ? `linear-gradient(111deg, ${gradientStartColor}, ${gradientEndColor})`\n      : ALABASTER,\n    boxShadow: `0px 0px 0px 2px ${active ? boxShadowColor : WHITE}`,\n    \"&:hover\": {\n      boxShadow: `0px 0px 0px 2px ${active ? boxShadowColor : FOCUS_LAVENDER}`,\n    },\n  })\n);\n\nconst NewAction = styled(\"div\")({});\n\nconst ACTION_TIMEOUT = 1000;\n\nconst Icon = styled(\"div\")({\n  fontSize: \".875rem\",\n  marginTop: -2,\n  letterSpacing: -5,\n});\n\nconst PostCard = ({\n  post: {\n    id,\n    image,\n    title,\n    archived,\n    pinned,\n    author,\n    url,\n    logo,\n    publisher,\n    date,\n  },\n  post,\n}) => {\n  const [archivePost] = useMutation(ARCHIVE_POST, {\n    update: (cache, { data: { archivePost: post } }) => {\n      console.log(\"DONE\", cache);\n      // Remove post from reading list query\n      const { userPosts: posts } = cache.readQuery({\n        query: USER_POSTS,\n        variables: { archived: false },\n      });\n      const index = posts.findIndex((post) => post.id === id);\n      cache.writeQuery({\n        query: USER_POSTS,\n        variables: { archived: false },\n        data: {\n          userPosts: [\n            ...posts.slice(0, index),\n            ...posts.slice(index + 1, posts.length),\n          ],\n        },\n      });\n      // Add post to archive\n      const queryInCache =\n        cache.data.data.ROOT_QUERY['userPosts({\"archived\":true})'];\n      if (queryInCache) {\n        const { userPosts: archivedPosts } = cache.readQuery({\n          query: USER_POSTS,\n          variables: { archived: true },\n        });\n        cache.writeQuery({\n          query: USER_POSTS,\n          variables: { archived: true },\n          data: {\n            userPosts: [post, ...archivedPosts],\n          },\n        });\n      }\n    },\n\n    onError: () => {\n      toast.error(\"😳Unable to archive post at this time.\", {\n        position: \"bottom-left\",\n      });\n    },\n  });\n\n  const [unarchivePost] = useMutation(UNARCHIVE_POST, {\n    update: (cache, { data: { unarchivePost: post } }) => {\n      // Remove post from archive query\n      const { userPosts: archivedPosts } = cache.readQuery({\n        query: USER_POSTS,\n        variables: { archived: true },\n      });\n      const index = archivedPosts.findIndex(\n        (archivedPost) => archivedPost.id === id\n      );\n      cache.writeQuery({\n        query: USER_POSTS,\n        variables: { archived: true },\n        data: {\n          userPosts: [\n            ...archivedPosts.slice(0, index),\n            ...archivedPosts.slice(index + 1, archivedPosts.length),\n          ],\n        },\n      });\n      // Add post to archive\n      const queryInCache =\n        cache.data.data.ROOT_QUERY['userPosts({\"archived\":false})'];\n      if (queryInCache) {\n        const { userPosts: posts } = cache.readQuery({\n          query: USER_POSTS,\n          variables: { archived: false },\n        });\n        cache.writeQuery({\n          query: USER_POSTS,\n          variables: { archived: false },\n          data: {\n            userPosts: [post, ...posts],\n          },\n        });\n      }\n    },\n\n    onError: () => {\n      toast.error(\"😳Unable to unarchive post at this time.\", {\n        position: \"bottom-left\",\n      });\n    },\n  });\n\n  const ACTIONS = [\n    {\n      icon: \"📌\",\n      boxShadowColor: \"#d0e3ff\",\n      gradientStartColor: \"#c5d9f8\",\n      gradientEndColor: \"#90bbff\",\n      activeKey: \"pinned\",\n      onClick: () => {\n        console.log(\"clicked pin\");\n      },\n    },\n    {\n      icon: \"💾\",\n      boxShadowColor: \"#cfc9f3\",\n      gradientStartColor: \"#cac3f3\",\n      gradientEndColor: \"#958aee\",\n      activeKey: \"archived\",\n      onClick: () => {\n        const func = archived ? unarchivePost : archivePost;\n        func({\n          variables: {\n            postId: id,\n          },\n        });\n      },\n    },\n  ];\n\n  const showGiveAward = true;\n\n  return (\n    <Container>\n      <Body>\n        <Content>\n          <Title target=\"_blank\" href={url}>\n            {title}\n          </Title>\n          <PublisherLine>\n            <SourceLogo src={logo} />\n            <Publisher>{publisher}</Publisher>\n          </PublisherLine>\n        </Content>\n        {image && <Thumbnail src={image} />}\n      </Body>\n      <Footer>\n        {showGiveAward && <NewAction>Give Award</NewAction>}\n\n        {/* <Actions>\n          {ACTIONS.map(\n            (\n              {\n                icon,\n                name,\n                onClick,\n                boxShadowColor,\n                gradientStartColor,\n                gradientEndColor,\n                activeKey,\n              },\n              i\n            ) => (\n              <Action\n                active={post[activeKey]}\n                boxShadowColor={boxShadowColor}\n                gradientStartColor={gradientStartColor}\n                gradientEndColor={gradientEndColor}\n                key={i}\n                onClick={() => onClick(id)}\n              >\n                <Icon>{icon}</Icon>\n              </Action>\n            )\n          )}\n        </Actions> */}\n      </Footer>\n    </Container>\n  );\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}