{"ast":null,"code":"var _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as sdk from \"@onflow/sdk\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ASSOCIATE_WALLET } from \"@data/mutations\";\nimport { toast } from \"react-toastify\";\nimport { CURRENT_USER_QUERY } from \"../../data/queries\";\nimport { TOKEN_CONTRACT_ADDRESS, AWARD_CONTRACT_ADDRESS } from \"@config/flow\";\nimport checkReference from \"../../flow/scripts/check-ref.cdc\";\nimport checkCollection from \"../../flow/scripts/check-collection.cdc\";\nimport checkActiveWalletScript from \"../../flow/scripts/check-active-wallet.cdc\";\nimport vaultBalance from \"../../flow/scripts/vault-balance.cdc\";\nimport getCollectionItems from \"../../flow/scripts/get-collection-items.cdc\";\nimport giveNFTAward from \"../../flow/transactions/give-nft-award.cdc\";\nimport setupUserWallet from \"../../flow/transactions/setup-user-wallet.cdc\";\nexport const WalletContext = React.createContext({}); // const LOCAL_TOKEN_CONTRACT_ADDRESS = \"0x01cf0e2f2f715450\";\n// // const TESTNET_TOKEN_CONTRACT_ADDRESS = \"0x4f7d7bb81563b36a\";\n// const TESTNET_TOKEN_CONTRACT_ADDRESS = \"0xb3f18c83b7599567\";\n// const LOCAL_AWARD_CONTRACT_ADDRESS = \"0xfd43f9148d4b725d\";\n// // const TESTNET_AWARD_CONTRACT_ADDRESS = \"0xab1ac2650499b3b5\";\n// const TESTNET_AWARD_CONTRACT_ADDRESS = \"0x5796355ea6a395b8\";\n\nconst getAddress = (user, nullPrefix = true) => {\n  return nullPrefix ? `0x${user.addr}` : user.addr;\n};\n\nconst generateCode = async (rawCode, match) => {\n  if (!match) {\n    return rawCode;\n  }\n\n  const {\n    query\n  } = match;\n  return rawCode.replace(query, item => {\n    return match[item];\n  });\n};\n\nexport const withWallet = Component => {\n  const WithWallet = () => {\n    const {\n      0: walletUser,\n      1: setWalletUser\n    } = useState(null);\n    const {\n      0: vaultIsSetup,\n      1: setVaultIsSetup\n    } = useState(false);\n    const {\n      0: collectionIsSetup,\n      1: setCollectionIsSetup\n    } = useState(false);\n    const {\n      0: walletBalance,\n      1: setWalletBalance\n    } = useState(null);\n    const {\n      0: walletCollection,\n      1: setWalletCollection\n    } = useState(null);\n    const {\n      0: authHandlerIsSetup,\n      1: setAuthHandlerIsSetup\n    } = useState(false);\n    const {\n      0: status,\n      1: setStatus\n    } = useState(\"Not started\");\n    const {\n      0: transaction,\n      1: setTransaction\n    } = useState(null);\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected = walletUser === null || walletUser && !walletUser.loggedIn;\n\n    const setupFCLAuthHandler = () => {\n      // console.log(\n      //   \"calling setupFCLAuthHandler process.env.TESTNET_TOKEN_CONTRACT_ADDRESS\",\n      //   process.env.TESTNET_TOKEN_CONTRACT_ADDRESS\n      // );\n      // console.log(\n      //   \"calling setupFCLAuthHandler process.env.TESTNET_AWARD_CONTRACT_ADDRESS\",\n      //   process.env.TESTNET_AWARD_CONTRACT_ADDRESS\n      // );\n      fcl.currentUser().subscribe(async user => {\n        if (user.loggedIn) {\n          setWalletUser(user);\n          getWalletResources();\n        }\n      });\n    };\n\n    const getWalletResources = async () => {\n      const vaultStatus = await checkUserVaultStatus();\n      setVaultIsSetup(vaultStatus);\n\n      if (vaultStatus) {\n        startBalancePoll();\n      }\n\n      const collectionStatus = await checkUserCollectionStatus();\n      setCollectionIsSetup(collectionStatus);\n\n      if (collectionStatus) {\n        startCollectionPoll();\n      }\n    };\n\n    let balancePollId = null;\n\n    const startBalancePoll = async () => {\n      const balance = await getUserBalance();\n      setWalletBalance(balance);\n      balancePollId = setTimeout(startBalancePoll, 2000);\n    };\n\n    let collectionPollId = null;\n\n    const startCollectionPoll = async () => {\n      const items = await getUserCollection();\n      setWalletCollection(items);\n      collectionPollId = setTimeout(startCollectionPoll, 2000);\n    };\n\n    const getUserBalance = async () => {\n      // console.log(\"calling getUSerBalance\");\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot); // const contractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n\n      const contractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(vaultBalance, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]); // console.log(\"response on getUserBalance\", response);\n\n      const balance = await fcl.decode(response);\n      return balance;\n    };\n\n    const getUserCollection = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot); // This is the local address - Regular NonFungibleToken contract\n      // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      // This is the local address - NonFungibleTokenAward contract\n      // const contractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n      // This is the testnet address - NonFungibleTokenAward contract\n\n      const contractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(getCollectionItems, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const items = await fcl.decode(response);\n      return items;\n    };\n\n    const checkUserVaultStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot); // const contractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n\n      const contractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(checkReference, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      console.log(\"---- checkResult is ---- \", checkResult);\n      return checkResult;\n    };\n\n    const checkUserCollectionStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot); // const contractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n\n      const contractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(checkCollection, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const checkActiveWallet = async () => {\n      // Checks if the active wallet is setup\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(checkActiveWalletScript, {\n        query: /(0x01|0x02|0x03)/g,\n        // \"0x01\": LOCAL_TOKEN_CONTRACT_ADDRESS,\n        \"0x01\": TESTNET_TOKEN_CONTRACT_ADDRESS,\n        // \"0x02\": LOCAL_AWARD_CONTRACT_ADDRESS,\n        \"0x02\": TESTNET_AWARD_CONTRACT_ADDRESS,\n        \"0x03\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const activeWalletStatus = await fcl.decode(response);\n      return activeWalletStatus;\n    };\n\n    const setupWallet = async () => {\n      const simpleTransaction = `\\\n        transaction {\n          execute {\n            log(\"Hello World!!\")\n          }\n        }\n      `; // Create a vault and a collection\n\n      const user = fcl.currentUser();\n      const {\n        authorization\n      } = user;\n      const snapshot = await user.snapshot();\n      console.log(\"----- snapshot ----\", JSON.stringify(snapshot)); // const fungibleTokenContractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n\n      const fungibleTokenContractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS; // const nonFungibleTokenContractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n\n      const nonFungibleTokenContractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const initCode = await generateCode(setupUserWallet, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": fungibleTokenContractAddress,\n        \"0x02\": nonFungibleTokenContractAddress\n      });\n      setStatus(\"Resolving...\");\n      const blockResponse = await fcl.send([fcl.getLatestBlock()]);\n      const block = await fcl.decode(blockResponse);\n\n      try {\n        const tx = await fcl.send([sdk.transaction`${initCode}`, fcl.proposer(fcl.currentUser().authorization), fcl.payer(fcl.currentUser().authorization), fcl.ref(block.id), fcl.authorizations([fcl.currentUser().authorization]), fcl.limit(100)] // {\n        //   node: \"http://localhost:8080\",\n        // }\n        ); // console.log(\"fcl.currentUser()\", fcl.currentUser().snapshot());\n        // const tx = await fcl.send(\n        //   [\n        //     fcl.transaction(simpleTransaction),\n        //     fcl.proposer(fcl.currentUser().authorization),\n        //     fcl.payer(fcl.currentUser().authorization),\n        //     fcl.ref(block.id),\n        //   ]\n        //   // { node: \"http://access-001.devnet12.nodes.onflow.org:9000\" }\n        // );\n        // const tx = await fcl.send([\n        //   fcl.transaction(initCode),\n        //   fcl.proposer(fcl.currentUser().authorization),\n        //   fcl.payer(fcl.currentUser().authorization),\n        //   fcl.ref(block.id),\n        // ]);\n\n        const {\n          transactionId\n        } = tx;\n        setStatus(\"Transaction sent, waiting for confirmation\"); // getWalletResources();\n        // fcl.tx(tx).subscribe(console.log); // fires everytime tx status updates\n\n        const unsub = fcl.tx({\n          transactionId\n        }).subscribe(transaction => {\n          setTransaction(transaction);\n\n          if (fcl.tx.isSealed(transaction)) {\n            setStatus(\"Transaction is Sealed\");\n            unsub();\n          }\n        });\n      } catch (e) {\n        console.error(error);\n        setStatus(\"Transaction failed\");\n      }\n    };\n\n    const giveAward = async ({\n      recipientAddress\n    }) => {\n      console.log(\"giving award to recipientAddress\", recipientAddress); // Create the user vault\n\n      const user = fcl.currentUser();\n      const {\n        authorization\n      } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot); // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      // const fungibleTokenContractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n\n      const fungibleTokenContractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS; // const awardContractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n\n      const awardContractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const initCode = await generateCode(giveNFTAward, {\n        query: /(0x01|0x02|0x03)/g,\n        \"0x01\": awardContractAddress,\n        \"0x02\": fungibleTokenContractAddress,\n        \"0x03\": `0x${recipientAddress}`\n      });\n\n      try {\n        const initResponse = await fcl.send([sdk.transaction`${initCode}`, fcl.proposer(authorization), fcl.payer(authorization), fcl.authorizations([authorization]), fcl.limit(100)] // {\n        //   node: \"http://localhost:8080\",\n        // }\n        );\n        console.log(\"give award initResponse\", initResponse);\n      } catch (e) {\n        console.log(\"give award caught error\", e);\n      }\n    };\n\n    const [associateWallet, {\n      data,\n      loading,\n      error\n    }] = useMutation(ASSOCIATE_WALLET, {\n      update: (cache, {\n        data\n      }) => {\n        const {\n          me: currentUserData\n        } = cache.readQuery({\n          query: CURRENT_USER_QUERY\n        });\n        cache.writeQuery({\n          query: CURRENT_USER_QUERY,\n          data: {\n            me: _objectSpread(_objectSpread({}, currentUserData), data.associateWallet)\n          }\n        });\n      },\n      onError: () => {\n        toast.error(\"😳 Ekkk! Failed to link wallet.\", {\n          position: \"bottom-left\"\n        });\n      }\n    });\n\n    const connectActiveWalletToLyraLabs = async () => {\n      associateWallet({\n        variables: {\n          address: walletUser.addr\n        }\n      });\n    };\n\n    return __jsx(WalletContext.Provider, {\n      value: {\n        status,\n        setStatus,\n        transaction,\n        setTransaction,\n        walletConnected,\n        walletNotConnected,\n        setupWallet,\n        setupFCLAuthHandler,\n        walletUser,\n        vaultIsSetup,\n        collectionIsSetup,\n        walletBalance,\n        walletCollection,\n        connectActiveWalletToLyraLabs,\n        giveAward,\n        authHandlerIsSetup,\n        setAuthHandlerIsSetup\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 7\n      }\n    }, __jsx(Component, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return WithWallet;\n};","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js"],"names":["React","useState","fcl","sdk","useMutation","ASSOCIATE_WALLET","toast","CURRENT_USER_QUERY","TOKEN_CONTRACT_ADDRESS","AWARD_CONTRACT_ADDRESS","checkReference","checkCollection","checkActiveWalletScript","vaultBalance","getCollectionItems","giveNFTAward","setupUserWallet","WalletContext","createContext","getAddress","user","nullPrefix","addr","generateCode","rawCode","match","query","replace","item","withWallet","Component","WithWallet","walletUser","setWalletUser","vaultIsSetup","setVaultIsSetup","collectionIsSetup","setCollectionIsSetup","walletBalance","setWalletBalance","walletCollection","setWalletCollection","authHandlerIsSetup","setAuthHandlerIsSetup","status","setStatus","transaction","setTransaction","walletConnected","loggedIn","walletNotConnected","setupFCLAuthHandler","currentUser","subscribe","getWalletResources","vaultStatus","checkUserVaultStatus","startBalancePoll","collectionStatus","checkUserCollectionStatus","startCollectionPoll","balancePollId","balance","getUserBalance","setTimeout","collectionPollId","items","getUserCollection","snapshot","address","contractAddress","TESTNET_TOKEN_CONTRACT_ADDRESS","scriptCode","script","response","send","decode","TESTNET_AWARD_CONTRACT_ADDRESS","checkResult","console","log","checkActiveWallet","activeWalletStatus","setupWallet","simpleTransaction","authorization","JSON","stringify","fungibleTokenContractAddress","nonFungibleTokenContractAddress","initCode","blockResponse","getLatestBlock","block","tx","proposer","payer","ref","id","authorizations","limit","transactionId","unsub","isSealed","e","error","giveAward","recipientAddress","awardContractAddress","initResponse","associateWallet","data","loading","update","cache","me","currentUserData","readQuery","writeQuery","onError","position","connectActiveWalletToLyraLabs","variables"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport * as fcl from \"@onflow/fcl\";\nimport * as sdk from \"@onflow/sdk\";\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ASSOCIATE_WALLET } from \"@data/mutations\";\nimport { toast } from \"react-toastify\";\nimport { CURRENT_USER_QUERY } from \"../../data/queries\";\nimport { TOKEN_CONTRACT_ADDRESS, AWARD_CONTRACT_ADDRESS } from \"@config/flow\";\n\nimport checkReference from \"../../flow/scripts/check-ref.cdc\";\nimport checkCollection from \"../../flow/scripts/check-collection.cdc\";\nimport checkActiveWalletScript from \"../../flow/scripts/check-active-wallet.cdc\";\nimport vaultBalance from \"../../flow/scripts/vault-balance.cdc\";\nimport getCollectionItems from \"../../flow/scripts/get-collection-items.cdc\";\nimport giveNFTAward from \"../../flow/transactions/give-nft-award.cdc\";\n\nimport setupUserWallet from \"../../flow/transactions/setup-user-wallet.cdc\";\n\nexport const WalletContext = React.createContext({});\n\n// const LOCAL_TOKEN_CONTRACT_ADDRESS = \"0x01cf0e2f2f715450\";\n// // const TESTNET_TOKEN_CONTRACT_ADDRESS = \"0x4f7d7bb81563b36a\";\n// const TESTNET_TOKEN_CONTRACT_ADDRESS = \"0xb3f18c83b7599567\";\n\n// const LOCAL_AWARD_CONTRACT_ADDRESS = \"0xfd43f9148d4b725d\";\n// // const TESTNET_AWARD_CONTRACT_ADDRESS = \"0xab1ac2650499b3b5\";\n// const TESTNET_AWARD_CONTRACT_ADDRESS = \"0x5796355ea6a395b8\";\n\nconst getAddress = (user, nullPrefix = true) => {\n  return nullPrefix ? `0x${user.addr}` : user.addr;\n};\n\nconst generateCode = async (rawCode, match) => {\n  if (!match) {\n    return rawCode;\n  }\n  const { query } = match;\n  return rawCode.replace(query, (item) => {\n    return match[item];\n  });\n};\n\nexport const withWallet = (Component) => {\n  const WithWallet = () => {\n    const [walletUser, setWalletUser] = useState(null);\n    const [vaultIsSetup, setVaultIsSetup] = useState(false);\n    const [collectionIsSetup, setCollectionIsSetup] = useState(false);\n    const [walletBalance, setWalletBalance] = useState(null);\n    const [walletCollection, setWalletCollection] = useState(null);\n    const [authHandlerIsSetup, setAuthHandlerIsSetup] = useState(false);\n\n    const [status, setStatus] = useState(\"Not started\");\n    const [transaction, setTransaction] = useState(null);\n\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected =\n      walletUser === null || (walletUser && !walletUser.loggedIn);\n\n    const setupFCLAuthHandler = () => {\n      // console.log(\n      //   \"calling setupFCLAuthHandler process.env.TESTNET_TOKEN_CONTRACT_ADDRESS\",\n      //   process.env.TESTNET_TOKEN_CONTRACT_ADDRESS\n      // );\n      // console.log(\n      //   \"calling setupFCLAuthHandler process.env.TESTNET_AWARD_CONTRACT_ADDRESS\",\n      //   process.env.TESTNET_AWARD_CONTRACT_ADDRESS\n      // );\n      fcl.currentUser().subscribe(async (user) => {\n        if (user.loggedIn) {\n          setWalletUser(user);\n          getWalletResources();\n        }\n      });\n    };\n\n    const getWalletResources = async () => {\n      const vaultStatus = await checkUserVaultStatus();\n      setVaultIsSetup(vaultStatus);\n      if (vaultStatus) {\n        startBalancePoll();\n      }\n      const collectionStatus = await checkUserCollectionStatus();\n      setCollectionIsSetup(collectionStatus);\n      if (collectionStatus) {\n        startCollectionPoll();\n      }\n    };\n\n    let balancePollId = null;\n    const startBalancePoll = async () => {\n      const balance = await getUserBalance();\n      setWalletBalance(balance);\n      balancePollId = setTimeout(startBalancePoll, 2000);\n    };\n\n    let collectionPollId = null;\n    const startCollectionPoll = async () => {\n      const items = await getUserCollection();\n      setWalletCollection(items);\n      collectionPollId = setTimeout(startCollectionPoll, 2000);\n    };\n\n    const getUserBalance = async () => {\n      // console.log(\"calling getUSerBalance\");\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // const contractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n      const contractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(vaultBalance, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      // console.log(\"response on getUserBalance\", response);\n      const balance = await fcl.decode(response);\n      return balance;\n    };\n\n    const getUserCollection = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // This is the local address - Regular NonFungibleToken contract\n      // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      // This is the local address - NonFungibleTokenAward contract\n      // const contractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n      // This is the testnet address - NonFungibleTokenAward contract\n      const contractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(getCollectionItems, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const items = await fcl.decode(response);\n      return items;\n    };\n\n    const checkUserVaultStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // const contractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n      const contractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      const scriptCode = await generateCode(checkReference, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      console.log(\"---- checkResult is ---- \", checkResult);\n      return checkResult;\n    };\n\n    const checkUserCollectionStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // const contractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n      const contractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n\n      const scriptCode = await generateCode(checkCollection, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const checkActiveWallet = async () => {\n      // Checks if the active wallet is setup\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(checkActiveWalletScript, {\n        query: /(0x01|0x02|0x03)/g,\n        // \"0x01\": LOCAL_TOKEN_CONTRACT_ADDRESS,\n        \"0x01\": TESTNET_TOKEN_CONTRACT_ADDRESS,\n        // \"0x02\": LOCAL_AWARD_CONTRACT_ADDRESS,\n        \"0x02\": TESTNET_AWARD_CONTRACT_ADDRESS,\n        \"0x03\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const activeWalletStatus = await fcl.decode(response);\n      return activeWalletStatus;\n    };\n\n    const setupWallet = async () => {\n      const simpleTransaction = `\\\n        transaction {\n          execute {\n            log(\"Hello World!!\")\n          }\n        }\n      `;\n      // Create a vault and a collection\n      const user = fcl.currentUser();\n      const { authorization } = user;\n      const snapshot = await user.snapshot();\n      console.log(\"----- snapshot ----\", JSON.stringify(snapshot));\n      // const fungibleTokenContractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n      const fungibleTokenContractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      // const nonFungibleTokenContractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n      const nonFungibleTokenContractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const initCode = await generateCode(setupUserWallet, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": fungibleTokenContractAddress,\n        \"0x02\": nonFungibleTokenContractAddress,\n      });\n\n      setStatus(\"Resolving...\");\n\n      const blockResponse = await fcl.send([fcl.getLatestBlock()]);\n      const block = await fcl.decode(blockResponse);\n\n      try {\n        const tx = await fcl.send(\n          [\n            sdk.transaction`${initCode}`,\n            fcl.proposer(fcl.currentUser().authorization),\n            fcl.payer(fcl.currentUser().authorization),\n            fcl.ref(block.id),\n            fcl.authorizations([fcl.currentUser().authorization]),\n            fcl.limit(100),\n          ]\n          // {\n          //   node: \"http://localhost:8080\",\n          // }\n        );\n\n        // console.log(\"fcl.currentUser()\", fcl.currentUser().snapshot());\n\n        // const tx = await fcl.send(\n        //   [\n        //     fcl.transaction(simpleTransaction),\n        //     fcl.proposer(fcl.currentUser().authorization),\n        //     fcl.payer(fcl.currentUser().authorization),\n        //     fcl.ref(block.id),\n        //   ]\n        //   // { node: \"http://access-001.devnet12.nodes.onflow.org:9000\" }\n        // );\n\n        // const tx = await fcl.send([\n        //   fcl.transaction(initCode),\n        //   fcl.proposer(fcl.currentUser().authorization),\n        //   fcl.payer(fcl.currentUser().authorization),\n        //   fcl.ref(block.id),\n        // ]);\n\n        const { transactionId } = tx;\n\n        setStatus(\"Transaction sent, waiting for confirmation\");\n\n        // getWalletResources();\n\n        // fcl.tx(tx).subscribe(console.log); // fires everytime tx status updates\n\n        const unsub = fcl.tx({ transactionId }).subscribe((transaction) => {\n          setTransaction(transaction);\n\n          if (fcl.tx.isSealed(transaction)) {\n            setStatus(\"Transaction is Sealed\");\n            unsub();\n          }\n        });\n      } catch (e) {\n        console.error(error);\n        setStatus(\"Transaction failed\");\n      }\n    };\n\n    const giveAward = async ({ recipientAddress }) => {\n      console.log(\"giving award to recipientAddress\", recipientAddress);\n      // Create the user vault\n      const user = fcl.currentUser();\n      const { authorization } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      // const fungibleTokenContractAddress = LOCAL_TOKEN_CONTRACT_ADDRESS;\n      const fungibleTokenContractAddress = TESTNET_TOKEN_CONTRACT_ADDRESS;\n      // const awardContractAddress = LOCAL_AWARD_CONTRACT_ADDRESS;\n      const awardContractAddress = TESTNET_AWARD_CONTRACT_ADDRESS;\n      const initCode = await generateCode(giveNFTAward, {\n        query: /(0x01|0x02|0x03)/g,\n        \"0x01\": awardContractAddress,\n        \"0x02\": fungibleTokenContractAddress,\n        \"0x03\": `0x${recipientAddress}`,\n      });\n      try {\n        const initResponse = await fcl.send(\n          [\n            sdk.transaction`${initCode}`,\n            fcl.proposer(authorization),\n            fcl.payer(authorization),\n            fcl.authorizations([authorization]),\n            fcl.limit(100),\n          ]\n          // {\n          //   node: \"http://localhost:8080\",\n          // }\n        );\n        console.log(\"give award initResponse\", initResponse);\n      } catch (e) {\n        console.log(\"give award caught error\", e);\n      }\n    };\n\n    const [associateWallet, { data, loading, error }] = useMutation(\n      ASSOCIATE_WALLET,\n      {\n        update: (cache, { data }) => {\n          const { me: currentUserData } = cache.readQuery({\n            query: CURRENT_USER_QUERY,\n          });\n          cache.writeQuery({\n            query: CURRENT_USER_QUERY,\n            data: { me: { ...currentUserData, ...data.associateWallet } },\n          });\n        },\n        onError: () => {\n          toast.error(\"😳 Ekkk! Failed to link wallet.\", {\n            position: \"bottom-left\",\n          });\n        },\n      }\n    );\n\n    const connectActiveWalletToLyraLabs = async () => {\n      associateWallet({\n        variables: {\n          address: walletUser.addr,\n        },\n      });\n    };\n\n    return (\n      <WalletContext.Provider\n        value={{\n          status,\n          setStatus,\n          transaction,\n          setTransaction,\n          walletConnected,\n          walletNotConnected,\n          setupWallet,\n          setupFCLAuthHandler,\n          walletUser,\n          vaultIsSetup,\n          collectionIsSetup,\n          walletBalance,\n          walletCollection,\n          connectActiveWalletToLyraLabs,\n          giveAward,\n          authHandlerIsSetup,\n          setAuthHandlerIsSetup,\n        }}\n      >\n        <Component />\n      </WalletContext.Provider>\n    );\n  };\n  return WithWallet;\n};\n"]},"metadata":{},"sourceType":"module"}