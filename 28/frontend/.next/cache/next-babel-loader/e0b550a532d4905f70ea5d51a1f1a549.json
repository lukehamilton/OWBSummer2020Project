{"ast":null,"code":"var _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as sdk from \"@onflow/sdk\";\nimport checkReference from \"../../flow/scripts/check-ref.cdc\";\nimport checkCollection from \"../../flow/scripts/check-collection.cdc\";\nimport checkActiveWalletScript from \"../../flow/scripts/check-active-wallet.cdc\";\nimport vaultBalance from \"../../flow/scripts/vault-balance.cdc\";\nimport getCollectionItems from \"../../flow/scripts/get-collection-items.cdc\";\nimport userVault from \"../../flow/transactions/user-vault.cdc\";\nimport setupNFTCollection from \"../../flow/transactions/setup-nft-collection.cdc\";\nexport const WalletContext = React.createContext({});\nfcl.config().put(\"challenge.handshake\", \"http://localhost:8701/flow/authenticate\");\n\nconst getAddress = (user, nullPrefix = true) => {\n  return nullPrefix ? `0x${user.addr}` : user.addr;\n};\n\nconst generateCode = async (rawCode, match) => {\n  if (!match) {\n    return rawCode;\n  }\n\n  const {\n    query\n  } = match;\n  return rawCode.replace(query, item => {\n    return match[item];\n  });\n};\n\nexport const withWallet = Component => {\n  const WithWallet = () => {\n    const {\n      0: walletUser,\n      1: setWalletUser\n    } = useState(null);\n    const {\n      0: vaultIsSetup,\n      1: setVaultIsSetup\n    } = useState(false);\n    const {\n      0: collectionIsSetup,\n      1: setCollectionIsSetup\n    } = useState(false);\n    const {\n      0: walletBalance,\n      1: setWalletBalance\n    } = useState(null);\n    const {\n      0: walletCollection,\n      1: setWalletCollection\n    } = useState(null);\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected = walletUser === null || walletUser && !walletUser.loggedIn;\n\n    const setupFCLAuthHandler = () => {\n      console.log(\"calling setupFCLAuthHandler\");\n      fcl.currentUser().subscribe(async user => {\n        if (user.loggedIn) {\n          setWalletUser(user); // Check if the wallet is set up yet\n\n          const vaultStatus = await checkUserVaultStatus();\n          setVaultIsSetup(vaultStatus);\n\n          if (vaultStatus) {\n            startBalancePoll();\n          }\n\n          const collectionStatus = await checkUserCollectionStatus();\n          setCollectionIsSetup(collectionStatus);\n\n          if (collectionStatus) {\n            getUserCollection();\n          }\n        } else {\n          console.log(\"is not logged in\");\n        }\n      });\n    };\n\n    let pollId = null;\n\n    const startBalancePoll = async () => {\n      const balance = await getUserBalance();\n      setWalletBalance(balance);\n      pollId = setTimeout(startBalancePoll, 2000);\n    };\n\n    const getUserBalance = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0x01cf0e2f2f715450\";\n      const scriptCode = await generateCode(vaultBalance, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const balance = await fcl.decode(response);\n      return balance;\n    };\n\n    const getUserCollection = async () => {\n      console.log(\"calling getUserCollection\");\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      const scriptCode = await generateCode(getCollectionItems, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const items = await fcl.decode(response);\n      setWalletCollection(items);\n    };\n\n    const setupUserVault = async () => {\n      // Create the user vault\n      const user = fcl.currentUser();\n      const {\n        authorization\n      } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0x01cf0e2f2f715450\";\n      const initCode = await generateCode(userVault, {\n        query: /(0x01)/g,\n        \"0x01\": contractAddress\n      });\n\n      try {\n        const initResponse = await fcl.send([sdk.transaction`${initCode}`, fcl.proposer(authorization), fcl.payer(authorization), fcl.authorizations([authorization]), fcl.limit(100)], {\n          node: \"http://localhost:8080\"\n        });\n        console.log(\"setupUserVault initResponse\", initResponse);\n      } catch (e) {\n        console.log(\"setupUserVault caught error\", e);\n      }\n    };\n\n    const checkUserVaultStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0x01cf0e2f2f715450\";\n      const scriptCode = await generateCode(checkReference, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const checkUserCollectionStatus = async () => {\n      console.log(\"---- calling checkUserCollectionStatus ----\");\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      const scriptCode = await generateCode(checkCollection, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      console.log(\"scriptCode\", scriptCode);\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const setupUserCollection = async () => {\n      // Create the user vault\n      const user = fcl.currentUser();\n      const {\n        authorization\n      } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      const initCode = await generateCode(setupNFTCollection, {\n        query: /(0x01)/g,\n        \"0x01\": contractAddress\n      });\n\n      try {\n        const initResponse = await fcl.send([sdk.transaction`${initCode}`, fcl.proposer(authorization), fcl.payer(authorization), fcl.authorizations([authorization]), fcl.limit(100)], {\n          node: \"http://localhost:8080\"\n        });\n        console.log(\"setupNFTCollection initResponse\", initResponse);\n      } catch (e) {\n        console.log(\"setupNFTCollection caught error\", e);\n      }\n    };\n\n    const checkActiveWallet = async () => {\n      // Checks if the active wallet is setup\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(checkActiveWalletScript, {\n        query: /(0x01|0x02|0x03)/g,\n        \"0x01\": `0x${FUNGIBLE_TOKEN_CONTRACT_ADDRESS}`,\n        \"0x02\": `0x${NON_FUNGIBLE_TOKEN_CONTRACT_ADDRESS}`,\n        \"0x03\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const activeWalletStatus = await fcl.decode(response);\n      return activeWalletStatus;\n    };\n\n    const setupActiveWallet = async () => {// Creates a vault and collection in the active wallet\n    };\n\n    return __jsx(WalletContext.Provider, {\n      value: {\n        walletConnected,\n        walletNotConnected,\n        setupFCLAuthHandler,\n        walletUser,\n        setupUserVault,\n        vaultIsSetup,\n        setupUserCollection,\n        collectionIsSetup,\n        walletBalance,\n        walletCollection\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 7\n      }\n    }, __jsx(Component, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return WithWallet;\n};","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js"],"names":["React","useState","fcl","sdk","checkReference","checkCollection","checkActiveWalletScript","vaultBalance","getCollectionItems","userVault","setupNFTCollection","WalletContext","createContext","config","put","getAddress","user","nullPrefix","addr","generateCode","rawCode","match","query","replace","item","withWallet","Component","WithWallet","walletUser","setWalletUser","vaultIsSetup","setVaultIsSetup","collectionIsSetup","setCollectionIsSetup","walletBalance","setWalletBalance","walletCollection","setWalletCollection","walletConnected","loggedIn","walletNotConnected","setupFCLAuthHandler","console","log","currentUser","subscribe","vaultStatus","checkUserVaultStatus","startBalancePoll","collectionStatus","checkUserCollectionStatus","getUserCollection","pollId","balance","getUserBalance","setTimeout","snapshot","address","contractAddress","scriptCode","script","response","send","decode","items","setupUserVault","authorization","initCode","initResponse","transaction","proposer","payer","authorizations","limit","node","e","checkResult","setupUserCollection","checkActiveWallet","FUNGIBLE_TOKEN_CONTRACT_ADDRESS","NON_FUNGIBLE_TOKEN_CONTRACT_ADDRESS","activeWalletStatus","setupActiveWallet"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport * as fcl from \"@onflow/fcl\";\nimport * as sdk from \"@onflow/sdk\";\n\nimport checkReference from \"../../flow/scripts/check-ref.cdc\";\nimport checkCollection from \"../../flow/scripts/check-collection.cdc\";\nimport checkActiveWalletScript from \"../../flow/scripts/check-active-wallet.cdc\";\nimport vaultBalance from \"../../flow/scripts/vault-balance.cdc\";\nimport getCollectionItems from \"../../flow/scripts/get-collection-items.cdc\";\nimport userVault from \"../../flow/transactions/user-vault.cdc\";\nimport setupNFTCollection from \"../../flow/transactions/setup-nft-collection.cdc\";\n\nexport const WalletContext = React.createContext({});\n\nfcl\n  .config()\n  .put(\"challenge.handshake\", \"http://localhost:8701/flow/authenticate\");\n\nconst getAddress = (user, nullPrefix = true) => {\n  return nullPrefix ? `0x${user.addr}` : user.addr;\n};\n\nconst generateCode = async (rawCode, match) => {\n  if (!match) {\n    return rawCode;\n  }\n  const { query } = match;\n  return rawCode.replace(query, (item) => {\n    return match[item];\n  });\n};\n\nexport const withWallet = (Component) => {\n  const WithWallet = () => {\n    const [walletUser, setWalletUser] = useState(null);\n    const [vaultIsSetup, setVaultIsSetup] = useState(false);\n    const [collectionIsSetup, setCollectionIsSetup] = useState(false);\n    const [walletBalance, setWalletBalance] = useState(null);\n    const [walletCollection, setWalletCollection] = useState(null);\n\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected =\n      walletUser === null || (walletUser && !walletUser.loggedIn);\n\n    const setupFCLAuthHandler = () => {\n      console.log(\"calling setupFCLAuthHandler\");\n      fcl.currentUser().subscribe(async (user) => {\n        if (user.loggedIn) {\n          setWalletUser(user);\n          // Check if the wallet is set up yet\n          const vaultStatus = await checkUserVaultStatus();\n          setVaultIsSetup(vaultStatus);\n          if (vaultStatus) {\n            startBalancePoll();\n          }\n          const collectionStatus = await checkUserCollectionStatus();\n          setCollectionIsSetup(collectionStatus);\n          if (collectionStatus) {\n            getUserCollection();\n          }\n        } else {\n          console.log(\"is not logged in\");\n        }\n      });\n    };\n\n    let pollId = null;\n    const startBalancePoll = async () => {\n      const balance = await getUserBalance();\n      setWalletBalance(balance);\n      pollId = setTimeout(startBalancePoll, 2000);\n    };\n\n    const getUserBalance = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0x01cf0e2f2f715450\";\n      const scriptCode = await generateCode(vaultBalance, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const balance = await fcl.decode(response);\n      return balance;\n    };\n\n    const getUserCollection = async () => {\n      console.log(\"calling getUserCollection\");\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      const scriptCode = await generateCode(getCollectionItems, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const items = await fcl.decode(response);\n      setWalletCollection(items);\n    };\n\n    const setupUserVault = async () => {\n      // Create the user vault\n      const user = fcl.currentUser();\n      const { authorization } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0x01cf0e2f2f715450\";\n      const initCode = await generateCode(userVault, {\n        query: /(0x01)/g,\n        \"0x01\": contractAddress,\n      });\n      try {\n        const initResponse = await fcl.send(\n          [\n            sdk.transaction`${initCode}`,\n            fcl.proposer(authorization),\n            fcl.payer(authorization),\n            fcl.authorizations([authorization]),\n            fcl.limit(100),\n          ],\n          {\n            node: \"http://localhost:8080\",\n          }\n        );\n        console.log(\"setupUserVault initResponse\", initResponse);\n      } catch (e) {\n        console.log(\"setupUserVault caught error\", e);\n      }\n    };\n\n    const checkUserVaultStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0x01cf0e2f2f715450\";\n      const scriptCode = await generateCode(checkReference, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const checkUserCollectionStatus = async () => {\n      console.log(\"---- calling checkUserCollectionStatus ----\");\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      const scriptCode = await generateCode(checkCollection, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n\n      console.log(\"scriptCode\", scriptCode);\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const setupUserCollection = async () => {\n      // Create the user vault\n      const user = fcl.currentUser();\n      const { authorization } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      const initCode = await generateCode(setupNFTCollection, {\n        query: /(0x01)/g,\n        \"0x01\": contractAddress,\n      });\n      try {\n        const initResponse = await fcl.send(\n          [\n            sdk.transaction`${initCode}`,\n            fcl.proposer(authorization),\n            fcl.payer(authorization),\n            fcl.authorizations([authorization]),\n            fcl.limit(100),\n          ],\n          {\n            node: \"http://localhost:8080\",\n          }\n        );\n        console.log(\"setupNFTCollection initResponse\", initResponse);\n      } catch (e) {\n        console.log(\"setupNFTCollection caught error\", e);\n      }\n    };\n\n    const checkActiveWallet = async () => {\n      // Checks if the active wallet is setup\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(checkActiveWalletScript, {\n        query: /(0x01|0x02|0x03)/g,\n        \"0x01\": `0x${FUNGIBLE_TOKEN_CONTRACT_ADDRESS}`,\n        \"0x02\": `0x${NON_FUNGIBLE_TOKEN_CONTRACT_ADDRESS}`,\n        \"0x03\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const activeWalletStatus = await fcl.decode(response);\n      return activeWalletStatus;\n    };\n\n    const setupActiveWallet = async () => {\n      // Creates a vault and collection in the active wallet\n    };\n\n    return (\n      <WalletContext.Provider\n        value={{\n          walletConnected,\n          walletNotConnected,\n          setupFCLAuthHandler,\n          walletUser,\n          setupUserVault,\n          vaultIsSetup,\n          setupUserCollection,\n          collectionIsSetup,\n          walletBalance,\n          walletCollection,\n        }}\n      >\n        <Component />\n      </WalletContext.Provider>\n    );\n  };\n  return WithWallet;\n};\n"]},"metadata":{},"sourceType":"module"}