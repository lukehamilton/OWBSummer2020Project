{"ast":null,"code":"var _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/auth-provider.js\";\nvar __jsx = React.createElement;\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { CurrentUserContext } from \"./current-user\";\nimport { useRouter } from \"next/router\";\nconst AuthContext = createContext();\n\nfunction AuthProvider({\n  children\n}) {\n  const {\n    pathname,\n    events\n  } = useRouter();\n  const {\n    0: user,\n    1: setUser\n  } = useState();\n\n  async function getUser() {\n    try {\n      const response = await fetch(\"/api/me\");\n      const profile = await response.json();\n\n      if (profile.error) {\n        setUser(null);\n      } else {\n        setUser(profile);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  useEffect(() => {// getUser();\n  }, [pathname]);\n  const currentUser = useContext(CurrentUserContext);\n  useEffect(() => {\n    // Check that a new route is OK\n    const handleRouteChange = url => {\n      console.log(\"handlingRouteChange\", currentUser); //   if (url !== \"/\" && !user) {\n      //     window.location.href = \"/\";\n      //   }\n      //   if (url !== \"/\" && !user) {\n      //     window.location.href = \"/\";\n      //   }\n    }; // Check that initial route is OK\n    // if (pathname !== \"/\" && user === null) {\n    //   window.location.href = \"/\";\n    // }\n    // Monitor routes\n\n\n    events.on(\"routeChangeStart\", handleRouteChange);\n    return () => {\n      events.off(\"routeChangeStart\", handleRouteChange);\n    };\n  }, [user]);\n  return __jsx(AuthContext.Provider, {\n    value: {\n      user\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, children);\n}\n\nconst useAuth = () => useContext(AuthContext);\n\nexport { AuthProvider, useAuth };","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/auth-provider.js"],"names":["React","createContext","useContext","useState","useEffect","CurrentUserContext","useRouter","AuthContext","AuthProvider","children","pathname","events","user","setUser","getUser","response","fetch","profile","json","error","err","console","currentUser","handleRouteChange","url","log","on","off","useAuth"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,EAAqDC,SAArD,QAAsE,OAAtE;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,MAAMC,WAAW,GAAGN,aAAa,EAAjC;;AAEA,SAASO,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AAClC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuBL,SAAS,EAAtC;AACA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBV,QAAQ,EAAhC;;AAEA,iBAAeW,OAAf,GAAyB;AACvB,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,SAAD,CAA5B;AACA,YAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;;AACA,UAAID,OAAO,CAACE,KAAZ,EAAmB;AACjBN,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAFD,MAEO;AACLA,QAAAA,OAAO,CAACI,OAAD,CAAP;AACD;AACF,KARD,CAQE,OAAOG,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACF,KAAR,CAAcC,GAAd;AACD;AACF;;AAEDhB,EAAAA,SAAS,CAAC,MAAM,CACd;AACD,GAFQ,EAEN,CAACM,QAAD,CAFM,CAAT;AAIA,QAAMY,WAAW,GAAGpB,UAAU,CAACG,kBAAD,CAA9B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMmB,iBAAiB,GAAIC,GAAD,IAAS;AACjCH,MAAAA,OAAO,CAACI,GAAR,CAAY,qBAAZ,EAAmCH,WAAnC,EADiC,CAEjC;AACA;AACA;AACA;AACA;AACA;AACD,KARD,CAFc,CAYd;AACA;AACA;AACA;AAEA;;;AACAX,IAAAA,MAAM,CAACe,EAAP,CAAU,kBAAV,EAA8BH,iBAA9B;AACA,WAAO,MAAM;AACXZ,MAAAA,MAAM,CAACgB,GAAP,CAAW,kBAAX,EAA+BJ,iBAA/B;AACD,KAFD;AAGD,GAtBQ,EAsBN,CAACX,IAAD,CAtBM,CAAT;AAwBA,SACE,MAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEA,MAAAA;AAAF,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwCH,QAAxC,CADF;AAGD;;AAED,MAAMmB,OAAO,GAAG,MAAM1B,UAAU,CAACK,WAAD,CAAhC;;AAEA,SAASC,YAAT,EAAuBoB,OAAvB","sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { CurrentUserContext } from \"./current-user\";\nimport { useRouter } from \"next/router\";\nconst AuthContext = createContext();\n\nfunction AuthProvider({ children }) {\n  const { pathname, events } = useRouter();\n  const [user, setUser] = useState();\n\n  async function getUser() {\n    try {\n      const response = await fetch(\"/api/me\");\n      const profile = await response.json();\n      if (profile.error) {\n        setUser(null);\n      } else {\n        setUser(profile);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  useEffect(() => {\n    // getUser();\n  }, [pathname]);\n\n  const currentUser = useContext(CurrentUserContext);\n\n  useEffect(() => {\n    // Check that a new route is OK\n    const handleRouteChange = (url) => {\n      console.log(\"handlingRouteChange\", currentUser);\n      //   if (url !== \"/\" && !user) {\n      //     window.location.href = \"/\";\n      //   }\n      //   if (url !== \"/\" && !user) {\n      //     window.location.href = \"/\";\n      //   }\n    };\n\n    // Check that initial route is OK\n    // if (pathname !== \"/\" && user === null) {\n    //   window.location.href = \"/\";\n    // }\n\n    // Monitor routes\n    events.on(\"routeChangeStart\", handleRouteChange);\n    return () => {\n      events.off(\"routeChangeStart\", handleRouteChange);\n    };\n  }, [user]);\n\n  return (\n    <AuthContext.Provider value={{ user }}>{children}</AuthContext.Provider>\n  );\n}\n\nconst useAuth = () => useContext(AuthContext);\n\nexport { AuthProvider, useAuth };\n"]},"metadata":{},"sourceType":"module"}