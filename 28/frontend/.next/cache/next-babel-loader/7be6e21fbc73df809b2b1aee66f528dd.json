{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js\";\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nexport var WalletContext = React.createContext({});\nfcl.config().put(\"challenge.handshake\", \"http://localhost:8701/flow/authenticate\");\n\nvar getAddress = function getAddress(user) {\n  var nullPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return nullPrefix ? \"0x\".concat(user.addr) : user.addr;\n};\n\nvar generateCode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(rawCode, match) {\n    var query;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (match) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", rawCode);\n\n          case 2:\n            query = match.query;\n            return _context.abrupt(\"return\", rawCode.replace(query, function (item) {\n              return match[item];\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function generateCode(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var withWallet = function withWallet(Component) {\n  var _s = $RefreshSig$();\n\n  var WithWallet = function WithWallet() {\n    _s();\n\n    var _useState = useState(null),\n        walletUser = _useState[0],\n        setWalletUser = _useState[1];\n\n    var _useState2 = useState(false),\n        vaultIsSetup = _useState2[0],\n        setVaultIsSetup = _useState2[1];\n\n    var _useState3 = useState(false),\n        collectionIsSetup = _useState3[0],\n        setCollectionIsSetup = _useState3[1];\n\n    var _useState4 = useState(null),\n        walletBalance = _useState4[0],\n        setWalletBalance = _useState4[1];\n\n    var _useState5 = useState(null),\n        walletCollection = _useState5[0],\n        setWalletCollection = _useState5[1];\n\n    var walletConnected = walletUser && walletUser.loggedIn;\n    var walletNotConnected = walletUser === null || walletUser && !walletUser.loggedIn;\n\n    var setupFCLAuthHandler = function setupFCLAuthHandler() {\n      console.log(\"calling setupFCLAuthHandler\");\n      fcl.currentUser().subscribe( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(user) {\n          var vaultStatus, collectionStatus;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!user.loggedIn) {\n                    _context2.next = 14;\n                    break;\n                  }\n\n                  setWalletUser(user); // Check if the wallet is set up yet\n\n                  _context2.next = 4;\n                  return checkUserVaultStatus();\n\n                case 4:\n                  vaultStatus = _context2.sent;\n                  setVaultIsSetup(vaultStatus);\n\n                  if (vaultStatus) {\n                    startBalancePoll();\n                  }\n\n                  _context2.next = 9;\n                  return checkUserCollectionStatus();\n\n                case 9:\n                  collectionStatus = _context2.sent;\n                  setCollectionIsSetup(collectionStatus);\n\n                  if (collectionStatus) {\n                    getUserCollection();\n                  }\n\n                  _context2.next = 15;\n                  break;\n\n                case 14:\n                  console.log(\"is not logged in\");\n\n                case 15:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    };\n\n    var pollId = null;\n\n    var startBalancePoll = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var balance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return getUserBalance();\n\n              case 2:\n                balance = _context3.sent;\n                setWalletBalance(balance);\n                pollId = setTimeout(startBalancePoll, 2000);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function startBalancePoll() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    return __jsx(WalletContext.Provider, {\n      value: {\n        walletConnected: walletConnected,\n        walletNotConnected: walletNotConnected,\n        setupFCLAuthHandler: setupFCLAuthHandler\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, __jsx(Component, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  _s(WithWallet, \"PEvS++yVbOUpKpWLPp5jM+PaFJ8=\");\n\n  return WithWallet;\n};","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js"],"names":["React","useState","fcl","WalletContext","createContext","config","put","getAddress","user","nullPrefix","addr","generateCode","rawCode","match","query","replace","item","withWallet","Component","WithWallet","walletUser","setWalletUser","vaultIsSetup","setVaultIsSetup","collectionIsSetup","setCollectionIsSetup","walletBalance","setWalletBalance","walletCollection","setWalletCollection","walletConnected","loggedIn","walletNotConnected","setupFCLAuthHandler","console","log","currentUser","subscribe","checkUserVaultStatus","vaultStatus","startBalancePoll","checkUserCollectionStatus","collectionStatus","getUserCollection","pollId","getUserBalance","balance","setTimeout"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AAEA,OAAO,IAAMC,aAAa,GAAGH,KAAK,CAACI,aAAN,CAAoB,EAApB,CAAtB;AAEPF,GAAG,CACAG,MADH,GAEGC,GAFH,CAEO,qBAFP,EAE8B,yCAF9B;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAA6B;AAAA,MAAtBC,UAAsB,uEAAT,IAAS;AAC9C,SAAOA,UAAU,eAAQD,IAAI,CAACE,IAAb,IAAsBF,IAAI,CAACE,IAA5C;AACD,CAFD;;AAIA,IAAMC,YAAY;AAAA,sEAAG,iBAAOC,OAAP,EAAgBC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACdA,KADc;AAAA;AAAA;AAAA;;AAAA,6CAEVD,OAFU;;AAAA;AAIXE,YAAAA,KAJW,GAIDD,KAJC,CAIXC,KAJW;AAAA,6CAKZF,OAAO,CAACG,OAAR,CAAgBD,KAAhB,EAAuB,UAACE,IAAD,EAAU;AACtC,qBAAOH,KAAK,CAACG,IAAD,CAAZ;AACD,aAFM,CALY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZL,YAAY;AAAA;AAAA;AAAA,GAAlB;;AAUA,OAAO,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACC,SAAD,EAAe;AAAA;;AACvC,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA;;AAAA,oBACalB,QAAQ,CAAC,IAAD,CADrB;AAAA,QAChBmB,UADgB;AAAA,QACJC,aADI;;AAAA,qBAEiBpB,QAAQ,CAAC,KAAD,CAFzB;AAAA,QAEhBqB,YAFgB;AAAA,QAEFC,eAFE;;AAAA,qBAG2BtB,QAAQ,CAAC,KAAD,CAHnC;AAAA,QAGhBuB,iBAHgB;AAAA,QAGGC,oBAHH;;AAAA,qBAImBxB,QAAQ,CAAC,IAAD,CAJ3B;AAAA,QAIhByB,aAJgB;AAAA,QAIDC,gBAJC;;AAAA,qBAKyB1B,QAAQ,CAAC,IAAD,CALjC;AAAA,QAKhB2B,gBALgB;AAAA,QAKEC,mBALF;;AAOvB,QAAMC,eAAe,GAAGV,UAAU,IAAIA,UAAU,CAACW,QAAjD;AACA,QAAMC,kBAAkB,GACtBZ,UAAU,KAAK,IAAf,IAAwBA,UAAU,IAAI,CAACA,UAAU,CAACW,QADpD;;AAGA,QAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAjC,MAAAA,GAAG,CAACkC,WAAJ,GAAkBC,SAAlB;AAAA,6EAA4B,kBAAO7B,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACtBA,IAAI,CAACuB,QADiB;AAAA;AAAA;AAAA;;AAExBV,kBAAAA,aAAa,CAACb,IAAD,CAAb,CAFwB,CAGxB;;AAHwB;AAAA,yBAIE8B,oBAAoB,EAJtB;;AAAA;AAIlBC,kBAAAA,WAJkB;AAKxBhB,kBAAAA,eAAe,CAACgB,WAAD,CAAf;;AACA,sBAAIA,WAAJ,EAAiB;AACfC,oBAAAA,gBAAgB;AACjB;;AARuB;AAAA,yBASOC,yBAAyB,EAThC;;AAAA;AASlBC,kBAAAA,gBATkB;AAUxBjB,kBAAAA,oBAAoB,CAACiB,gBAAD,CAApB;;AACA,sBAAIA,gBAAJ,EAAsB;AACpBC,oBAAAA,iBAAiB;AAClB;;AAbuB;AAAA;;AAAA;AAexBT,kBAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AAfwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA5B;;AAAA;AAAA;AAAA;AAAA;AAkBD,KApBD;;AAsBA,QAAIS,MAAM,GAAG,IAAb;;AACA,QAAMJ,gBAAgB;AAAA,2EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACDK,cAAc,EADb;;AAAA;AACjBC,gBAAAA,OADiB;AAEvBnB,gBAAAA,gBAAgB,CAACmB,OAAD,CAAhB;AACAF,gBAAAA,MAAM,GAAGG,UAAU,CAACP,gBAAD,EAAmB,IAAnB,CAAnB;;AAHuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAhBA,gBAAgB;AAAA;AAAA;AAAA,OAAtB;;AAMA,WACE,MAAC,aAAD,CAAe,QAAf;AACE,MAAA,KAAK,EAAE;AAAEV,QAAAA,eAAe,EAAfA,eAAF;AAAmBE,QAAAA,kBAAkB,EAAlBA,kBAAnB;AAAuCC,QAAAA,mBAAmB,EAAnBA;AAAvC,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAOD,GA/CD;;AADuC,KACjCd,UADiC;;AAiDvC,SAAOA,UAAP;AACD,CAlDM","sourcesContent":["import React, { useState } from \"react\";\n\nimport * as fcl from \"@onflow/fcl\";\n\nexport const WalletContext = React.createContext({});\n\nfcl\n  .config()\n  .put(\"challenge.handshake\", \"http://localhost:8701/flow/authenticate\");\n\nconst getAddress = (user, nullPrefix = true) => {\n  return nullPrefix ? `0x${user.addr}` : user.addr;\n};\n\nconst generateCode = async (rawCode, match) => {\n  if (!match) {\n    return rawCode;\n  }\n  const { query } = match;\n  return rawCode.replace(query, (item) => {\n    return match[item];\n  });\n};\n\nexport const withWallet = (Component) => {\n  const WithWallet = () => {\n    const [walletUser, setWalletUser] = useState(null);\n    const [vaultIsSetup, setVaultIsSetup] = useState(false);\n    const [collectionIsSetup, setCollectionIsSetup] = useState(false);\n    const [walletBalance, setWalletBalance] = useState(null);\n    const [walletCollection, setWalletCollection] = useState(null);\n\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected =\n      walletUser === null || (walletUser && !walletUser.loggedIn);\n\n    const setupFCLAuthHandler = () => {\n      console.log(\"calling setupFCLAuthHandler\");\n      fcl.currentUser().subscribe(async (user) => {\n        if (user.loggedIn) {\n          setWalletUser(user);\n          // Check if the wallet is set up yet\n          const vaultStatus = await checkUserVaultStatus();\n          setVaultIsSetup(vaultStatus);\n          if (vaultStatus) {\n            startBalancePoll();\n          }\n          const collectionStatus = await checkUserCollectionStatus();\n          setCollectionIsSetup(collectionStatus);\n          if (collectionStatus) {\n            getUserCollection();\n          }\n        } else {\n          console.log(\"is not logged in\");\n        }\n      });\n    };\n\n    let pollId = null;\n    const startBalancePoll = async () => {\n      const balance = await getUserBalance();\n      setWalletBalance(balance);\n      pollId = setTimeout(startBalancePoll, 2000);\n    };\n\n    return (\n      <WalletContext.Provider\n        value={{ walletConnected, walletNotConnected, setupFCLAuthHandler }}\n      >\n        <Component />\n      </WalletContext.Provider>\n    );\n  };\n  return WithWallet;\n};\n"]},"metadata":{},"sourceType":"module"}