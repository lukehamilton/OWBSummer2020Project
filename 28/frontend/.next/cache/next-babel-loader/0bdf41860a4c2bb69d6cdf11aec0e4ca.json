{"ast":null,"code":"var _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as sdk from \"@onflow/sdk\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ASSOCIATE_WALLET } from \"@data/mutations\";\nimport { toast } from \"react-toastify\";\nimport { CURRENT_USER_QUERY } from \"../../data/queries\";\nimport checkReference from \"../../flow/scripts/check-ref.cdc\";\nimport checkCollection from \"../../flow/scripts/check-collection.cdc\";\nimport checkActiveWalletScript from \"../../flow/scripts/check-active-wallet.cdc\";\nimport vaultBalance from \"../../flow/scripts/vault-balance.cdc\";\nimport getCollectionItems from \"../../flow/scripts/get-collection-items.cdc\";\nimport userVault from \"../../flow/transactions/user-vault.cdc\";\nimport setupNFTCollection from \"../../flow/transactions/setup-nft-collection.cdc\";\nimport giveNFTAward from \"../../flow/transactions/give-nft-award.cdc\";\nexport const WalletContext = React.createContext({});\nfcl.config().put(\"challenge.handshake\", \"http://localhost:8701/flow/authenticate\");\n\nconst getAddress = (user, nullPrefix = true) => {\n  return nullPrefix ? `0x${user.addr}` : user.addr;\n};\n\nconst generateCode = async (rawCode, match) => {\n  if (!match) {\n    return rawCode;\n  }\n\n  const {\n    query\n  } = match;\n  return rawCode.replace(query, item => {\n    return match[item];\n  });\n};\n\nexport const withWallet = Component => {\n  const WithWallet = () => {\n    const {\n      0: walletUser,\n      1: setWalletUser\n    } = useState(null);\n    const {\n      0: vaultIsSetup,\n      1: setVaultIsSetup\n    } = useState(false);\n    const {\n      0: collectionIsSetup,\n      1: setCollectionIsSetup\n    } = useState(false);\n    const {\n      0: walletBalance,\n      1: setWalletBalance\n    } = useState(null);\n    const {\n      0: walletCollection,\n      1: setWalletCollection\n    } = useState(null);\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected = walletUser === null || walletUser && !walletUser.loggedIn;\n\n    const setupFCLAuthHandler = () => {\n      fcl.currentUser().subscribe(async user => {\n        if (user.loggedIn) {\n          setWalletUser(user); // Check if the wallet is set up yet\n\n          const vaultStatus = await checkUserVaultStatus();\n          setVaultIsSetup(vaultStatus);\n\n          if (vaultStatus) {\n            startBalancePoll();\n          }\n\n          const collectionStatus = await checkUserCollectionStatus();\n          setCollectionIsSetup(collectionStatus);\n\n          if (collectionStatus) {\n            getUserCollection();\n          }\n        } else {\n          console.log(\"is not logged in\");\n        }\n      });\n    };\n\n    let pollId = null;\n\n    const startBalancePoll = async () => {\n      const balance = await getUserBalance();\n      setWalletBalance(balance);\n      pollId = setTimeout(startBalancePoll, 2000);\n    };\n\n    const getUserBalance = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0x01cf0e2f2f715450\";\n      const scriptCode = await generateCode(vaultBalance, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const balance = await fcl.decode(response);\n      return balance;\n    };\n\n    const getUserCollection = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot); //   const contractAddress = \"0xf3fcd2c1a78f5eee\";\n\n      const contractAddress = \"0xfd43f9148d4b725d\";\n      const scriptCode = await generateCode(getCollectionItems, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const items = await fcl.decode(response);\n      setWalletCollection(items);\n    };\n\n    const setupUserVault = async () => {\n      // Create the user vault\n      const user = fcl.currentUser();\n      const {\n        authorization\n      } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0x01cf0e2f2f715450\";\n      const initCode = await generateCode(userVault, {\n        query: /(0x01)/g,\n        \"0x01\": contractAddress\n      });\n\n      try {\n        const initResponse = await fcl.send([sdk.transaction`${initCode}`, fcl.proposer(authorization), fcl.payer(authorization), fcl.authorizations([authorization]), fcl.limit(100)], {\n          node: \"http://localhost:8080\"\n        });\n      } catch (e) {\n        console.log(\"setupUserVault caught error\", e);\n      }\n    };\n\n    const checkUserVaultStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0x01cf0e2f2f715450\";\n      const scriptCode = await generateCode(checkReference, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const checkUserCollectionStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot); //   const contractAddress = \"0xf3fcd2c1a78f5eee\";\n\n      const contractAddress = \"0xfd43f9148d4b725d\";\n      const scriptCode = await generateCode(checkCollection, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const setupUserCollection = async () => {\n      // Create the user vault\n      const user = fcl.currentUser();\n      const {\n        authorization\n      } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot); // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n\n      const contractAddress = \"0xfd43f9148d4b725d\";\n      const initCode = await generateCode(setupNFTCollection, {\n        query: /(0x01)/g,\n        \"0x01\": contractAddress\n      });\n\n      try {\n        const initResponse = await fcl.send([sdk.transaction`${initCode}`, fcl.proposer(authorization), fcl.payer(authorization), fcl.authorizations([authorization]), fcl.limit(100)], {\n          node: \"http://localhost:8080\"\n        });\n      } catch (e) {\n        console.log(\"setupNFTCollection caught error\", e);\n      }\n    };\n\n    const checkActiveWallet = async () => {\n      // Checks if the active wallet is setup\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(checkActiveWalletScript, {\n        query: /(0x01|0x02|0x03)/g,\n        \"0x01\": `0x${FUNGIBLE_TOKEN_CONTRACT_ADDRESS}`,\n        \"0x02\": `0x${NON_FUNGIBLE_TOKEN_CONTRACT_ADDRESS}`,\n        \"0x03\": address\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const activeWalletStatus = await fcl.decode(response);\n      return activeWalletStatus;\n    };\n\n    const setupActiveWallet = async () => {// Creates a vault and collection in the active wallet\n    };\n\n    const setupWallet = async () => {\n      console.log(\"Creates a vault and collection in the active wallet\");\n    };\n\n    const giveAward = async ({\n      recipientAddress\n    }) => {\n      console.log(\"giving award to recipientAddress\", recipientAddress); // Create the user vault\n\n      const user = fcl.currentUser();\n      const {\n        authorization\n      } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot); // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n\n      const fungibleTokenContractAddress = \"0x01cf0e2f2f715450\";\n      const awardContractAddress = \"0xfd43f9148d4b725d\";\n      const initCode = await generateCode(giveNFTAward, {\n        query: /(0x01|0x02|0x03)/g,\n        \"0x01\": awardContractAddress,\n        \"0x02\": fungibleTokenContractAddress,\n        \"0x03\": `0x${recipientAddress}`\n      });\n\n      try {\n        const initResponse = await fcl.send([sdk.transaction`${initCode}`, fcl.proposer(authorization), fcl.payer(authorization), fcl.authorizations([authorization]), fcl.limit(100)], {\n          node: \"http://localhost:8080\"\n        });\n        console.log(\"give award initResponse\", initResponse);\n      } catch (e) {\n        console.log(\"give award caught error\", e);\n      }\n    };\n\n    const [associateWallet, {\n      data,\n      loading,\n      error\n    }] = useMutation(ASSOCIATE_WALLET, {\n      update: (cache, {\n        data\n      }) => {\n        const {\n          me: currentUserData\n        } = cache.readQuery({\n          query: CURRENT_USER_QUERY\n        });\n        cache.writeQuery({\n          query: CURRENT_USER_QUERY,\n          data: {\n            me: _objectSpread(_objectSpread({}, currentUserData), data.associateWallet)\n          }\n        });\n      },\n      onError: () => {\n        toast.error(\"😳Ekkk! Failed to associate wallet.\", {\n          position: \"bottom-left\"\n        });\n      }\n    });\n\n    const connectActiveWalletToLyraLabs = async () => {\n      associateWallet({\n        variables: {\n          address: walletUser.addr\n        }\n      });\n    };\n\n    return __jsx(WalletContext.Provider, {\n      value: {\n        walletConnected,\n        walletNotConnected,\n        setupWallet,\n        setupFCLAuthHandler,\n        walletUser,\n        setupUserVault,\n        vaultIsSetup,\n        setupUserCollection,\n        collectionIsSetup,\n        walletBalance,\n        walletCollection,\n        connectActiveWalletToLyraLabs,\n        giveAward\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 7\n      }\n    }, __jsx(Component, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return WithWallet;\n};","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/shared/enhancers/wallet-provider.js"],"names":["React","useState","fcl","sdk","useMutation","ASSOCIATE_WALLET","toast","CURRENT_USER_QUERY","checkReference","checkCollection","checkActiveWalletScript","vaultBalance","getCollectionItems","userVault","setupNFTCollection","giveNFTAward","WalletContext","createContext","config","put","getAddress","user","nullPrefix","addr","generateCode","rawCode","match","query","replace","item","withWallet","Component","WithWallet","walletUser","setWalletUser","vaultIsSetup","setVaultIsSetup","collectionIsSetup","setCollectionIsSetup","walletBalance","setWalletBalance","walletCollection","setWalletCollection","walletConnected","loggedIn","walletNotConnected","setupFCLAuthHandler","currentUser","subscribe","vaultStatus","checkUserVaultStatus","startBalancePoll","collectionStatus","checkUserCollectionStatus","getUserCollection","console","log","pollId","balance","getUserBalance","setTimeout","snapshot","address","contractAddress","scriptCode","script","response","send","decode","items","setupUserVault","authorization","initCode","initResponse","transaction","proposer","payer","authorizations","limit","node","e","checkResult","setupUserCollection","checkActiveWallet","FUNGIBLE_TOKEN_CONTRACT_ADDRESS","NON_FUNGIBLE_TOKEN_CONTRACT_ADDRESS","activeWalletStatus","setupActiveWallet","setupWallet","giveAward","recipientAddress","fungibleTokenContractAddress","awardContractAddress","associateWallet","data","loading","error","update","cache","me","currentUserData","readQuery","writeQuery","onError","position","connectActiveWalletToLyraLabs","variables"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport * as fcl from \"@onflow/fcl\";\nimport * as sdk from \"@onflow/sdk\";\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ASSOCIATE_WALLET } from \"@data/mutations\";\nimport { toast } from \"react-toastify\";\nimport { CURRENT_USER_QUERY } from \"../../data/queries\";\n\nimport checkReference from \"../../flow/scripts/check-ref.cdc\";\nimport checkCollection from \"../../flow/scripts/check-collection.cdc\";\nimport checkActiveWalletScript from \"../../flow/scripts/check-active-wallet.cdc\";\nimport vaultBalance from \"../../flow/scripts/vault-balance.cdc\";\nimport getCollectionItems from \"../../flow/scripts/get-collection-items.cdc\";\nimport userVault from \"../../flow/transactions/user-vault.cdc\";\nimport setupNFTCollection from \"../../flow/transactions/setup-nft-collection.cdc\";\nimport giveNFTAward from \"../../flow/transactions/give-nft-award.cdc\";\n\nexport const WalletContext = React.createContext({});\n\nfcl\n  .config()\n  .put(\"challenge.handshake\", \"http://localhost:8701/flow/authenticate\");\n\nconst getAddress = (user, nullPrefix = true) => {\n  return nullPrefix ? `0x${user.addr}` : user.addr;\n};\n\nconst generateCode = async (rawCode, match) => {\n  if (!match) {\n    return rawCode;\n  }\n  const { query } = match;\n  return rawCode.replace(query, (item) => {\n    return match[item];\n  });\n};\n\nexport const withWallet = (Component) => {\n  const WithWallet = () => {\n    const [walletUser, setWalletUser] = useState(null);\n    const [vaultIsSetup, setVaultIsSetup] = useState(false);\n    const [collectionIsSetup, setCollectionIsSetup] = useState(false);\n    const [walletBalance, setWalletBalance] = useState(null);\n    const [walletCollection, setWalletCollection] = useState(null);\n\n    const walletConnected = walletUser && walletUser.loggedIn;\n    const walletNotConnected =\n      walletUser === null || (walletUser && !walletUser.loggedIn);\n\n    const setupFCLAuthHandler = () => {\n      fcl.currentUser().subscribe(async (user) => {\n        if (user.loggedIn) {\n          setWalletUser(user);\n          // Check if the wallet is set up yet\n          const vaultStatus = await checkUserVaultStatus();\n          setVaultIsSetup(vaultStatus);\n          if (vaultStatus) {\n            startBalancePoll();\n          }\n          const collectionStatus = await checkUserCollectionStatus();\n          setCollectionIsSetup(collectionStatus);\n          if (collectionStatus) {\n            getUserCollection();\n          }\n        } else {\n          console.log(\"is not logged in\");\n        }\n      });\n    };\n\n    let pollId = null;\n    const startBalancePoll = async () => {\n      const balance = await getUserBalance();\n      setWalletBalance(balance);\n      pollId = setTimeout(startBalancePoll, 2000);\n    };\n\n    const getUserBalance = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0x01cf0e2f2f715450\";\n      const scriptCode = await generateCode(vaultBalance, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const balance = await fcl.decode(response);\n      return balance;\n    };\n\n    const getUserCollection = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      //   const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      const contractAddress = \"0xfd43f9148d4b725d\";\n      const scriptCode = await generateCode(getCollectionItems, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const items = await fcl.decode(response);\n      setWalletCollection(items);\n    };\n\n    const setupUserVault = async () => {\n      // Create the user vault\n      const user = fcl.currentUser();\n      const { authorization } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0x01cf0e2f2f715450\";\n      const initCode = await generateCode(userVault, {\n        query: /(0x01)/g,\n        \"0x01\": contractAddress,\n      });\n      try {\n        const initResponse = await fcl.send(\n          [\n            sdk.transaction`${initCode}`,\n            fcl.proposer(authorization),\n            fcl.payer(authorization),\n            fcl.authorizations([authorization]),\n            fcl.limit(100),\n          ],\n          {\n            node: \"http://localhost:8080\",\n          }\n        );\n      } catch (e) {\n        console.log(\"setupUserVault caught error\", e);\n      }\n    };\n\n    const checkUserVaultStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const contractAddress = \"0x01cf0e2f2f715450\";\n      const scriptCode = await generateCode(checkReference, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const checkUserCollectionStatus = async () => {\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      //   const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      const contractAddress = \"0xfd43f9148d4b725d\";\n      const scriptCode = await generateCode(checkCollection, {\n        query: /(0x01|0x02)/g,\n        \"0x01\": contractAddress,\n        \"0x02\": address,\n      });\n\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const checkResult = await fcl.decode(response);\n      return checkResult;\n    };\n\n    const setupUserCollection = async () => {\n      // Create the user vault\n      const user = fcl.currentUser();\n      const { authorization } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      const contractAddress = \"0xfd43f9148d4b725d\";\n      const initCode = await generateCode(setupNFTCollection, {\n        query: /(0x01)/g,\n        \"0x01\": contractAddress,\n      });\n      try {\n        const initResponse = await fcl.send(\n          [\n            sdk.transaction`${initCode}`,\n            fcl.proposer(authorization),\n            fcl.payer(authorization),\n            fcl.authorizations([authorization]),\n            fcl.limit(100),\n          ],\n          {\n            node: \"http://localhost:8080\",\n          }\n        );\n      } catch (e) {\n        console.log(\"setupNFTCollection caught error\", e);\n      }\n    };\n\n    const checkActiveWallet = async () => {\n      // Checks if the active wallet is setup\n      const user = fcl.currentUser();\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      const scriptCode = await generateCode(checkActiveWalletScript, {\n        query: /(0x01|0x02|0x03)/g,\n        \"0x01\": `0x${FUNGIBLE_TOKEN_CONTRACT_ADDRESS}`,\n        \"0x02\": `0x${NON_FUNGIBLE_TOKEN_CONTRACT_ADDRESS}`,\n        \"0x03\": address,\n      });\n      const script = sdk.script`${scriptCode}`;\n      const response = await fcl.send([script]);\n      const activeWalletStatus = await fcl.decode(response);\n      return activeWalletStatus;\n    };\n\n    const setupActiveWallet = async () => {\n      // Creates a vault and collection in the active wallet\n    };\n\n    const setupWallet = async () => {\n      console.log(\"Creates a vault and collection in the active wallet\");\n    };\n\n    const giveAward = async ({ recipientAddress }) => {\n      console.log(\"giving award to recipientAddress\", recipientAddress);\n      // Create the user vault\n      const user = fcl.currentUser();\n      const { authorization } = user;\n      const snapshot = await user.snapshot();\n      const address = getAddress(snapshot);\n      // const contractAddress = \"0xf3fcd2c1a78f5eee\";\n      const fungibleTokenContractAddress = \"0x01cf0e2f2f715450\";\n      const awardContractAddress = \"0xfd43f9148d4b725d\";\n      const initCode = await generateCode(giveNFTAward, {\n        query: /(0x01|0x02|0x03)/g,\n        \"0x01\": awardContractAddress,\n        \"0x02\": fungibleTokenContractAddress,\n        \"0x03\": `0x${recipientAddress}`,\n      });\n      try {\n        const initResponse = await fcl.send(\n          [\n            sdk.transaction`${initCode}`,\n            fcl.proposer(authorization),\n            fcl.payer(authorization),\n            fcl.authorizations([authorization]),\n            fcl.limit(100),\n          ],\n          {\n            node: \"http://localhost:8080\",\n          }\n        );\n        console.log(\"give award initResponse\", initResponse);\n      } catch (e) {\n        console.log(\"give award caught error\", e);\n      }\n    };\n\n    const [associateWallet, { data, loading, error }] = useMutation(\n      ASSOCIATE_WALLET,\n      {\n        update: (cache, { data }) => {\n          const { me: currentUserData } = cache.readQuery({\n            query: CURRENT_USER_QUERY,\n          });\n          cache.writeQuery({\n            query: CURRENT_USER_QUERY,\n            data: { me: { ...currentUserData, ...data.associateWallet } },\n          });\n        },\n        onError: () => {\n          toast.error(\"😳Ekkk! Failed to associate wallet.\", {\n            position: \"bottom-left\",\n          });\n        },\n      }\n    );\n\n    const connectActiveWalletToLyraLabs = async () => {\n      associateWallet({\n        variables: {\n          address: walletUser.addr,\n        },\n      });\n    };\n\n    return (\n      <WalletContext.Provider\n        value={{\n          walletConnected,\n          walletNotConnected,\n          setupWallet,\n          setupFCLAuthHandler,\n          walletUser,\n          setupUserVault,\n          vaultIsSetup,\n          setupUserCollection,\n          collectionIsSetup,\n          walletBalance,\n          walletCollection,\n          connectActiveWalletToLyraLabs,\n          giveAward,\n        }}\n      >\n        <Component />\n      </WalletContext.Provider>\n    );\n  };\n  return WithWallet;\n};\n"]},"metadata":{},"sourceType":"module"}