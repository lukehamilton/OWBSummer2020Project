{"ast":null,"code":"import _styled from \"@emotion/styled-base\";\nvar _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/components/post-card/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React from \"react\";\nimport { BASE_TEXT, WEIGHT } from \"@style/typography\";\nimport { BLACK, GUNSMOKE, WHITE, SCOPRION } from \"@style/colors\";\nimport { toast } from \"react-toastify\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ARCHIVE_POST } from \"@data/mutations\";\nimport { UNARCHIVE_POST } from \"@data/mutations\";\nimport { USER_POSTS } from \"@data/queries\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArchive, faThumbtack } from \"@fortawesome/pro-light-svg-icons\";\nexport const THUMBNAIL_DIMENSION = 60;\nexport const Container =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth20\",\n  label: \"Container\"\n})({\n  display: \"flex\",\n  flexDirection: \"column\",\n  borderRadius: 3,\n  marginBottom: 12,\n  backgroundColor: WHITE,\n  boxShadow: \"0 1px 2px 0 rgba(0,0,0,.1)\",\n  padding: \"1rem\"\n}, false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\nexport const Body =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth21\",\n  label: \"Body\"\n})(false ? {\n  name: \"k008qs\",\n  styles: \"display:flex;\"\n} : {\n  name: \"k008qs\",\n  styles: \"display:flex;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst Footer =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth22\",\n  label: \"Footer\"\n})(false ? {\n  name: \"1vctmtz\",\n  styles: \"margin-top:.5rem;display:flex;flex-direction:row;\"\n} : {\n  name: \"1vctmtz\",\n  styles: \"margin-top:.5rem;display:flex;flex-direction:row;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst Thumbnail =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth23\",\n  label: \"Thumbnail\"\n})({\n  // height: 120,\n  // width: 150,\n  flexShrink: 0,\n  borderRadius: 2,\n  height: THUMBNAIL_DIMENSION,\n  width: THUMBNAIL_DIMENSION\n}, ({\n  src\n}) => ({\n  backgroundImage: `url(${src})`,\n  backgroundSize: \"cover,auto\",\n  backgroundPosition: \"50% 50%,50% 50%\"\n}), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nexport const Content =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth24\",\n  label: \"Content\"\n})(false ? {\n  name: \"77vupy\",\n  styles: \"margin-left:1rem;\"\n} : {\n  name: \"77vupy\",\n  styles: \"margin-left:1rem;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst Title =\n/*#__PURE__*/\n_styled(\"a\", {\n  target: \"e2uwth25\",\n  label: \"Title\"\n})(_objectSpread({}, BASE_TEXT, {\n  fontSize: \"1rem\",\n  fontWeight: WEIGHT.BOLD,\n  wordBreak: \"break-word\",\n  textDecoration: \"none\",\n  color: BLACK\n}), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nconst MetaLine =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth26\",\n  label: \"MetaLine\"\n})(false ? {\n  name: \"70qvj9\",\n  styles: \"display:flex;align-items:center;\"\n} : {\n  name: \"70qvj9\",\n  styles: \"display:flex;align-items:center;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWtlaGFtaWx0b24vZGV2ZWxvcG1lbnQvbHlyYS1sYWJzLWRldi9seXJhLWxhYnMvZnJvbnRlbmQvY29tcG9uZW50cy9wb3N0LWNhcmQvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0VpQiIsImZpbGUiOiIvVXNlcnMvbHVrZWhhbWlsdG9uL2RldmVsb3BtZW50L2x5cmEtbGFicy1kZXYvbHlyYS1sYWJzL2Zyb250ZW5kL2NvbXBvbmVudHMvcG9zdC1jYXJkL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5pbXBvcnQgeyBCQVNFX1RFWFQsIFdFSUdIVCB9IGZyb20gXCJAc3R5bGUvdHlwb2dyYXBoeVwiO1xuaW1wb3J0IHsgQkxBQ0ssIEdVTlNNT0tFLCBXSElURSwgU0NPUFJJT04gfSBmcm9tIFwiQHN0eWxlL2NvbG9yc1wiO1xuaW1wb3J0IHsgdG9hc3QgfSBmcm9tIFwicmVhY3QtdG9hc3RpZnlcIjtcbmltcG9ydCB7IHVzZU11dGF0aW9uIH0gZnJvbSBcIkBhcG9sbG8vcmVhY3QtaG9va3NcIjtcbmltcG9ydCB7IEFSQ0hJVkVfUE9TVCB9IGZyb20gXCJAZGF0YS9tdXRhdGlvbnNcIjtcbmltcG9ydCB7IFVOQVJDSElWRV9QT1NUIH0gZnJvbSBcIkBkYXRhL211dGF0aW9uc1wiO1xuaW1wb3J0IHsgVVNFUl9QT1NUUyB9IGZyb20gXCJAZGF0YS9xdWVyaWVzXCI7XG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tIFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCI7XG5pbXBvcnQgeyBmYUFyY2hpdmUsIGZhVGh1bWJ0YWNrIH0gZnJvbSBcIkBmb3J0YXdlc29tZS9wcm8tbGlnaHQtc3ZnLWljb25zXCI7XG5cbmV4cG9ydCBjb25zdCBUSFVNQk5BSUxfRElNRU5TSU9OID0gNjA7XG5cbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSBzdHlsZWQoXCJkaXZcIikoe1xuICBkaXNwbGF5OiBcImZsZXhcIixcbiAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgYm9yZGVyUmFkaXVzOiAzLFxuICBtYXJnaW5Cb3R0b206IDEyLFxuICBiYWNrZ3JvdW5kQ29sb3I6IFdISVRFLFxuICBib3hTaGFkb3c6IFwiMCAxcHggMnB4IDAgcmdiYSgwLDAsMCwuMSlcIixcbiAgcGFkZGluZzogXCIxcmVtXCIsXG59KTtcblxuZXhwb3J0IGNvbnN0IEJvZHkgPSBzdHlsZWQoXCJkaXZcIikoe1xuICBkaXNwbGF5OiBcImZsZXhcIixcbn0pO1xuXG5jb25zdCBGb290ZXIgPSBzdHlsZWQoXCJkaXZcIikoe1xuICBtYXJnaW5Ub3A6IFwiLjVyZW1cIixcbiAgZGlzcGxheTogXCJmbGV4XCIsXG4gIGZsZXhEaXJlY3Rpb246IFwicm93XCIsXG59KTtcblxuY29uc3QgVGh1bWJuYWlsID0gc3R5bGVkKFwiZGl2XCIpKFxuICB7XG4gICAgLy8gaGVpZ2h0OiAxMjAsXG4gICAgLy8gd2lkdGg6IDE1MCxcbiAgICBmbGV4U2hyaW5rOiAwLFxuICAgIGJvcmRlclJhZGl1czogMixcbiAgICBoZWlnaHQ6IFRIVU1CTkFJTF9ESU1FTlNJT04sXG4gICAgd2lkdGg6IFRIVU1CTkFJTF9ESU1FTlNJT04sXG4gIH0sXG4gICh7IHNyYyB9KSA9PiAoe1xuICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke3NyY30pYCxcbiAgICBiYWNrZ3JvdW5kU2l6ZTogXCJjb3ZlcixhdXRvXCIsXG5cbiAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFwiNTAlIDUwJSw1MCUgNTAlXCIsXG4gIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgQ29udGVudCA9IHN0eWxlZChcImRpdlwiKSh7XG4gIG1hcmdpbkxlZnQ6IFwiMXJlbVwiLFxufSk7XG5cbmNvbnN0IFRpdGxlID0gc3R5bGVkKFwiYVwiKSh7XG4gIC4uLkJBU0VfVEVYVCxcbiAgZm9udFNpemU6IFwiMXJlbVwiLFxuICBmb250V2VpZ2h0OiBXRUlHSFQuQk9MRCxcbiAgd29yZEJyZWFrOiBcImJyZWFrLXdvcmRcIixcbiAgdGV4dERlY29yYXRpb246IFwibm9uZVwiLFxuICBjb2xvcjogQkxBQ0ssXG59KTtcblxuY29uc3QgTWV0YUxpbmUgPSBzdHlsZWQoXCJkaXZcIikoe1xuICBkaXNwbGF5OiBcImZsZXhcIixcbiAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbn0pO1xuXG5jb25zdCBQdWJsaXNoZXJMaW5lID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgZGlzcGxheTogXCJmbGV4XCIsXG4gIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gIG1hcmdpblRvcDogXCIuMjVyZW1cIixcbn0pO1xuXG5jb25zdCBNZXRhVGV4dCA9IHN0eWxlZChcImRpdlwiKSh7XG4gIGRpc3BsYXk6IFwiZmxleFwiLFxuICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxufSk7XG5cbmNvbnN0IEF1dGhvciA9IHN0eWxlZChcImRpdlwiKSh7XG4gIC4uLkJBU0VfVEVYVCxcbiAgY29sb3I6IFNDT1BSSU9OLFxuICBmb250V2VpZ2h0OiBXRUlHSFQuQk9MRCxcbn0pO1xuXG5jb25zdCBTb3VyY2VMb2dvID0gc3R5bGVkKFwiZGl2XCIpKFxuICB7XG4gICAgd2lkdGg6IFwiMXJlbVwiLFxuICAgIGhlaWdodDogXCIxcmVtXCIsXG4gIH0sXG4gICh7IHNyYyB9KSA9PiAoe1xuICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke3NyY30pYCxcbiAgICBiYWNrZ3JvdW5kU2l6ZTogXCJjb3ZlcixhdXRvXCIsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcIjUwJSA1MCUsNTAlIDUwJVwiLFxuICAgIGJvcmRlcjogYDFweCBzb2xpZCAke0dVTlNNT0tFfWAsXG4gIH0pXG4pO1xuXG5jb25zdCBQdWJsaXNoZXIgPSBzdHlsZWQoXCJkaXZcIikoe1xuICAuLi5CQVNFX1RFWFQsXG4gIGNvbG9yOiBTQ09QUklPTixcbiAgLy8gICBmb250V2VpZ2h0OiBXRUlHSFQuQk9MRCxcbiAgbWFyZ2luTGVmdDogXCIuNXJlbVwiLFxufSk7XG5cbmNvbnN0IERpdmlkZXIgPSBzdHlsZWQoXCJkaXZcIikoe1xuICBoZWlnaHQ6IDE4LFxuICBkaXNwbGF5OiBcImZsZXhcIixcbiAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgXCImOjphZnRlclwiOiB7XG4gICAgY29udGVudDogYCfjg7snYCxcbiAgICBjb2xvcjogU0NPUFJJT04sXG4gIH0sXG59KTtcblxuY29uc3QgRGF0ZUNvbnRhaW5lciA9IHN0eWxlZChcImRpdlwiKSh7fSk7XG5cbmNvbnN0IEFjdGlvbnMgPSBzdHlsZWQoXCJkaXZcIikoe1xuICBkaXNwbGF5OiBcImZsZXhcIixcbiAgXCIgPiBkaXY6Zmlyc3Qtb2YtdHlwZVwiOiB7XG4gICAgbWFyZ2luTGVmdDogMCxcbiAgfSxcbn0pO1xuXG5jb25zdCBOYW1lID0gc3R5bGVkKFwiZGl2XCIpKHtcbiAgLi4uQkFTRV9URVhULFxufSk7XG5cbmNvbnN0IEFjdGlvbiA9IHN0eWxlZChcImRpdlwiKSh7XG4gIG1hcmdpbkxlZnQ6IFwiLjVyZW1cIixcbiAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgYmFja2dyb3VuZENvbG9yOiBcIiNFRjkzN0ZcIixcbiAgZGlzcGxheTogXCJmbGV4XCIsXG4gIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICB3aWR0aDogMjYsXG4gIGhlaWdodDogMjYsXG59KTtcblxuY29uc3QgSWNvbiA9IHN0eWxlZChcImRpdlwiKSh7XG4gIGZvbnRTaXplOiBcIi43NXJlbVwiLFxufSk7XG5cbmNvbnN0IFBvc3RDYXJkID0gKHtcbiAgcG9zdDogeyBpZCwgaW1hZ2UsIHRpdGxlLCBhcmNoaXZlZCwgYXV0aG9yLCB1cmwsIGxvZ28sIHB1Ymxpc2hlciwgZGF0ZSB9LFxufSkgPT4ge1xuICBjb25zdCBbYXJjaGl2ZVBvc3RdID0gdXNlTXV0YXRpb24oQVJDSElWRV9QT1NULCB7XG4gICAgdXBkYXRlOiAoY2FjaGUsIHsgZGF0YTogeyBhcmNoaXZlUG9zdDogcG9zdCB9IH0pID0+IHtcbiAgICAgIC8vIFJlbW92ZSBwb3N0IGZyb20gcmVhZGluZyBsaXN0IHF1ZXJ5XG4gICAgICBjb25zdCB7IHVzZXJQb3N0czogcG9zdHMgfSA9IGNhY2hlLnJlYWRRdWVyeSh7XG4gICAgICAgIHF1ZXJ5OiBVU0VSX1BPU1RTLFxuICAgICAgICB2YXJpYWJsZXM6IHsgYXJjaGl2ZWQ6IGZhbHNlIH0sXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGluZGV4ID0gcG9zdHMuZmluZEluZGV4KChwb3N0KSA9PiBwb3N0LmlkID09PSBpZCk7XG4gICAgICBjYWNoZS53cml0ZVF1ZXJ5KHtcbiAgICAgICAgcXVlcnk6IFVTRVJfUE9TVFMsXG4gICAgICAgIHZhcmlhYmxlczogeyBhcmNoaXZlZDogZmFsc2UgfSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHVzZXJQb3N0czogW1xuICAgICAgICAgICAgLi4ucG9zdHMuc2xpY2UoMCwgaW5kZXgpLFxuICAgICAgICAgICAgLi4ucG9zdHMuc2xpY2UoaW5kZXggKyAxLCBwb3N0cy5sZW5ndGgpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIC8vIEFkZCBwb3N0IHRvIGFyY2hpdmVcbiAgICAgIGNvbnN0IHF1ZXJ5SW5DYWNoZSA9XG4gICAgICAgIGNhY2hlLmRhdGEuZGF0YS5ST09UX1FVRVJZWyd1c2VyUG9zdHMoe1wiYXJjaGl2ZWRcIjp0cnVlfSknXTtcbiAgICAgIGlmIChxdWVyeUluQ2FjaGUpIHtcbiAgICAgICAgY29uc3QgeyB1c2VyUG9zdHM6IGFyY2hpdmVkUG9zdHMgfSA9IGNhY2hlLnJlYWRRdWVyeSh7XG4gICAgICAgICAgcXVlcnk6IFVTRVJfUE9TVFMsXG4gICAgICAgICAgdmFyaWFibGVzOiB7IGFyY2hpdmVkOiB0cnVlIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjYWNoZS53cml0ZVF1ZXJ5KHtcbiAgICAgICAgICBxdWVyeTogVVNFUl9QT1NUUyxcbiAgICAgICAgICB2YXJpYWJsZXM6IHsgYXJjaGl2ZWQ6IHRydWUgfSxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB1c2VyUG9zdHM6IFtwb3N0LCAuLi5hcmNoaXZlZFBvc3RzXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgb25FcnJvcjogKCkgPT4ge1xuICAgICAgdG9hc3QuZXJyb3IoXCLwn5izVW5hYmxlIHRvIGFyY2hpdmUgcG9zdCBhdCB0aGlzIHRpbWUuXCIsIHtcbiAgICAgICAgcG9zaXRpb246IFwiYm90dG9tLWxlZnRcIixcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IFt1bmFyY2hpdmVQb3N0XSA9IHVzZU11dGF0aW9uKFVOQVJDSElWRV9QT1NULCB7XG4gICAgdXBkYXRlOiAoY2FjaGUsIHsgZGF0YTogeyB1bmFyY2hpdmVQb3N0OiBwb3N0IH0gfSkgPT4ge1xuICAgICAgLy8gUmVtb3ZlIHBvc3QgZnJvbSBhcmNoaXZlIHF1ZXJ5XG4gICAgICBjb25zdCB7IHVzZXJQb3N0czogYXJjaGl2ZWRQb3N0cyB9ID0gY2FjaGUucmVhZFF1ZXJ5KHtcbiAgICAgICAgcXVlcnk6IFVTRVJfUE9TVFMsXG4gICAgICAgIHZhcmlhYmxlczogeyBhcmNoaXZlZDogdHJ1ZSB9LFxuICAgICAgfSk7XG4gICAgICBjb25zdCBpbmRleCA9IGFyY2hpdmVkUG9zdHMuZmluZEluZGV4KFxuICAgICAgICAoYXJjaGl2ZWRQb3N0KSA9PiBhcmNoaXZlZFBvc3QuaWQgPT09IGlkXG4gICAgICApO1xuICAgICAgY2FjaGUud3JpdGVRdWVyeSh7XG4gICAgICAgIHF1ZXJ5OiBVU0VSX1BPU1RTLFxuICAgICAgICB2YXJpYWJsZXM6IHsgYXJjaGl2ZWQ6IHRydWUgfSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHVzZXJQb3N0czogW1xuICAgICAgICAgICAgLi4uYXJjaGl2ZWRQb3N0cy5zbGljZSgwLCBpbmRleCksXG4gICAgICAgICAgICAuLi5hcmNoaXZlZFBvc3RzLnNsaWNlKGluZGV4ICsgMSwgYXJjaGl2ZWRQb3N0cy5sZW5ndGgpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIC8vIEFkZCBwb3N0IHRvIGFyY2hpdmVcbiAgICAgIGNvbnN0IHF1ZXJ5SW5DYWNoZSA9XG4gICAgICAgIGNhY2hlLmRhdGEuZGF0YS5ST09UX1FVRVJZWyd1c2VyUG9zdHMoe1wiYXJjaGl2ZWRcIjpmYWxzZX0pJ107XG4gICAgICBpZiAocXVlcnlJbkNhY2hlKSB7XG4gICAgICAgIGNvbnN0IHsgdXNlclBvc3RzOiBwb3N0cyB9ID0gY2FjaGUucmVhZFF1ZXJ5KHtcbiAgICAgICAgICBxdWVyeTogVVNFUl9QT1NUUyxcbiAgICAgICAgICB2YXJpYWJsZXM6IHsgYXJjaGl2ZWQ6IGZhbHNlIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjYWNoZS53cml0ZVF1ZXJ5KHtcbiAgICAgICAgICBxdWVyeTogVVNFUl9QT1NUUyxcbiAgICAgICAgICB2YXJpYWJsZXM6IHsgYXJjaGl2ZWQ6IGZhbHNlIH0sXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdXNlclBvc3RzOiBbcG9zdCwgLi4ucG9zdHNdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkVycm9yOiAoKSA9PiB7XG4gICAgICB0b2FzdC5lcnJvcihcIvCfmLNVbmFibGUgdG8gdW5hcmNoaXZlIHBvc3QgYXQgdGhpcyB0aW1lLlwiLCB7XG4gICAgICAgIHBvc2l0aW9uOiBcImJvdHRvbS1sZWZ0XCIsXG4gICAgICB9KTtcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBBQ1RJT05TID0gW1xuICAgIHtcbiAgICAgIGljb246IFwi8J+TjFwiLFxuICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNsaWNrZWQgcGluXCIpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGljb246IFwi8J+Xg1wiLFxuICAgICAgb25DbGljazogKGlkKSA9PiB7XG4gICAgICAgIGNvbnN0IGZ1bmMgPSBhcmNoaXZlZCA/IHVuYXJjaGl2ZVBvc3QgOiBhcmNoaXZlUG9zdDtcbiAgICAgICAgZnVuYyh7XG4gICAgICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgICAgICBwb3N0SWQ6IGlkLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9LFxuICBdO1xuXG4gIHJldHVybiAoXG4gICAgPENvbnRhaW5lcj5cbiAgICAgIDxCb2R5PlxuICAgICAgICB7aW1hZ2UgJiYgPFRodW1ibmFpbCBzcmM9e2ltYWdlfSAvPn1cbiAgICAgICAgPENvbnRlbnQ+XG4gICAgICAgICAgPFRpdGxlIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9e3VybH0+XG4gICAgICAgICAgICB7dGl0bGV9XG4gICAgICAgICAgPC9UaXRsZT5cbiAgICAgICAgICA8UHVibGlzaGVyTGluZT5cbiAgICAgICAgICAgIDxTb3VyY2VMb2dvIHNyYz17bG9nb30gLz5cbiAgICAgICAgICAgIDxQdWJsaXNoZXI+e3B1Ymxpc2hlcn08L1B1Ymxpc2hlcj5cbiAgICAgICAgICA8L1B1Ymxpc2hlckxpbmU+XG4gICAgICAgIDwvQ29udGVudD5cbiAgICAgIDwvQm9keT5cbiAgICAgIDxGb290ZXI+XG4gICAgICAgIDxBY3Rpb25zPlxuICAgICAgICAgIHtBQ1RJT05TLm1hcCgoeyBpY29uLCBuYW1lLCBvbkNsaWNrIH0sIGkpID0+IChcbiAgICAgICAgICAgIDxBY3Rpb24ga2V5PXtpfSBvbkNsaWNrPXsoKSA9PiBvbkNsaWNrKGlkKX0+XG4gICAgICAgICAgICAgIDxJY29uPntpY29ufTwvSWNvbj5cbiAgICAgICAgICAgIDwvQWN0aW9uPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L0FjdGlvbnM+XG4gICAgICA8L0Zvb3Rlcj5cbiAgICA8L0NvbnRhaW5lcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBvc3RDYXJkO1xuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst PublisherLine =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth27\",\n  label: \"PublisherLine\"\n})(false ? {\n  name: \"kea77a\",\n  styles: \"display:flex;align-items:center;margin-top:.25rem;\"\n} : {\n  name: \"kea77a\",\n  styles: \"display:flex;align-items:center;margin-top:.25rem;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst MetaText =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth28\",\n  label: \"MetaText\"\n})(false ? {\n  name: \"70qvj9\",\n  styles: \"display:flex;align-items:center;\"\n} : {\n  name: \"70qvj9\",\n  styles: \"display:flex;align-items:center;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst Author =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth29\",\n  label: \"Author\"\n})(_objectSpread({}, BASE_TEXT, {\n  color: SCOPRION,\n  fontWeight: WEIGHT.BOLD\n}), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nconst SourceLogo =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth210\",\n  label: \"SourceLogo\"\n})(\"width:1rem;height:1rem;\", ({\n  src\n}) => ({\n  backgroundImage: `url(${src})`,\n  backgroundSize: \"cover,auto\",\n  backgroundPosition: \"50% 50%,50% 50%\",\n  border: `1px solid ${GUNSMOKE}`\n}), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nconst Publisher =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth211\",\n  label: \"Publisher\"\n})(_objectSpread({}, BASE_TEXT, {\n  color: SCOPRION,\n  //   fontWeight: WEIGHT.BOLD,\n  marginLeft: \".5rem\"\n}), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nconst Divider =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth212\",\n  label: \"Divider\"\n})({\n  height: 18,\n  display: \"flex\",\n  alignItems: \"center\",\n  \"&::after\": {\n    content: `'・'`,\n    color: SCOPRION\n  }\n}, false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nconst DateContainer =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth213\",\n  label: \"DateContainer\"\n})(false ? {\n  name: \"0\",\n  styles: \"\"\n} : {\n  name: \"0\",\n  styles: \"\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst Actions =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth214\",\n  label: \"Actions\"\n})(false ? {\n  name: \"12ujm7s\",\n  styles: \"display:flex; > div:first-of-type{margin-left:0;}\"\n} : {\n  name: \"12ujm7s\",\n  styles: \"display:flex; > div:first-of-type{margin-left:0;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst Name =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth215\",\n  label: \"Name\"\n})(_objectSpread({}, BASE_TEXT), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nconst Action =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth216\",\n  label: \"Action\"\n})(false ? {\n  name: \"5zhh3b\",\n  styles: \"margin-left:.5rem;cursor:pointer;background-color:#EF937F;display:flex;align-items:center;justify-content:center;width:26px;height:26px;\"\n} : {\n  name: \"5zhh3b\",\n  styles: \"margin-left:.5rem;cursor:pointer;background-color:#EF937F;display:flex;align-items:center;justify-content:center;width:26px;height:26px;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst Icon =\n/*#__PURE__*/\n_styled(\"div\", {\n  target: \"e2uwth217\",\n  label: \"Icon\"\n})(false ? {\n  name: \"80vkzx\",\n  styles: \"font-size:.75rem;\"\n} : {\n  name: \"80vkzx\",\n  styles: \"font-size:.75rem;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst PostCard = ({\n  post: {\n    id,\n    image,\n    title,\n    archived,\n    author,\n    url,\n    logo,\n    publisher,\n    date\n  }\n}) => {\n  const [archivePost] = useMutation(ARCHIVE_POST, {\n    update: (cache, {\n      data: {\n        archivePost: post\n      }\n    }) => {\n      // Remove post from reading list query\n      const {\n        userPosts: posts\n      } = cache.readQuery({\n        query: USER_POSTS,\n        variables: {\n          archived: false\n        }\n      });\n      const index = posts.findIndex(post => post.id === id);\n      cache.writeQuery({\n        query: USER_POSTS,\n        variables: {\n          archived: false\n        },\n        data: {\n          userPosts: [...posts.slice(0, index), ...posts.slice(index + 1, posts.length)]\n        }\n      }); // Add post to archive\n\n      const queryInCache = cache.data.data.ROOT_QUERY['userPosts({\"archived\":true})'];\n\n      if (queryInCache) {\n        const {\n          userPosts: archivedPosts\n        } = cache.readQuery({\n          query: USER_POSTS,\n          variables: {\n            archived: true\n          }\n        });\n        cache.writeQuery({\n          query: USER_POSTS,\n          variables: {\n            archived: true\n          },\n          data: {\n            userPosts: [post, ...archivedPosts]\n          }\n        });\n      }\n    },\n    onError: () => {\n      toast.error(\"😳Unable to archive post at this time.\", {\n        position: \"bottom-left\"\n      });\n    }\n  });\n  const [unarchivePost] = useMutation(UNARCHIVE_POST, {\n    update: (cache, {\n      data: {\n        unarchivePost: post\n      }\n    }) => {\n      // Remove post from archive query\n      const {\n        userPosts: archivedPosts\n      } = cache.readQuery({\n        query: USER_POSTS,\n        variables: {\n          archived: true\n        }\n      });\n      const index = archivedPosts.findIndex(archivedPost => archivedPost.id === id);\n      cache.writeQuery({\n        query: USER_POSTS,\n        variables: {\n          archived: true\n        },\n        data: {\n          userPosts: [...archivedPosts.slice(0, index), ...archivedPosts.slice(index + 1, archivedPosts.length)]\n        }\n      }); // Add post to archive\n\n      const queryInCache = cache.data.data.ROOT_QUERY['userPosts({\"archived\":false})'];\n\n      if (queryInCache) {\n        const {\n          userPosts: posts\n        } = cache.readQuery({\n          query: USER_POSTS,\n          variables: {\n            archived: false\n          }\n        });\n        cache.writeQuery({\n          query: USER_POSTS,\n          variables: {\n            archived: false\n          },\n          data: {\n            userPosts: [post, ...posts]\n          }\n        });\n      }\n    },\n    onError: () => {\n      toast.error(\"😳Unable to unarchive post at this time.\", {\n        position: \"bottom-left\"\n      });\n    }\n  });\n  const ACTIONS = [{\n    icon: \"📌\",\n    onClick: () => {\n      console.log(\"clicked pin\");\n    }\n  }, {\n    icon: \"🗃\",\n    onClick: id => {\n      const func = archived ? unarchivePost : archivePost;\n      func({\n        variables: {\n          postId: id\n        }\n      });\n    }\n  }];\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, __jsx(Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, image && __jsx(Thumbnail, {\n    src: image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }), __jsx(Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, __jsx(Title, {\n    target: \"_blank\",\n    href: url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, title), __jsx(PublisherLine, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, __jsx(SourceLogo, {\n    src: logo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }), __jsx(Publisher, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, publisher)))), __jsx(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, __jsx(Actions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, ACTIONS.map(({\n    icon,\n    name,\n    onClick\n  }, i) => __jsx(Action, {\n    key: i,\n    onClick: () => onClick(id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, __jsx(Icon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, icon))))));\n};\n\nexport default PostCard;","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/components/post-card/index.js"],"names":["React","BASE_TEXT","WEIGHT","BLACK","GUNSMOKE","WHITE","SCOPRION","toast","useMutation","ARCHIVE_POST","UNARCHIVE_POST","USER_POSTS","FontAwesomeIcon","faArchive","faThumbtack","THUMBNAIL_DIMENSION","Container","display","flexDirection","borderRadius","marginBottom","backgroundColor","boxShadow","padding","Body","Footer","Thumbnail","flexShrink","height","width","src","backgroundImage","backgroundSize","backgroundPosition","Content","Title","fontSize","fontWeight","BOLD","wordBreak","textDecoration","color","MetaLine","PublisherLine","MetaText","Author","SourceLogo","border","Publisher","marginLeft","Divider","alignItems","content","DateContainer","Actions","Name","Action","Icon","PostCard","post","id","image","title","archived","author","url","logo","publisher","date","archivePost","update","cache","data","userPosts","posts","readQuery","query","variables","index","findIndex","writeQuery","slice","length","queryInCache","ROOT_QUERY","archivedPosts","onError","error","position","unarchivePost","archivedPost","ACTIONS","icon","onClick","console","log","func","postId","map","name","i"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,mBAAlC;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,KAA1B,EAAiCC,QAAjC,QAAiD,eAAjD;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,kCAAvC;AAEA,OAAO,MAAMC,mBAAmB,GAAG,EAA5B;AAEP,OAAO,MAAMC,SAAS;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA,GAAc;AACrCC,EAAAA,OAAO,EAAE,MAD4B;AAErCC,EAAAA,aAAa,EAAE,QAFsB;AAGrCC,EAAAA,YAAY,EAAE,CAHuB;AAIrCC,EAAAA,YAAY,EAAE,EAJuB;AAKrCC,EAAAA,eAAe,EAAEhB,KALoB;AAMrCiB,EAAAA,SAAS,EAAE,4BAN0B;AAOrCC,EAAAA,OAAO,EAAE;AAP4B,CAAd,ilTAAlB;AAUP,OAAO,MAAMC,IAAI;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAb;;AAIP,MAAMC,MAAM;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAf;;AAMA,MAAMC,SAAS;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA,GAChB;AACE;AACA;AACAC,EAAAA,UAAU,EAAE,CAHd;AAIER,EAAAA,YAAY,EAAE,CAJhB;AAKES,EAAAA,MAAM,EAAEb,mBALV;AAMEc,EAAAA,KAAK,EAAEd;AANT,CADgB,EAShB,CAAC;AAAEe,EAAAA;AAAF,CAAD,MAAc;AACZC,EAAAA,eAAe,EAAG,OAAMD,GAAI,GADhB;AAEZE,EAAAA,cAAc,EAAE,YAFJ;AAIZC,EAAAA,kBAAkB,EAAE;AAJR,CAAd,CATgB,ilTAAlB;;AAiBA,OAAO,MAAMC,OAAO;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB;;AAIP,MAAMC,KAAK;AAAG;AAAA,QAAO,GAAP;AAAA;AAAA;AAAA,qBACTlC,SADS;AAEZmC,EAAAA,QAAQ,EAAE,MAFE;AAGZC,EAAAA,UAAU,EAAEnC,MAAM,CAACoC,IAHP;AAIZC,EAAAA,SAAS,EAAE,YAJC;AAKZC,EAAAA,cAAc,EAAE,MALJ;AAMZC,EAAAA,KAAK,EAAEtC;AANK,mlTAAd;;AASA,MAAMuC,QAAQ;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAjB;;AAKA,MAAMC,aAAa;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAtB;;AAMA,MAAMC,QAAQ;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAjB;;AAKA,MAAMC,MAAM;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA,qBACV5C,SADU;AAEbwC,EAAAA,KAAK,EAAEnC,QAFM;AAGb+B,EAAAA,UAAU,EAAEnC,MAAM,CAACoC;AAHN,mlTAAf;;AAMA,MAAMQ,UAAU;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA,8BAKjB,CAAC;AAAEhB,EAAAA;AAAF,CAAD,MAAc;AACZC,EAAAA,eAAe,EAAG,OAAMD,GAAI,GADhB;AAEZE,EAAAA,cAAc,EAAE,YAFJ;AAGZC,EAAAA,kBAAkB,EAAE,iBAHR;AAIZc,EAAAA,MAAM,EAAG,aAAY3C,QAAS;AAJlB,CAAd,CALiB,ilTAAnB;;AAaA,MAAM4C,SAAS;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA,qBACb/C,SADa;AAEhBwC,EAAAA,KAAK,EAAEnC,QAFS;AAGhB;AACA2C,EAAAA,UAAU,EAAE;AAJI,mlTAAlB;;AAOA,MAAMC,OAAO;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA,GAAc;AAC5BtB,EAAAA,MAAM,EAAE,EADoB;AAE5BX,EAAAA,OAAO,EAAE,MAFmB;AAG5BkC,EAAAA,UAAU,EAAE,QAHgB;AAI5B,cAAY;AACVC,IAAAA,OAAO,EAAG,KADA;AAEVX,IAAAA,KAAK,EAAEnC;AAFG;AAJgB,CAAd,ilTAAhB;;AAUA,MAAM+C,aAAa;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAtB;;AAEA,MAAMC,OAAO;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB;;AAOA,MAAMC,IAAI;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA,qBACRtD,SADQ,klTAAb;;AAIA,MAAMuD,MAAM;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAf;;AAWA,MAAMC,IAAI;AAAG;AAAA,QAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAb;;AAIA,MAAMC,QAAQ,GAAG,CAAC;AAChBC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,QAApB;AAA8BC,IAAAA,MAA9B;AAAsCC,IAAAA,GAAtC;AAA2CC,IAAAA,IAA3C;AAAiDC,IAAAA,SAAjD;AAA4DC,IAAAA;AAA5D;AADU,CAAD,KAEX;AACJ,QAAM,CAACC,WAAD,IAAgB7D,WAAW,CAACC,YAAD,EAAe;AAC9C6D,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQ;AAAEC,MAAAA,IAAI,EAAE;AAAEH,QAAAA,WAAW,EAAEV;AAAf;AAAR,KAAR,KAA4C;AAClD;AACA,YAAM;AAAEc,QAAAA,SAAS,EAAEC;AAAb,UAAuBH,KAAK,CAACI,SAAN,CAAgB;AAC3CC,QAAAA,KAAK,EAAEjE,UADoC;AAE3CkE,QAAAA,SAAS,EAAE;AAAEd,UAAAA,QAAQ,EAAE;AAAZ;AAFgC,OAAhB,CAA7B;AAIA,YAAMe,KAAK,GAAGJ,KAAK,CAACK,SAAN,CAAiBpB,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAtC,CAAd;AACAW,MAAAA,KAAK,CAACS,UAAN,CAAiB;AACfJ,QAAAA,KAAK,EAAEjE,UADQ;AAEfkE,QAAAA,SAAS,EAAE;AAAEd,UAAAA,QAAQ,EAAE;AAAZ,SAFI;AAGfS,QAAAA,IAAI,EAAE;AACJC,UAAAA,SAAS,EAAE,CACT,GAAGC,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAeH,KAAf,CADM,EAET,GAAGJ,KAAK,CAACO,KAAN,CAAYH,KAAK,GAAG,CAApB,EAAuBJ,KAAK,CAACQ,MAA7B,CAFM;AADP;AAHS,OAAjB,EAPkD,CAiBlD;;AACA,YAAMC,YAAY,GAChBZ,KAAK,CAACC,IAAN,CAAWA,IAAX,CAAgBY,UAAhB,CAA2B,8BAA3B,CADF;;AAEA,UAAID,YAAJ,EAAkB;AAChB,cAAM;AAAEV,UAAAA,SAAS,EAAEY;AAAb,YAA+Bd,KAAK,CAACI,SAAN,CAAgB;AACnDC,UAAAA,KAAK,EAAEjE,UAD4C;AAEnDkE,UAAAA,SAAS,EAAE;AAAEd,YAAAA,QAAQ,EAAE;AAAZ;AAFwC,SAAhB,CAArC;AAIAQ,QAAAA,KAAK,CAACS,UAAN,CAAiB;AACfJ,UAAAA,KAAK,EAAEjE,UADQ;AAEfkE,UAAAA,SAAS,EAAE;AAAEd,YAAAA,QAAQ,EAAE;AAAZ,WAFI;AAGfS,UAAAA,IAAI,EAAE;AACJC,YAAAA,SAAS,EAAE,CAACd,IAAD,EAAO,GAAG0B,aAAV;AADP;AAHS,SAAjB;AAOD;AACF,KAlC6C;AAoC9CC,IAAAA,OAAO,EAAE,MAAM;AACb/E,MAAAA,KAAK,CAACgF,KAAN,CAAY,wCAAZ,EAAsD;AACpDC,QAAAA,QAAQ,EAAE;AAD0C,OAAtD;AAGD;AAxC6C,GAAf,CAAjC;AA2CA,QAAM,CAACC,aAAD,IAAkBjF,WAAW,CAACE,cAAD,EAAiB;AAClD4D,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQ;AAAEC,MAAAA,IAAI,EAAE;AAAEiB,QAAAA,aAAa,EAAE9B;AAAjB;AAAR,KAAR,KAA8C;AACpD;AACA,YAAM;AAAEc,QAAAA,SAAS,EAAEY;AAAb,UAA+Bd,KAAK,CAACI,SAAN,CAAgB;AACnDC,QAAAA,KAAK,EAAEjE,UAD4C;AAEnDkE,QAAAA,SAAS,EAAE;AAAEd,UAAAA,QAAQ,EAAE;AAAZ;AAFwC,OAAhB,CAArC;AAIA,YAAMe,KAAK,GAAGO,aAAa,CAACN,SAAd,CACXW,YAAD,IAAkBA,YAAY,CAAC9B,EAAb,KAAoBA,EAD1B,CAAd;AAGAW,MAAAA,KAAK,CAACS,UAAN,CAAiB;AACfJ,QAAAA,KAAK,EAAEjE,UADQ;AAEfkE,QAAAA,SAAS,EAAE;AAAEd,UAAAA,QAAQ,EAAE;AAAZ,SAFI;AAGfS,QAAAA,IAAI,EAAE;AACJC,UAAAA,SAAS,EAAE,CACT,GAAGY,aAAa,CAACJ,KAAd,CAAoB,CAApB,EAAuBH,KAAvB,CADM,EAET,GAAGO,aAAa,CAACJ,KAAd,CAAoBH,KAAK,GAAG,CAA5B,EAA+BO,aAAa,CAACH,MAA7C,CAFM;AADP;AAHS,OAAjB,EAToD,CAmBpD;;AACA,YAAMC,YAAY,GAChBZ,KAAK,CAACC,IAAN,CAAWA,IAAX,CAAgBY,UAAhB,CAA2B,+BAA3B,CADF;;AAEA,UAAID,YAAJ,EAAkB;AAChB,cAAM;AAAEV,UAAAA,SAAS,EAAEC;AAAb,YAAuBH,KAAK,CAACI,SAAN,CAAgB;AAC3CC,UAAAA,KAAK,EAAEjE,UADoC;AAE3CkE,UAAAA,SAAS,EAAE;AAAEd,YAAAA,QAAQ,EAAE;AAAZ;AAFgC,SAAhB,CAA7B;AAIAQ,QAAAA,KAAK,CAACS,UAAN,CAAiB;AACfJ,UAAAA,KAAK,EAAEjE,UADQ;AAEfkE,UAAAA,SAAS,EAAE;AAAEd,YAAAA,QAAQ,EAAE;AAAZ,WAFI;AAGfS,UAAAA,IAAI,EAAE;AACJC,YAAAA,SAAS,EAAE,CAACd,IAAD,EAAO,GAAGe,KAAV;AADP;AAHS,SAAjB;AAOD;AACF,KApCiD;AAsClDY,IAAAA,OAAO,EAAE,MAAM;AACb/E,MAAAA,KAAK,CAACgF,KAAN,CAAY,0CAAZ,EAAwD;AACtDC,QAAAA,QAAQ,EAAE;AAD4C,OAAxD;AAGD;AA1CiD,GAAjB,CAAnC;AA6CA,QAAMG,OAAO,GAAG,CACd;AACEC,IAAAA,IAAI,EAAE,IADR;AAEEC,IAAAA,OAAO,EAAE,MAAM;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD;AAJH,GADc,EAOd;AACEH,IAAAA,IAAI,EAAE,IADR;AAEEC,IAAAA,OAAO,EAAGjC,EAAD,IAAQ;AACf,YAAMoC,IAAI,GAAGjC,QAAQ,GAAG0B,aAAH,GAAmBpB,WAAxC;AACA2B,MAAAA,IAAI,CAAC;AACHnB,QAAAA,SAAS,EAAE;AACToB,UAAAA,MAAM,EAAErC;AADC;AADR,OAAD,CAAJ;AAKD;AATH,GAPc,CAAhB;AAoBA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,KAAK,IAAI,MAAC,SAAD;AAAW,IAAA,GAAG,EAAEA,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADZ,EAEE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,MAAM,EAAC,QAAd;AAAuB,IAAA,IAAI,EAAEI,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KADH,CADF,EAIE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,GAAG,EAAEI,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYC,SAAZ,CAFF,CAJF,CAFF,CADF,EAaE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGwB,OAAO,CAACO,GAAR,CAAY,CAAC;AAAEN,IAAAA,IAAF;AAAQO,IAAAA,IAAR;AAAcN,IAAAA;AAAd,GAAD,EAA0BO,CAA1B,KACX,MAAC,MAAD;AAAQ,IAAA,GAAG,EAAEA,CAAb;AAAgB,IAAA,OAAO,EAAE,MAAMP,OAAO,CAACjC,EAAD,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOgC,IAAP,CADF,CADD,CADH,CADF,CAbF,CADF;AAyBD,CAxID;;AA0IA,eAAelC,QAAf","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { BASE_TEXT, WEIGHT } from \"@style/typography\";\nimport { BLACK, GUNSMOKE, WHITE, SCOPRION } from \"@style/colors\";\nimport { toast } from \"react-toastify\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ARCHIVE_POST } from \"@data/mutations\";\nimport { UNARCHIVE_POST } from \"@data/mutations\";\nimport { USER_POSTS } from \"@data/queries\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArchive, faThumbtack } from \"@fortawesome/pro-light-svg-icons\";\n\nexport const THUMBNAIL_DIMENSION = 60;\n\nexport const Container = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\",\n  borderRadius: 3,\n  marginBottom: 12,\n  backgroundColor: WHITE,\n  boxShadow: \"0 1px 2px 0 rgba(0,0,0,.1)\",\n  padding: \"1rem\",\n});\n\nexport const Body = styled(\"div\")({\n  display: \"flex\",\n});\n\nconst Footer = styled(\"div\")({\n  marginTop: \".5rem\",\n  display: \"flex\",\n  flexDirection: \"row\",\n});\n\nconst Thumbnail = styled(\"div\")(\n  {\n    // height: 120,\n    // width: 150,\n    flexShrink: 0,\n    borderRadius: 2,\n    height: THUMBNAIL_DIMENSION,\n    width: THUMBNAIL_DIMENSION,\n  },\n  ({ src }) => ({\n    backgroundImage: `url(${src})`,\n    backgroundSize: \"cover,auto\",\n\n    backgroundPosition: \"50% 50%,50% 50%\",\n  })\n);\n\nexport const Content = styled(\"div\")({\n  marginLeft: \"1rem\",\n});\n\nconst Title = styled(\"a\")({\n  ...BASE_TEXT,\n  fontSize: \"1rem\",\n  fontWeight: WEIGHT.BOLD,\n  wordBreak: \"break-word\",\n  textDecoration: \"none\",\n  color: BLACK,\n});\n\nconst MetaLine = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n});\n\nconst PublisherLine = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n  marginTop: \".25rem\",\n});\n\nconst MetaText = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n});\n\nconst Author = styled(\"div\")({\n  ...BASE_TEXT,\n  color: SCOPRION,\n  fontWeight: WEIGHT.BOLD,\n});\n\nconst SourceLogo = styled(\"div\")(\n  {\n    width: \"1rem\",\n    height: \"1rem\",\n  },\n  ({ src }) => ({\n    backgroundImage: `url(${src})`,\n    backgroundSize: \"cover,auto\",\n    backgroundPosition: \"50% 50%,50% 50%\",\n    border: `1px solid ${GUNSMOKE}`,\n  })\n);\n\nconst Publisher = styled(\"div\")({\n  ...BASE_TEXT,\n  color: SCOPRION,\n  //   fontWeight: WEIGHT.BOLD,\n  marginLeft: \".5rem\",\n});\n\nconst Divider = styled(\"div\")({\n  height: 18,\n  display: \"flex\",\n  alignItems: \"center\",\n  \"&::after\": {\n    content: `'・'`,\n    color: SCOPRION,\n  },\n});\n\nconst DateContainer = styled(\"div\")({});\n\nconst Actions = styled(\"div\")({\n  display: \"flex\",\n  \" > div:first-of-type\": {\n    marginLeft: 0,\n  },\n});\n\nconst Name = styled(\"div\")({\n  ...BASE_TEXT,\n});\n\nconst Action = styled(\"div\")({\n  marginLeft: \".5rem\",\n  cursor: \"pointer\",\n  backgroundColor: \"#EF937F\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  width: 26,\n  height: 26,\n});\n\nconst Icon = styled(\"div\")({\n  fontSize: \".75rem\",\n});\n\nconst PostCard = ({\n  post: { id, image, title, archived, author, url, logo, publisher, date },\n}) => {\n  const [archivePost] = useMutation(ARCHIVE_POST, {\n    update: (cache, { data: { archivePost: post } }) => {\n      // Remove post from reading list query\n      const { userPosts: posts } = cache.readQuery({\n        query: USER_POSTS,\n        variables: { archived: false },\n      });\n      const index = posts.findIndex((post) => post.id === id);\n      cache.writeQuery({\n        query: USER_POSTS,\n        variables: { archived: false },\n        data: {\n          userPosts: [\n            ...posts.slice(0, index),\n            ...posts.slice(index + 1, posts.length),\n          ],\n        },\n      });\n      // Add post to archive\n      const queryInCache =\n        cache.data.data.ROOT_QUERY['userPosts({\"archived\":true})'];\n      if (queryInCache) {\n        const { userPosts: archivedPosts } = cache.readQuery({\n          query: USER_POSTS,\n          variables: { archived: true },\n        });\n        cache.writeQuery({\n          query: USER_POSTS,\n          variables: { archived: true },\n          data: {\n            userPosts: [post, ...archivedPosts],\n          },\n        });\n      }\n    },\n\n    onError: () => {\n      toast.error(\"😳Unable to archive post at this time.\", {\n        position: \"bottom-left\",\n      });\n    },\n  });\n\n  const [unarchivePost] = useMutation(UNARCHIVE_POST, {\n    update: (cache, { data: { unarchivePost: post } }) => {\n      // Remove post from archive query\n      const { userPosts: archivedPosts } = cache.readQuery({\n        query: USER_POSTS,\n        variables: { archived: true },\n      });\n      const index = archivedPosts.findIndex(\n        (archivedPost) => archivedPost.id === id\n      );\n      cache.writeQuery({\n        query: USER_POSTS,\n        variables: { archived: true },\n        data: {\n          userPosts: [\n            ...archivedPosts.slice(0, index),\n            ...archivedPosts.slice(index + 1, archivedPosts.length),\n          ],\n        },\n      });\n      // Add post to archive\n      const queryInCache =\n        cache.data.data.ROOT_QUERY['userPosts({\"archived\":false})'];\n      if (queryInCache) {\n        const { userPosts: posts } = cache.readQuery({\n          query: USER_POSTS,\n          variables: { archived: false },\n        });\n        cache.writeQuery({\n          query: USER_POSTS,\n          variables: { archived: false },\n          data: {\n            userPosts: [post, ...posts],\n          },\n        });\n      }\n    },\n\n    onError: () => {\n      toast.error(\"😳Unable to unarchive post at this time.\", {\n        position: \"bottom-left\",\n      });\n    },\n  });\n\n  const ACTIONS = [\n    {\n      icon: \"📌\",\n      onClick: () => {\n        console.log(\"clicked pin\");\n      },\n    },\n    {\n      icon: \"🗃\",\n      onClick: (id) => {\n        const func = archived ? unarchivePost : archivePost;\n        func({\n          variables: {\n            postId: id,\n          },\n        });\n      },\n    },\n  ];\n\n  return (\n    <Container>\n      <Body>\n        {image && <Thumbnail src={image} />}\n        <Content>\n          <Title target=\"_blank\" href={url}>\n            {title}\n          </Title>\n          <PublisherLine>\n            <SourceLogo src={logo} />\n            <Publisher>{publisher}</Publisher>\n          </PublisherLine>\n        </Content>\n      </Body>\n      <Footer>\n        <Actions>\n          {ACTIONS.map(({ icon, name, onClick }, i) => (\n            <Action key={i} onClick={() => onClick(id)}>\n              <Icon>{icon}</Icon>\n            </Action>\n          ))}\n        </Actions>\n      </Footer>\n    </Container>\n  );\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}