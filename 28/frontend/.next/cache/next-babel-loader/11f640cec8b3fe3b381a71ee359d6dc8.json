{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _styled from \"@emotion/styled-base\";\n\nvar _styled2,\n    _this = this,\n    _jsxFileName = \"/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/components/post-card/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { WalletContext } from \"@enhancers/wallet-provider\";\nimport { BASE_TEXT, WEIGHT } from \"@style/typography\";\nimport CoralButton from \"@library/components/buttons/coral\";\nimport { BLACK, GUNSMOKE, WHITE, BLUSH, FOCUS_BLUSH, SCOPRION, PURPLE, ALABASTER, FOCUS_LAVENDER } from \"@style/colors\";\nimport { toast } from \"react-toastify\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ARCHIVE_POST } from \"@data/mutations\";\nimport { UNARCHIVE_POST } from \"@data/mutations\";\nimport { USER_POSTS } from \"@data/queries\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArchive, faThumbtack } from \"@fortawesome/pro-light-svg-icons\";\nexport var THUMBNAIL_DIMENSION = 60;\n\nvar Actions = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth20\",\n  label: \"Actions\"\n})(false ? {\n  name: \"1x3h1ro\",\n  styles: \"display:flex;transition:opacity .1s; > div:first-of-type{margin-left:0;}\"\n} : {\n  name: \"1x3h1ro\",\n  styles: \"display:flex;transition:opacity .1s; > div:first-of-type{margin-left:0;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nexport var Container = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth21\",\n  label: \"Container\"\n})((_styled2 = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  borderRadius: 3,\n  marginBottom: 12,\n  backgroundColor: WHITE,\n  boxShadow: \"0 1px 2px 0 rgba(0,0,0,.1)\",\n  padding: \"1rem\"\n}, _defineProperty(_styled2, Actions, {\n  opacity: 0\n}), _defineProperty(_styled2, \"&:hover\", _defineProperty({}, Actions, {\n  opacity: 1\n})), _styled2), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\nexport var Body = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth22\",\n  label: \"Body\"\n})(false ? {\n  name: \"gg4vpm\",\n  styles: \"display:flex;justify-content:space-between;\"\n} : {\n  name: \"gg4vpm\",\n  styles: \"display:flex;justify-content:space-between;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar Footer = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth23\",\n  label: \"Footer\"\n})(false ? {\n  name: \"1vctmtz\",\n  styles: \"margin-top:.5rem;display:flex;flex-direction:row;\"\n} : {\n  name: \"1vctmtz\",\n  styles: \"margin-top:.5rem;display:flex;flex-direction:row;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar Thumbnail = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth24\",\n  label: \"Thumbnail\"\n})({\n  flexShrink: 0,\n  borderRadius: 2,\n  height: THUMBNAIL_DIMENSION,\n  width: THUMBNAIL_DIMENSION,\n  marginLeft: \"1rem\"\n}, function (_ref) {\n  var src = _ref.src;\n  return {\n    backgroundImage: \"url(\".concat(src, \")\"),\n    backgroundSize: \"cover,auto\",\n    backgroundPosition: \"50% 50%,50% 50%\"\n  };\n}, false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nexport var Content = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth25\",\n  label: \"Content\"\n})(false ? {\n  name: \"0\",\n  styles: \"\"\n} : {\n  name: \"0\",\n  styles: \"\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar Title = /*#__PURE__*/_styled(\"a\", {\n  target: \"e2uwth26\",\n  label: \"Title\"\n})(_objectSpread(_objectSpread({}, BASE_TEXT), {}, {\n  fontSize: \"1rem\",\n  fontWeight: WEIGHT.BOLD,\n  wordBreak: \"break-word\",\n  textDecoration: \"none\",\n  color: BLACK\n}), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar MetaLine = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth27\",\n  label: \"MetaLine\"\n})(false ? {\n  name: \"70qvj9\",\n  styles: \"display:flex;align-items:center;\"\n} : {\n  name: \"70qvj9\",\n  styles: \"display:flex;align-items:center;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar PublisherLine = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth28\",\n  label: \"PublisherLine\"\n})(false ? {\n  name: \"kea77a\",\n  styles: \"display:flex;align-items:center;margin-top:.25rem;\"\n} : {\n  name: \"kea77a\",\n  styles: \"display:flex;align-items:center;margin-top:.25rem;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar MetaText = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth29\",\n  label: \"MetaText\"\n})(false ? {\n  name: \"70qvj9\",\n  styles: \"display:flex;align-items:center;\"\n} : {\n  name: \"70qvj9\",\n  styles: \"display:flex;align-items:center;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar Author = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth210\",\n  label: \"Author\"\n})(_objectSpread(_objectSpread({}, BASE_TEXT), {}, {\n  color: SCOPRION,\n  fontWeight: WEIGHT.BOLD\n}), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar SourceLogo = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth211\",\n  label: \"SourceLogo\"\n})(\"width:1rem;height:1rem;\", function (_ref2) {\n  var src = _ref2.src;\n  return {\n    backgroundImage: \"url(\".concat(src, \")\"),\n    backgroundSize: \"cover,auto\",\n    backgroundPosition: \"50% 50%,50% 50%\",\n    border: \"1px solid \".concat(GUNSMOKE)\n  };\n}, false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar Publisher = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth212\",\n  label: \"Publisher\"\n})(_objectSpread(_objectSpread({}, BASE_TEXT), {}, {\n  color: SCOPRION,\n  //   fontWeight: WEIGHT.BOLD,\n  marginLeft: \".5rem\"\n}), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar Divider = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth213\",\n  label: \"Divider\"\n})({\n  height: 18,\n  display: \"flex\",\n  alignItems: \"center\",\n  \"&::after\": {\n    content: \"'\\u30FB'\",\n    color: SCOPRION\n  }\n}, false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar DateContainer = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth214\",\n  label: \"DateContainer\"\n})(false ? {\n  name: \"0\",\n  styles: \"\"\n} : {\n  name: \"0\",\n  styles: \"\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar Name = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth215\",\n  label: \"Name\"\n})(_objectSpread({}, BASE_TEXT), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar Action = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth216\",\n  label: \"Action\"\n})(\"margin-left:.5rem;cursor:pointer;display:flex;align-items:center;justify-content:center;width:26px;height:26px;border-radius:50%;transition:box-shadow .18s;\", function (_ref3) {\n  var _ref3$active = _ref3.active,\n      active = _ref3$active === void 0 ? false : _ref3$active,\n      boxShadowColor = _ref3.boxShadowColor,\n      gradientStartColor = _ref3.gradientStartColor,\n      gradientEndColor = _ref3.gradientEndColor;\n  return {\n    background: active ? \"linear-gradient(111deg, \".concat(gradientStartColor, \", \").concat(gradientEndColor, \")\") : ALABASTER,\n    boxShadow: \"0px 0px 0px 2px \".concat(active ? boxShadowColor : WHITE),\n    \"&:hover\": {\n      boxShadow: \"0px 0px 0px 2px \".concat(active ? boxShadowColor : FOCUS_LAVENDER)\n    }\n  };\n}, false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar GiveAwardCta = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth217\",\n  label: \"GiveAwardCta\"\n})(_objectSpread(_objectSpread({}, BASE_TEXT), {}, {\n  cursor: \"pointer\",\n  \"&:hover\": {\n    color: PURPLE\n  }\n}), false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar ACTION_TIMEOUT = 1000;\n\nvar Icon = /*#__PURE__*/_styled(\"div\", {\n  target: \"e2uwth218\",\n  label: \"Icon\"\n})({\n  fontSize: \".875rem\",\n  marginTop: -2,\n  letterSpacing: -5\n}, false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\nvar StyledCoralButton = /*#__PURE__*/_styled(CoralButton, {\n  target: \"e2uwth219\",\n  label: \"StyledCoralButton\"\n})(false ? {\n  name: \"15p9n5u\",\n  styles: \"height:24px;\"\n} : {\n  name: \"15p9n5u\",\n  styles: \"height:24px;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nvar PostCard = function PostCard(_ref4) {\n  _s();\n\n  var _ref4$currentUser = _ref4.currentUser,\n      currentUser = _ref4$currentUser === void 0 ? null : _ref4$currentUser,\n      _ref4$post = _ref4.post,\n      id = _ref4$post.id,\n      image = _ref4$post.image,\n      title = _ref4$post.title,\n      archived = _ref4$post.archived,\n      pinned = _ref4$post.pinned,\n      author = _ref4$post.author,\n      url = _ref4$post.url,\n      logo = _ref4$post.logo,\n      publisher = _ref4$post.publisher,\n      date = _ref4$post.date,\n      post = _ref4.post;\n\n  var _useContext = useContext(WalletContext),\n      giveAward = _useContext.giveAward;\n\n  var router = useRouter();\n  var route = router.route;\n  var showActions = route !== \"/\";\n\n  var _useMutation = useMutation(ARCHIVE_POST, {\n    update: function update(cache, _ref5) {\n      var post = _ref5.data.archivePost;\n      console.log(\"DONE\", cache); // Remove post from reading list query\n\n      var _cache$readQuery = cache.readQuery({\n        query: USER_POSTS,\n        variables: {\n          archived: false\n        }\n      }),\n          posts = _cache$readQuery.userPosts;\n\n      var index = posts.findIndex(function (post) {\n        return post.id === id;\n      });\n      cache.writeQuery({\n        query: USER_POSTS,\n        variables: {\n          archived: false\n        },\n        data: {\n          userPosts: [].concat(_toConsumableArray(posts.slice(0, index)), _toConsumableArray(posts.slice(index + 1, posts.length)))\n        }\n      }); // Add post to archive\n\n      var queryInCache = cache.data.data.ROOT_QUERY['userPosts({\"archived\":true})'];\n\n      if (queryInCache) {\n        var _cache$readQuery2 = cache.readQuery({\n          query: USER_POSTS,\n          variables: {\n            archived: true\n          }\n        }),\n            archivedPosts = _cache$readQuery2.userPosts;\n\n        cache.writeQuery({\n          query: USER_POSTS,\n          variables: {\n            archived: true\n          },\n          data: {\n            userPosts: [post].concat(_toConsumableArray(archivedPosts))\n          }\n        });\n      }\n    },\n    onError: function onError() {\n      toast.error(\"😳Unable to archive post at this time.\", {\n        position: \"bottom-left\"\n      });\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      archivePost = _useMutation2[0];\n\n  var _useMutation3 = useMutation(UNARCHIVE_POST, {\n    update: function update(cache, _ref6) {\n      var post = _ref6.data.unarchivePost;\n\n      // Remove post from archive query\n      var _cache$readQuery3 = cache.readQuery({\n        query: USER_POSTS,\n        variables: {\n          archived: true\n        }\n      }),\n          archivedPosts = _cache$readQuery3.userPosts;\n\n      var index = archivedPosts.findIndex(function (archivedPost) {\n        return archivedPost.id === id;\n      });\n      cache.writeQuery({\n        query: USER_POSTS,\n        variables: {\n          archived: true\n        },\n        data: {\n          userPosts: [].concat(_toConsumableArray(archivedPosts.slice(0, index)), _toConsumableArray(archivedPosts.slice(index + 1, archivedPosts.length)))\n        }\n      }); // Add post to archive\n\n      var queryInCache = cache.data.data.ROOT_QUERY['userPosts({\"archived\":false})'];\n\n      if (queryInCache) {\n        var _cache$readQuery4 = cache.readQuery({\n          query: USER_POSTS,\n          variables: {\n            archived: false\n          }\n        }),\n            posts = _cache$readQuery4.userPosts;\n\n        cache.writeQuery({\n          query: USER_POSTS,\n          variables: {\n            archived: false\n          },\n          data: {\n            userPosts: [post].concat(_toConsumableArray(posts))\n          }\n        });\n      }\n    },\n    onError: function onError() {\n      toast.error(\"😳Unable to unarchive post at this time.\", {\n        position: \"bottom-left\"\n      });\n    }\n  }),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      unarchivePost = _useMutation4[0];\n\n  var ACTIONS = [// {\n  //   icon: \"📌\",\n  //   boxShadowColor: \"#d0e3ff\",\n  //   gradientStartColor: \"#c5d9f8\",\n  //   gradientEndColor: \"#90bbff\",\n  //   activeKey: \"pinned\",\n  //   onClick: () => {\n  //     console.log(\"clicked pin\");\n  //   },\n  // },\n  {\n    icon: \"💾\",\n    boxShadowColor: \"#cfc9f3\",\n    gradientStartColor: \"#cac3f3\",\n    gradientEndColor: \"#958aee\",\n    activeKey: \"archived\",\n    onClick: function onClick() {\n      var func = archived ? unarchivePost : archivePost;\n      func({\n        variables: {\n          postId: id\n        }\n      });\n    }\n  }];\n  var showGiveAward = currentUser && post.submitter.walletIsSetup;\n\n  var handleGiveAward = function handleGiveAward() {\n    giveAward({\n      recipientAddress: post.submitter.walletAddress\n    });\n  };\n\n  return __jsx(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 5\n    }\n  }, __jsx(Body, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }\n  }, __jsx(Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 9\n    }\n  }, __jsx(Title, {\n    target: \"_blank\",\n    href: url,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 11\n    }\n  }, title), __jsx(PublisherLine, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 11\n    }\n  }, __jsx(SourceLogo, {\n    src: logo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 13\n    }\n  }), __jsx(Publisher, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 13\n    }\n  }, publisher))), image && __jsx(Thumbnail, {\n    src: image,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 19\n    }\n  })), __jsx(Footer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }\n  }, showGiveAward && __jsx(StyledCoralButton, {\n    onClick: handleGiveAward,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 11\n    }\n  }, \"\\uD83C\\uDFC5 Give Award\"), showActions && __jsx(Actions, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 11\n    }\n  }, ACTIONS.map(function (_ref7, i) {\n    var icon = _ref7.icon,\n        name = _ref7.name,\n        _onClick = _ref7.onClick,\n        boxShadowColor = _ref7.boxShadowColor,\n        gradientStartColor = _ref7.gradientStartColor,\n        gradientEndColor = _ref7.gradientEndColor,\n        activeKey = _ref7.activeKey;\n    return __jsx(Action, {\n      active: post[activeKey],\n      boxShadowColor: boxShadowColor,\n      gradientStartColor: gradientStartColor,\n      gradientEndColor: gradientEndColor,\n      key: i,\n      onClick: function onClick() {\n        return _onClick(id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 17\n      }\n    }, __jsx(Icon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 19\n      }\n    }, icon));\n  }))));\n};\n\n_s(PostCard, \"2d77HGYK/H9l/WOzMUT2REPjdNk=\", false, function () {\n  return [useRouter, useMutation, useMutation];\n});\n\n_c = PostCard;\nexport default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["/Users/lukehamilton/development/lyra-labs-dev/lyra-labs/frontend/components/post-card/index.js"],"names":["React","useState","useContext","useRouter","WalletContext","BASE_TEXT","WEIGHT","CoralButton","BLACK","GUNSMOKE","WHITE","BLUSH","FOCUS_BLUSH","SCOPRION","PURPLE","ALABASTER","FOCUS_LAVENDER","toast","useMutation","ARCHIVE_POST","UNARCHIVE_POST","USER_POSTS","FontAwesomeIcon","faArchive","faThumbtack","THUMBNAIL_DIMENSION","Actions","Container","display","flexDirection","borderRadius","marginBottom","backgroundColor","boxShadow","padding","opacity","Body","Footer","Thumbnail","flexShrink","height","width","marginLeft","src","backgroundImage","backgroundSize","backgroundPosition","Content","Title","fontSize","fontWeight","BOLD","wordBreak","textDecoration","color","MetaLine","PublisherLine","MetaText","Author","SourceLogo","border","Publisher","Divider","alignItems","content","DateContainer","Name","Action","active","boxShadowColor","gradientStartColor","gradientEndColor","background","GiveAwardCta","cursor","ACTION_TIMEOUT","Icon","marginTop","letterSpacing","StyledCoralButton","PostCard","currentUser","post","id","image","title","archived","pinned","author","url","logo","publisher","date","giveAward","router","route","showActions","update","cache","data","archivePost","console","log","readQuery","query","variables","posts","userPosts","index","findIndex","writeQuery","slice","length","queryInCache","ROOT_QUERY","archivedPosts","onError","error","position","unarchivePost","archivedPost","ACTIONS","icon","activeKey","onClick","func","postId","showGiveAward","submitter","walletIsSetup","handleGiveAward","recipientAddress","walletAddress","map","i","name"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAEA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,mBAAlC;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,SACEC,KADF,EAEEC,QAFF,EAGEC,KAHF,EAIEC,KAJF,EAKEC,WALF,EAMEC,QANF,EAOEC,MAPF,EAQEC,SARF,EASEC,cATF,QAUO,eAVP;AAWA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,kCAAvC;AAEA,OAAO,IAAMC,mBAAmB,GAAG,EAA5B;;AAEP,IAAMC,OAAO,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB;;AAQA,OAAO,IAAMC,SAAS,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA;AACvBC,EAAAA,OAAO,EAAE,MADc;AAEvBC,EAAAA,aAAa,EAAE,QAFQ;AAGvBC,EAAAA,YAAY,EAAE,CAHS;AAIvBC,EAAAA,YAAY,EAAE,EAJS;AAKvBC,EAAAA,eAAe,EAAEtB,KALM;AAMvBuB,EAAAA,SAAS,EAAE,4BANY;AAOvBC,EAAAA,OAAO,EAAE;AAPc,6BAQtBR,OARsB,EAQZ;AACTS,EAAAA,OAAO,EAAE;AADA,CARY,6BAWvB,SAXuB,sBAYpBT,OAZoB,EAYV;AACTS,EAAAA,OAAO,EAAE;AADA,CAZU,0saAAlB;AAkBP,OAAO,IAAMC,IAAI,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAb;;AAKP,IAAMC,MAAM,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAf;;AAMA,IAAMC,SAAS,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA,GAChB;AACEC,EAAAA,UAAU,EAAE,CADd;AAEET,EAAAA,YAAY,EAAE,CAFhB;AAGEU,EAAAA,MAAM,EAAEf,mBAHV;AAIEgB,EAAAA,KAAK,EAAEhB,mBAJT;AAKEiB,EAAAA,UAAU,EAAE;AALd,CADgB,EAQhB;AAAA,MAAGC,GAAH,QAAGA,GAAH;AAAA,SAAc;AACZC,IAAAA,eAAe,gBAASD,GAAT,MADH;AAEZE,IAAAA,cAAc,EAAE,YAFJ;AAGZC,IAAAA,kBAAkB,EAAE;AAHR,GAAd;AAAA,CARgB,6raAAlB;;AAeA,OAAO,IAAMC,OAAO,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB;;AAIP,IAAMC,KAAK,GAAG,qBAAO,GAAP;AAAA;AAAA;AAAA,mCACT3C,SADS;AAEZ4C,EAAAA,QAAQ,EAAE,MAFE;AAGZC,EAAAA,UAAU,EAAE5C,MAAM,CAAC6C,IAHP;AAIZC,EAAAA,SAAS,EAAE,YAJC;AAKZC,EAAAA,cAAc,EAAE,MALJ;AAMZC,EAAAA,KAAK,EAAE9C;AANK,+raAAd;;AASA,IAAM+C,QAAQ,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAjB;;AAKA,IAAMC,aAAa,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAtB;;AAMA,IAAMC,QAAQ,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAjB;;AAKA,IAAMC,MAAM,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA,mCACVrD,SADU;AAEbiD,EAAAA,KAAK,EAAEzC,QAFM;AAGbqC,EAAAA,UAAU,EAAE5C,MAAM,CAAC6C;AAHN,+raAAf;;AAMA,IAAMQ,UAAU,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA,8BAKjB;AAAA,MAAGhB,GAAH,SAAGA,GAAH;AAAA,SAAc;AACZC,IAAAA,eAAe,gBAASD,GAAT,MADH;AAEZE,IAAAA,cAAc,EAAE,YAFJ;AAGZC,IAAAA,kBAAkB,EAAE,iBAHR;AAIZc,IAAAA,MAAM,sBAAenD,QAAf;AAJM,GAAd;AAAA,CALiB,6raAAnB;;AAaA,IAAMoD,SAAS,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA,mCACbxD,SADa;AAEhBiD,EAAAA,KAAK,EAAEzC,QAFS;AAGhB;AACA6B,EAAAA,UAAU,EAAE;AAJI,+raAAlB;;AAOA,IAAMoB,OAAO,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA,GAAc;AAC5BtB,EAAAA,MAAM,EAAE,EADoB;AAE5BZ,EAAAA,OAAO,EAAE,MAFmB;AAG5BmC,EAAAA,UAAU,EAAE,QAHgB;AAI5B,cAAY;AACVC,IAAAA,OAAO,YADG;AAEVV,IAAAA,KAAK,EAAEzC;AAFG;AAJgB,CAAd,6raAAhB;;AAUA,IAAMoD,aAAa,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAtB;;AAEA,IAAMC,IAAI,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA,qBACR7D,SADQ,8raAAb;;AAIA,IAAM8D,MAAM,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA,mKAcb;AAAA,2BACEC,MADF;AAAA,MACEA,MADF,6BACW,KADX;AAAA,MAEEC,cAFF,SAEEA,cAFF;AAAA,MAGEC,kBAHF,SAGEA,kBAHF;AAAA,MAIEC,gBAJF,SAIEA,gBAJF;AAAA,SAKO;AACLC,IAAAA,UAAU,EAAEJ,MAAM,qCACaE,kBADb,eACoCC,gBADpC,SAEdxD,SAHC;AAILkB,IAAAA,SAAS,4BAAqBmC,MAAM,GAAGC,cAAH,GAAoB3D,KAA/C,CAJJ;AAKL,eAAW;AACTuB,MAAAA,SAAS,4BAAqBmC,MAAM,GAAGC,cAAH,GAAoBrD,cAA/C;AADA;AALN,GALP;AAAA,CAda,6raAAf;;AA8BA,IAAMyD,YAAY,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA,mCAChBpE,SADgB;AAEnBqE,EAAAA,MAAM,EAAE,SAFW;AAGnB,aAAW;AACTpB,IAAAA,KAAK,EAAExC;AADE;AAHQ,+raAArB;;AAQA,IAAM6D,cAAc,GAAG,IAAvB;;AAEA,IAAMC,IAAI,GAAG,qBAAO,KAAP;AAAA;AAAA;AAAA,GAAc;AACzB3B,EAAAA,QAAQ,EAAE,SADe;AAEzB4B,EAAAA,SAAS,EAAE,CAAC,CAFa;AAGzBC,EAAAA,aAAa,EAAE,CAAC;AAHS,CAAd,6raAAb;;AAMA,IAAMC,iBAAiB,GAAG,qBAAOxE,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAA1B;;AAIA,IAAMyE,QAAQ,GAAG,SAAXA,QAAW,QAeX;AAAA;;AAAA,gCAdJC,WAcI;AAAA,MAdJA,WAcI,kCAdU,IAcV;AAAA,yBAbJC,IAaI;AAAA,MAZFC,EAYE,cAZFA,EAYE;AAAA,MAXFC,KAWE,cAXFA,KAWE;AAAA,MAVFC,KAUE,cAVFA,KAUE;AAAA,MATFC,QASE,cATFA,QASE;AAAA,MARFC,MAQE,cARFA,MAQE;AAAA,MAPFC,MAOE,cAPFA,MAOE;AAAA,MANFC,GAME,cANFA,GAME;AAAA,MALFC,IAKE,cALFA,IAKE;AAAA,MAJFC,SAIE,cAJFA,SAIE;AAAA,MAHFC,IAGE,cAHFA,IAGE;AAAA,MADJV,IACI,SADJA,IACI;;AAAA,oBACkBhF,UAAU,CAACE,aAAD,CAD5B;AAAA,MACIyF,SADJ,eACIA,SADJ;;AAEJ,MAAMC,MAAM,GAAG3F,SAAS,EAAxB;AACA,MAAM4F,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,MAAMC,WAAW,GAAGD,KAAK,KAAK,GAA9B;;AAJI,qBAMkB7E,WAAW,CAACC,YAAD,EAAe;AAC9C8E,IAAAA,MAAM,EAAE,gBAACC,KAAD,SAA4C;AAAA,UAAbhB,IAAa,SAAlCiB,IAAkC,CAA1BC,WAA0B;AAClDC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,KAApB,EADkD,CAElD;;AAFkD,6BAGrBA,KAAK,CAACK,SAAN,CAAgB;AAC3CC,QAAAA,KAAK,EAAEnF,UADoC;AAE3CoF,QAAAA,SAAS,EAAE;AAAEnB,UAAAA,QAAQ,EAAE;AAAZ;AAFgC,OAAhB,CAHqB;AAAA,UAG/BoB,KAH+B,oBAG1CC,SAH0C;;AAOlD,UAAMC,KAAK,GAAGF,KAAK,CAACG,SAAN,CAAgB,UAAC3B,IAAD;AAAA,eAAUA,IAAI,CAACC,EAAL,KAAYA,EAAtB;AAAA,OAAhB,CAAd;AACAe,MAAAA,KAAK,CAACY,UAAN,CAAiB;AACfN,QAAAA,KAAK,EAAEnF,UADQ;AAEfoF,QAAAA,SAAS,EAAE;AAAEnB,UAAAA,QAAQ,EAAE;AAAZ,SAFI;AAGfa,QAAAA,IAAI,EAAE;AACJQ,UAAAA,SAAS,+BACJD,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeH,KAAf,CADI,sBAEJF,KAAK,CAACK,KAAN,CAAYH,KAAK,GAAG,CAApB,EAAuBF,KAAK,CAACM,MAA7B,CAFI;AADL;AAHS,OAAjB,EARkD,CAkBlD;;AACA,UAAMC,YAAY,GAChBf,KAAK,CAACC,IAAN,CAAWA,IAAX,CAAgBe,UAAhB,CAA2B,8BAA3B,CADF;;AAEA,UAAID,YAAJ,EAAkB;AAAA,gCACqBf,KAAK,CAACK,SAAN,CAAgB;AACnDC,UAAAA,KAAK,EAAEnF,UAD4C;AAEnDoF,UAAAA,SAAS,EAAE;AAAEnB,YAAAA,QAAQ,EAAE;AAAZ;AAFwC,SAAhB,CADrB;AAAA,YACG6B,aADH,qBACRR,SADQ;;AAKhBT,QAAAA,KAAK,CAACY,UAAN,CAAiB;AACfN,UAAAA,KAAK,EAAEnF,UADQ;AAEfoF,UAAAA,SAAS,EAAE;AAAEnB,YAAAA,QAAQ,EAAE;AAAZ,WAFI;AAGfa,UAAAA,IAAI,EAAE;AACJQ,YAAAA,SAAS,GAAGzB,IAAH,4BAAYiC,aAAZ;AADL;AAHS,SAAjB;AAOD;AACF,KAnC6C;AAqC9CC,IAAAA,OAAO,EAAE,mBAAM;AACbnG,MAAAA,KAAK,CAACoG,KAAN,CAAY,wCAAZ,EAAsD;AACpDC,QAAAA,QAAQ,EAAE;AAD0C,OAAtD;AAGD;AAzC6C,GAAf,CAN7B;AAAA;AAAA,MAMGlB,WANH;;AAAA,sBAkDoBlF,WAAW,CAACE,cAAD,EAAiB;AAClD6E,IAAAA,MAAM,EAAE,gBAACC,KAAD,SAA8C;AAAA,UAAbhB,IAAa,SAApCiB,IAAoC,CAA5BoB,aAA4B;;AACpD;AADoD,8BAEfrB,KAAK,CAACK,SAAN,CAAgB;AACnDC,QAAAA,KAAK,EAAEnF,UAD4C;AAEnDoF,QAAAA,SAAS,EAAE;AAAEnB,UAAAA,QAAQ,EAAE;AAAZ;AAFwC,OAAhB,CAFe;AAAA,UAEjC6B,aAFiC,qBAE5CR,SAF4C;;AAMpD,UAAMC,KAAK,GAAGO,aAAa,CAACN,SAAd,CACZ,UAACW,YAAD;AAAA,eAAkBA,YAAY,CAACrC,EAAb,KAAoBA,EAAtC;AAAA,OADY,CAAd;AAGAe,MAAAA,KAAK,CAACY,UAAN,CAAiB;AACfN,QAAAA,KAAK,EAAEnF,UADQ;AAEfoF,QAAAA,SAAS,EAAE;AAAEnB,UAAAA,QAAQ,EAAE;AAAZ,SAFI;AAGfa,QAAAA,IAAI,EAAE;AACJQ,UAAAA,SAAS,+BACJQ,aAAa,CAACJ,KAAd,CAAoB,CAApB,EAAuBH,KAAvB,CADI,sBAEJO,aAAa,CAACJ,KAAd,CAAoBH,KAAK,GAAG,CAA5B,EAA+BO,aAAa,CAACH,MAA7C,CAFI;AADL;AAHS,OAAjB,EAToD,CAmBpD;;AACA,UAAMC,YAAY,GAChBf,KAAK,CAACC,IAAN,CAAWA,IAAX,CAAgBe,UAAhB,CAA2B,+BAA3B,CADF;;AAEA,UAAID,YAAJ,EAAkB;AAAA,gCACaf,KAAK,CAACK,SAAN,CAAgB;AAC3CC,UAAAA,KAAK,EAAEnF,UADoC;AAE3CoF,UAAAA,SAAS,EAAE;AAAEnB,YAAAA,QAAQ,EAAE;AAAZ;AAFgC,SAAhB,CADb;AAAA,YACGoB,KADH,qBACRC,SADQ;;AAKhBT,QAAAA,KAAK,CAACY,UAAN,CAAiB;AACfN,UAAAA,KAAK,EAAEnF,UADQ;AAEfoF,UAAAA,SAAS,EAAE;AAAEnB,YAAAA,QAAQ,EAAE;AAAZ,WAFI;AAGfa,UAAAA,IAAI,EAAE;AACJQ,YAAAA,SAAS,GAAGzB,IAAH,4BAAYwB,KAAZ;AADL;AAHS,SAAjB;AAOD;AACF,KApCiD;AAsClDU,IAAAA,OAAO,EAAE,mBAAM;AACbnG,MAAAA,KAAK,CAACoG,KAAN,CAAY,0CAAZ,EAAwD;AACtDC,QAAAA,QAAQ,EAAE;AAD4C,OAAxD;AAGD;AA1CiD,GAAjB,CAlD/B;AAAA;AAAA,MAkDGC,aAlDH;;AA+FJ,MAAME,OAAO,GAAG,CACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,IAAI,EAAE,IADR;AAEErD,IAAAA,cAAc,EAAE,SAFlB;AAGEC,IAAAA,kBAAkB,EAAE,SAHtB;AAIEC,IAAAA,gBAAgB,EAAE,SAJpB;AAKEoD,IAAAA,SAAS,EAAE,UALb;AAMEC,IAAAA,OAAO,EAAE,mBAAM;AACb,UAAMC,IAAI,GAAGvC,QAAQ,GAAGiC,aAAH,GAAmBnB,WAAxC;AACAyB,MAAAA,IAAI,CAAC;AACHpB,QAAAA,SAAS,EAAE;AACTqB,UAAAA,MAAM,EAAE3C;AADC;AADR,OAAD,CAAJ;AAKD;AAbH,GAXc,CAAhB;AA4BA,MAAM4C,aAAa,GAAG9C,WAAW,IAAIC,IAAI,CAAC8C,SAAL,CAAeC,aAApD;;AAEA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BrC,IAAAA,SAAS,CAAC;AAAEsC,MAAAA,gBAAgB,EAAEjD,IAAI,CAAC8C,SAAL,CAAeI;AAAnC,KAAD,CAAT;AACD,GAFD;;AAIA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,MAAM,EAAC,QAAd;AAAuB,IAAA,IAAI,EAAE3C,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,KADH,CADF,EAIE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,GAAG,EAAEK,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYC,SAAZ,CAFF,CAJF,CADF,EAUGP,KAAK,IAAI,MAAC,SAAD;AAAW,IAAA,GAAG,EAAEA,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVZ,CADF,EAaE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG2C,aAAa,IACZ,MAAC,iBAAD;AAAmB,IAAA,OAAO,EAAEG,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAFJ,EAMGlC,WAAW,IACV,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGyB,OAAO,CAACY,GAAR,CACC,iBAUEC,CAVF;AAAA,QAEIZ,IAFJ,SAEIA,IAFJ;AAAA,QAGIa,IAHJ,SAGIA,IAHJ;AAAA,QAIIX,QAJJ,SAIIA,OAJJ;AAAA,QAKIvD,cALJ,SAKIA,cALJ;AAAA,QAMIC,kBANJ,SAMIA,kBANJ;AAAA,QAOIC,gBAPJ,SAOIA,gBAPJ;AAAA,QAQIoD,SARJ,SAQIA,SARJ;AAAA,WAYE,MAAC,MAAD;AACE,MAAA,MAAM,EAAEzC,IAAI,CAACyC,SAAD,CADd;AAEE,MAAA,cAAc,EAAEtD,cAFlB;AAGE,MAAA,kBAAkB,EAAEC,kBAHtB;AAIE,MAAA,gBAAgB,EAAEC,gBAJpB;AAKE,MAAA,GAAG,EAAE+D,CALP;AAME,MAAA,OAAO,EAAE;AAAA,eAAMV,QAAO,CAACzC,EAAD,CAAb;AAAA,OANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOuC,IAAP,CARF,CAZF;AAAA,GADD,CADH,CAPJ,CAbF,CADF;AAoDD,CApMD;;GAAM1C,Q;UAiBW7E,S,EAIOe,W,EA4CEA,W;;;KAjEpB8D,Q;AAsMN,eAAeA,QAAf","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { WalletContext } from \"@enhancers/wallet-provider\";\nimport styled from \"@emotion/styled\";\nimport { BASE_TEXT, WEIGHT } from \"@style/typography\";\nimport CoralButton from \"@library/components/buttons/coral\";\nimport {\n  BLACK,\n  GUNSMOKE,\n  WHITE,\n  BLUSH,\n  FOCUS_BLUSH,\n  SCOPRION,\n  PURPLE,\n  ALABASTER,\n  FOCUS_LAVENDER,\n} from \"@style/colors\";\nimport { toast } from \"react-toastify\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { ARCHIVE_POST } from \"@data/mutations\";\nimport { UNARCHIVE_POST } from \"@data/mutations\";\nimport { USER_POSTS } from \"@data/queries\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArchive, faThumbtack } from \"@fortawesome/pro-light-svg-icons\";\n\nexport const THUMBNAIL_DIMENSION = 60;\n\nconst Actions = styled(\"div\")({\n  display: \"flex\",\n  transition: \"opacity .1s\",\n  \" > div:first-of-type\": {\n    marginLeft: 0,\n  },\n});\n\nexport const Container = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\",\n  borderRadius: 3,\n  marginBottom: 12,\n  backgroundColor: WHITE,\n  boxShadow: \"0 1px 2px 0 rgba(0,0,0,.1)\",\n  padding: \"1rem\",\n  [Actions]: {\n    opacity: 0,\n  },\n  \"&:hover\": {\n    [Actions]: {\n      opacity: 1,\n    },\n  },\n});\n\nexport const Body = styled(\"div\")({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n});\n\nconst Footer = styled(\"div\")({\n  marginTop: \".5rem\",\n  display: \"flex\",\n  flexDirection: \"row\",\n});\n\nconst Thumbnail = styled(\"div\")(\n  {\n    flexShrink: 0,\n    borderRadius: 2,\n    height: THUMBNAIL_DIMENSION,\n    width: THUMBNAIL_DIMENSION,\n    marginLeft: \"1rem\",\n  },\n  ({ src }) => ({\n    backgroundImage: `url(${src})`,\n    backgroundSize: \"cover,auto\",\n    backgroundPosition: \"50% 50%,50% 50%\",\n  })\n);\n\nexport const Content = styled(\"div\")({\n  // marginLeft: \"1rem\",\n});\n\nconst Title = styled(\"a\")({\n  ...BASE_TEXT,\n  fontSize: \"1rem\",\n  fontWeight: WEIGHT.BOLD,\n  wordBreak: \"break-word\",\n  textDecoration: \"none\",\n  color: BLACK,\n});\n\nconst MetaLine = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n});\n\nconst PublisherLine = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n  marginTop: \".25rem\",\n});\n\nconst MetaText = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n});\n\nconst Author = styled(\"div\")({\n  ...BASE_TEXT,\n  color: SCOPRION,\n  fontWeight: WEIGHT.BOLD,\n});\n\nconst SourceLogo = styled(\"div\")(\n  {\n    width: \"1rem\",\n    height: \"1rem\",\n  },\n  ({ src }) => ({\n    backgroundImage: `url(${src})`,\n    backgroundSize: \"cover,auto\",\n    backgroundPosition: \"50% 50%,50% 50%\",\n    border: `1px solid ${GUNSMOKE}`,\n  })\n);\n\nconst Publisher = styled(\"div\")({\n  ...BASE_TEXT,\n  color: SCOPRION,\n  //   fontWeight: WEIGHT.BOLD,\n  marginLeft: \".5rem\",\n});\n\nconst Divider = styled(\"div\")({\n  height: 18,\n  display: \"flex\",\n  alignItems: \"center\",\n  \"&::after\": {\n    content: `'・'`,\n    color: SCOPRION,\n  },\n});\n\nconst DateContainer = styled(\"div\")({});\n\nconst Name = styled(\"div\")({\n  ...BASE_TEXT,\n});\n\nconst Action = styled(\"div\")(\n  {\n    marginLeft: \".5rem\",\n    cursor: \"pointer\",\n\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: 26,\n    height: 26,\n    borderRadius: \"50%\",\n\n    transition: \"box-shadow .18s\",\n  },\n  ({\n    active = false,\n    boxShadowColor,\n    gradientStartColor,\n    gradientEndColor,\n  }) => ({\n    background: active\n      ? `linear-gradient(111deg, ${gradientStartColor}, ${gradientEndColor})`\n      : ALABASTER,\n    boxShadow: `0px 0px 0px 2px ${active ? boxShadowColor : WHITE}`,\n    \"&:hover\": {\n      boxShadow: `0px 0px 0px 2px ${active ? boxShadowColor : FOCUS_LAVENDER}`,\n    },\n  })\n);\n\nconst GiveAwardCta = styled(\"div\")({\n  ...BASE_TEXT,\n  cursor: \"pointer\",\n  \"&:hover\": {\n    color: PURPLE,\n  },\n});\n\nconst ACTION_TIMEOUT = 1000;\n\nconst Icon = styled(\"div\")({\n  fontSize: \".875rem\",\n  marginTop: -2,\n  letterSpacing: -5,\n});\n\nconst StyledCoralButton = styled(CoralButton)({\n  height: 24,\n});\n\nconst PostCard = ({\n  currentUser = null,\n  post: {\n    id,\n    image,\n    title,\n    archived,\n    pinned,\n    author,\n    url,\n    logo,\n    publisher,\n    date,\n  },\n  post,\n}) => {\n  const { giveAward } = useContext(WalletContext);\n  const router = useRouter();\n  const route = router.route;\n  const showActions = route !== \"/\";\n\n  const [archivePost] = useMutation(ARCHIVE_POST, {\n    update: (cache, { data: { archivePost: post } }) => {\n      console.log(\"DONE\", cache);\n      // Remove post from reading list query\n      const { userPosts: posts } = cache.readQuery({\n        query: USER_POSTS,\n        variables: { archived: false },\n      });\n      const index = posts.findIndex((post) => post.id === id);\n      cache.writeQuery({\n        query: USER_POSTS,\n        variables: { archived: false },\n        data: {\n          userPosts: [\n            ...posts.slice(0, index),\n            ...posts.slice(index + 1, posts.length),\n          ],\n        },\n      });\n      // Add post to archive\n      const queryInCache =\n        cache.data.data.ROOT_QUERY['userPosts({\"archived\":true})'];\n      if (queryInCache) {\n        const { userPosts: archivedPosts } = cache.readQuery({\n          query: USER_POSTS,\n          variables: { archived: true },\n        });\n        cache.writeQuery({\n          query: USER_POSTS,\n          variables: { archived: true },\n          data: {\n            userPosts: [post, ...archivedPosts],\n          },\n        });\n      }\n    },\n\n    onError: () => {\n      toast.error(\"😳Unable to archive post at this time.\", {\n        position: \"bottom-left\",\n      });\n    },\n  });\n\n  const [unarchivePost] = useMutation(UNARCHIVE_POST, {\n    update: (cache, { data: { unarchivePost: post } }) => {\n      // Remove post from archive query\n      const { userPosts: archivedPosts } = cache.readQuery({\n        query: USER_POSTS,\n        variables: { archived: true },\n      });\n      const index = archivedPosts.findIndex(\n        (archivedPost) => archivedPost.id === id\n      );\n      cache.writeQuery({\n        query: USER_POSTS,\n        variables: { archived: true },\n        data: {\n          userPosts: [\n            ...archivedPosts.slice(0, index),\n            ...archivedPosts.slice(index + 1, archivedPosts.length),\n          ],\n        },\n      });\n      // Add post to archive\n      const queryInCache =\n        cache.data.data.ROOT_QUERY['userPosts({\"archived\":false})'];\n      if (queryInCache) {\n        const { userPosts: posts } = cache.readQuery({\n          query: USER_POSTS,\n          variables: { archived: false },\n        });\n        cache.writeQuery({\n          query: USER_POSTS,\n          variables: { archived: false },\n          data: {\n            userPosts: [post, ...posts],\n          },\n        });\n      }\n    },\n\n    onError: () => {\n      toast.error(\"😳Unable to unarchive post at this time.\", {\n        position: \"bottom-left\",\n      });\n    },\n  });\n\n  const ACTIONS = [\n    // {\n    //   icon: \"📌\",\n    //   boxShadowColor: \"#d0e3ff\",\n    //   gradientStartColor: \"#c5d9f8\",\n    //   gradientEndColor: \"#90bbff\",\n    //   activeKey: \"pinned\",\n    //   onClick: () => {\n    //     console.log(\"clicked pin\");\n    //   },\n    // },\n    {\n      icon: \"💾\",\n      boxShadowColor: \"#cfc9f3\",\n      gradientStartColor: \"#cac3f3\",\n      gradientEndColor: \"#958aee\",\n      activeKey: \"archived\",\n      onClick: () => {\n        const func = archived ? unarchivePost : archivePost;\n        func({\n          variables: {\n            postId: id,\n          },\n        });\n      },\n    },\n  ];\n\n  const showGiveAward = currentUser && post.submitter.walletIsSetup;\n\n  const handleGiveAward = () => {\n    giveAward({ recipientAddress: post.submitter.walletAddress });\n  };\n\n  return (\n    <Container>\n      <Body>\n        <Content>\n          <Title target=\"_blank\" href={url}>\n            {title}\n          </Title>\n          <PublisherLine>\n            <SourceLogo src={logo} />\n            <Publisher>{publisher}</Publisher>\n          </PublisherLine>\n        </Content>\n        {image && <Thumbnail src={image} />}\n      </Body>\n      <Footer>\n        {showGiveAward && (\n          <StyledCoralButton onClick={handleGiveAward}>\n            🏅 Give Award\n          </StyledCoralButton>\n        )}\n        {showActions && (\n          <Actions>\n            {ACTIONS.map(\n              (\n                {\n                  icon,\n                  name,\n                  onClick,\n                  boxShadowColor,\n                  gradientStartColor,\n                  gradientEndColor,\n                  activeKey,\n                },\n                i\n              ) => (\n                <Action\n                  active={post[activeKey]}\n                  boxShadowColor={boxShadowColor}\n                  gradientStartColor={gradientStartColor}\n                  gradientEndColor={gradientEndColor}\n                  key={i}\n                  onClick={() => onClick(id)}\n                >\n                  <Icon>{icon}</Icon>\n                </Action>\n              )\n            )}\n          </Actions>\n        )}\n      </Footer>\n    </Container>\n  );\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}